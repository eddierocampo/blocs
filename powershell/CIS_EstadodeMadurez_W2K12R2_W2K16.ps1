$Customer = Read-Host -Prompt 'Digite el nombre del Cliente al que pertenecen los Servidores a validar (Ejemplo: SERVIENTREGA)'
$FolderFiles = Read-Host -Prompt 'Digite la carpeta en la que se encuentra el archivo de inventario de Servidores (Ejemplo: D:\EstadodeMadurez)'
$ServersFile = $($FolderFiles + '\ServerNameList.csv')
$Servers = Import-Csv -Path $ServersFile
$CurrentDate = Get-Date
$CurntDateForm = Get-Date -UFormat "%d-%m-%Y"
cls
$UserPass = Get-Credential -Credential $null
$Cred = New-Object System.Management.Automation.PSCredential($UserPass.UserName, $UserPass.Password)
Foreach ($Server in $Servers){
            $Product = 'SISTEMA OPERATIVO'
            $ServerName = $Server.ServerName
            $DomainName = $Server.DomainName
            $SrvName = @('[' + $ServerName + ']')
            Write-Host 'Capturando Informacion para el Servidor' $ServerName 'del Dominio' $DomainName 
            #$UserPass = Get-Credential -Credential $null
            #$Cred = New-Object System.Management.Automation.PSCredential($UserPass.UserName, $UserPass.Password)
            Enter-PSSession -ComputerName $ServerName -Credential $Cred
            $Result = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                        $OSClearVer =  (Get-WmiObject Win32_OperatingSystem).Caption
                        if($OSClearVer.StartsWith('Microsoft Windows Server 2012 R2')){$OSVersion = 'W2K12R2'} Else{if($OSClearVer.StartsWith('Microsoft Windows Server 2016')){$OSVersion = 'W2K16'}}
                        md C:\SETI | Out-Null
                        SecEdit.exe /export /cfg c:\SETI\seti_secpol.cfg | Out-Null
                        $secpol = (Get-Content C:\SETI\seti_secpol.cfg)
                        auditpol.exe /get /category:* /r | Out-File C:\SETI\seti_auditpol.csv
                        $auditpol = Import-Csv C:\SETI\seti_auditpol.csv
                        $WinProductType = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\ProductOptions' -Name ProductType | Select-Object -ExpandProperty ProductType
                        if ($WinProductType -eq 'LanmanNT'){
                            $SrvType = 'DC'}
                        Else{
                            if ($WinProductType -eq 'ServerNT'){
                                $SrvType = 'MS'}
                                 Else{
                                      $SrvType = 'WindowsClient'}                      
                            }
                        if ($SrvType -eq 'DC'){
                            $OSVer = $('DC ' + $OSClearVer)}
                            Else{
                                if ($SrvType -eq 'MS'){
                                    $OSVer = $('MS ' + $OSClearVer)}
                                    }
                              
                        $HyperVRole = Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online | Select-Object -ExpandProperty State
                        if ($HyperVRole -eq 'Enabled'){
                            $HVRole = 'Yes'
                            }
                            Else{
                                $HVRole = 'No'
                                }

                        $WebRole = Get-WindowsOptionalFeature -FeatureName IIS-WebServer -Online | Select-Object -ExpandProperty State
                        if ($WebRole -eq 'Enabled'){
                            $IISRole = 'Yes'
                            }
                            Else{
                                $IISRole = 'No'
                                }                   
                        
                        #===========================================================================================================================
                        # 1. Account Policies
                        # This section contains recommendations for account policies.
                        #===========================================================================================================================
                        $CapNum1 = '1.'
                        $Cap1 = 'Account Policies'
                        $Count1 = 0
                        
                        #===========================================================================================================================
                        #1.1 Password Policy
                        #   This section contains recommendations for password policy.
                        #===========================================================================================================================

                        #1.1.1 (L1) Ensure 'Enforce password history' is set to '24 or more password(s)' (Scored) WIN2012R2_2016
                        $Tag1 = '1.1.1'
                        $Count1++
                        $Desc1 = 'Ensure Enforce password history is set to 24 or more password(s) (Scored)'
                        $Lvl1 = 'L1'
                        $PassPol1 = $secpol | where{$_ -like "PasswordHistorySize*"}
                        $PasHisSize = $PassPol1 -split '= '
                        $PassHist = $PasHisSize[1] -as [int]
                        if ($PassHist -ge '24'){
                            $Res1 = '1'} else {$Res1 = '2'}
                        $Str1 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag1 + ';' + $Desc1 + ';' + $Res1 + ';' + $Using:CurntDateForm)
                        $Str1

                        #1.1.2 (L1) Ensure 'Maximum password age' is set to '60 or fewer days but not 0' (Scored) WIN2012R2_2016
                        $Tag2 = '1.1.2'
                        $Count1++
                        $Desc2 = 'Ensure Maximum password age is set to 60 or fewer days, but not 0 (Scored)'
                        $Lvl2 = 'L1'
                        $PassPol2 = $secpol | where{$_ -like "MaximumPasswordAge*"}
                        $MaxPasAge = $PassPol2 -split '= '
                        $MaxPasswAge = $MaxPasAge[1] -as [int]
                        if ($MaxPasswAge -le '60'){
                            $Res2 = '1'} else {$Res2 = '2'}
                        $Str2 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag2 + ';' + $Desc2 + ';' + $Res2 + ';' + $Using:CurntDateForm)
                        $Str2
                        
                        #1.1.3 (L1) Ensure 'Minimum password age' is set to '1 or more day(s)' (Scored) WIN2012R2_2016
                        $Tag3 = '1.1.3'
                        $Count1++
                        $Desc3 = 'Ensure Minimum password age is set to 1 or more day(s) (Scored)'
                        $Lvl3 = 'L1'
                        $PassPol3 = $secpol | where{$_ -like "MinimumPasswordAge*"}
                        $MinPasAge = $PassPol3 -split '= '
                        $MinPasswAge = $MinPasAge[1] -as [int]
                        if ($MinPasswAge -ge '1'){
                            $Res3 = '1'} else {$Res3 = '2'}
                        $Str3 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag3 + ';' + $Desc3 + ';' + $Res3 + ';' + $Using:CurntDateForm)
                        $Str3

                        #1.1.4 (L1) Ensure 'Minimum password length' is set to '14 or more character(s)' (Scored) WIN2012R2_2016
                        $Tag4 = '1.1.4'
                        $Count1++
                        $Desc4 = 'Ensure Minimum password length is set to 14 or more character(s) (Scored)'
                        $Lvl4 = 'L1'
                        $PassPol4 = $secpol | where{$_ -like "MinimumPasswordLength*"}
                        $MinPasLen = $PassPol4 -split '= '
                        $MinPasswLng = $MinPasLen[1] -as [int]
                        if ($MinPasswLng -ge '14'){
                            $Res4 = '1'} else {$Res4 = '2'}
                        $Str4 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag4 + ';' + $Desc4 + ';' + $Res4 + ';' + $Using:CurntDateForm)
                        $Str4

                        #1.1.5 (L1) Ensure 'Password must meet complexity requirements' is set to 'Enabled' (Scored) WIN2012R2_2016
                        $Tag5 = '1.1.5'
                        $Count1++
                        $Desc5 = 'Ensure Password must meet complexity requirements is set to Enabled'
                        $Lvl5 = 'L1'
                        $PassPol5 = $secpol | where{$_ -like "PasswordComplexity*"}
                        $PassComplx = $PassPol5 -split '= '
                        $PasswComplx = $PassComplx[1] -as [int]
                        if ($PasswComplx -eq '1'){
                            $Res5 = '1'} else {$Res5 = '2'}
                        $Str5 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag5 + ';' + $Desc5 + ';' + $Res5 + ';' + $Using:CurntDateForm)
                        $Str5

                        #1.1.6 (L1) Ensure 'Store passwords using reversible encryption' is set to 'Disabled' (Scored) WIN2012R2_2016
                        $Tag6 = '1.1.6'
                        $Count1++
                        $Desc6 = 'Ensure Store passwords using reversible encryption is set to Disabled (Scored)'
                        $Lvl6 = 'L1'
                        $PassPol6 = $secpol | where{$_ -like "ClearTextPassword*"}
                        $CleTxtPas = $PassPol6 -split '= '
                        $ClearTxtPas = $CleTxtPas[1] -as [int]
                        if ($ClearTxtPas -eq '0'){
                            $Res6 = '1'} else {$Res6 = '2'}
                        $Str6 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag6 + ';' + $Desc6 + ';' + $Res6 + ';' + $Using:CurntDateForm)
                        $Str6

                        #================================================================================================================================
                        #1.2. Account Lockout Policy
                        #This section contains recommendations for account lockout policy.
                        #================================================================================================================================

                        #1.2.1 (L1) Ensure 'Account lockout duration' is set to '15 or more minute(s)' (Scored) WIN2012R2_2016
                        $Tag7 = '1.2.1'
                        $Count1++
                        $Desc7 = 'Ensure Account lockout duration is set to 15 or more minute(s) (Scored)'
                        $Lvl7 = 'L1'
                        $PassPol7 = $secpol | where{$_ -like "LockoutDuration*"}
                        $LockDurat = $PassPol7 -split '= '
                        $LockD = $LockDurat[1] -as [int]
                        if ($LockD -ge '15'){
                            $Res7 = '1'} else {$Res7 = '2'}
                        $Str7 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag7 + ';' + $Desc7 + ';' + $Res7 + ';' + $Using:CurntDateForm)
                        $Str7

                        #1.2.2 (L1) Ensure 'Account lockout threshold' is set to '10 or fewer invalid logon attempt(s), but not 0' (Scored) WIN2012R2_2016
                        $Tag8 = '1.2.2'
                        $Count1++
                        $Desc8 = 'Ensure Account lockout threshold is set to 10 or fewer invalid logon attempt(s) but not 0 (Scored)'
                        $Lvl8 = 'L1'
                        $PassPol8 = $secpol | where{$_ -like "LockoutBadCount*"}
                        $LockBadAcc = $PassPol8 -split '= '
                        $LookBad = $LockBadAcc[1] -as [int]
                        if ($LookBad -le '10'){
                            $Res8 = '1'} else {$Res8 = '2'}
                        $Str8 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag8 + ';' + $Desc8 + ';' + $Res8 + ';' + $Using:CurntDateForm)
                        $Str8

                        #1.2.3 (L1) Ensure 'Reset account lockout counter after' is set to '15 or more minute(s)' (Scored) WIN2012R2_2016
                        $Tag9 = '1.2.3'
                        $Count1++
                        $Desc9 = 'Ensure Reset account lockout counter after is set to 15 or more minute(s) (Scored)'
                        $Lvl9 = 'L1'
                        $PassPol9 = $secpol | where{$_ -like "ResetLockoutCount*"}
                        $ResLocCount = $PassPol9 -split '= '
                        $RstLckCnt = $ResLocCount[1] -as [int]
                        if ($RstLckCnt -ge '15'){
                            $Res9 = '1'} else {$Res9 = '2'}
                        $Str9 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag9 + ';' + $Desc9 + ';' + $Res9 + ';' + $Using:CurntDateForm)
                        $Str9

                        #=======================================================================================================================================
                        # 2. Local Policies
                        #   This section contains recommendations for local policies.
                        #=======================================================================================================================================

                        $CapNum2 = '2.'
                        $Cap2 = 'Local Policies'
                        $Count2 = 0

                        #=======================================================================================================================================
                        # 2.1 Audit Policy
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=======================================================================================================================================
                        # 2.2 User Rights Assignment
                        #   This section contains recommendations for user rights assignments.
                        #=======================================================================================================================================

                        #2.2.1 (L1) Ensure 'Access Credential Manager as a trusted caller' is set to 'No One' (Scored) WIN2012R2_2016
                        $Tag10 = '2.2.1'
                        $Count2++
                        $Desc10 = 'Ensure Access Credential Manager as a trusted caller is set to No One (Scored)'
                        $Lvl10 = 'L1'
                        $PassPol10 = $secpol | where{$_ -like "SeTrustedCredManAccessPrivilege*"}
                        if (!$PassPol10){
                        $Res10 = '1'}
                        Else{ 
                        $TrstCredAcc = $PassPol10 -split '= '
                        $SIDCodes10 = $TrstCredAcc[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                        $RefTag10 = @('No One')
                        $PolTag10Grps = foreach ($SIDCode10 in $SIDCodes10){
                            $SIDMod10 = $SIDCode10.Trim('*')
                            $objSID10 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod10)
                            $objUser10 = $objSID10.Translate( [System.Security.Principal.NTAccount])
                            $ObjName10 = $objUser10.Value
                            $ObjName10
                            }
                        $PolTag10Dif = Compare-Object -ReferenceObject $RefTag10 -DifferenceObject $PolTag10Grps -PassThru
                        $PolTag10Cnt = $PolTag10Dif.Count
                        if ($PolTag10Cnt -eq '0'){
                            $Res10 = '1'} else {$Res10 = '2'}
                        }
                        $Str10 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag10 + ';' + $Desc10 + ';' + $Res10 + ';' + $Using:CurntDateForm)
                        $Str10

                        #2.2.2 (L1) Configure 'Access this computer from the network' (Scored) WIN2012R2
                        $Tag11 = '2.2.2'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc11 = 'Configure Access this computer from the network (Scored)'
                            $Lvl11 = 'L1'
                            $PassPol11 = $secpol | where{$_ -like "SeNetworkLogonRight*"}
                            $NetLogRig = $PassPol11 -split '= '
                            $SIDCodes11 = $NetLogRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag11 = @('BUILTIN\Administrators','NT AUTHORITY\Authenticated Users')
                            $PolTag11Grps = foreach ($SIDCode11 in $SIDCodes11){
                                $SIDMod11 = $SIDCode11.Trim('*')
                                $objSID11 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod11)
                                $objUser11 = $objSID11.Translate( [System.Security.Principal.NTAccount])
                                $ObjName11 = $objUser11.Value
                                $ObjName11
                            }
                            $PolTag11Dif = Compare-Object -ReferenceObject $RefTag11 -DifferenceObject $PolTag11Grps -PassThru
                            $PolTag11Cnt = $PolTag11Dif.Count
                            if ($PolTag11Cnt -eq '0'){
                                $Res11 = '1'} else {$Res11 = '2'}
                            $Str11 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag11 + ';' + $Desc11 + ';' + $Res11 + ';' + $Using:CurntDateForm)
                            $Str11
                        }
                        
                        #2.2.2 (L1) Ensure 'Access this computer from the network' is set to 'Administrators, Authenticated Users, ENTERPRISE DOMAIN CONTROLLERS' (DC only) (Scored) WIN2016
                        $Tag319 = '2.2.2'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){    
						    $Count2++
                            $Desc319 = 'Ensure Access this computer from the network is set to Administrators, Authenticated Users, ENTERPRISE DOMAIN CONTROLLERS (DC only) (Scored)'
                            $Lvl319 = 'L1'
                            $PassPol319 = $secpol | where{$_ -like "SeNetworkLogonRight*"}
                            $NetLogRig = $PassPol319 -split '= '
                            $SIDCodes319 = $NetLogRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag319 = @('BUILTIN\Administrators','NT AUTHORITY\Authenticated Users', 'NT AUTHORITY\ENTERPRISE DOMAIN CONTROLLERS')
                            $PolTag319Grps = foreach ($SIDCode319 in $SIDCodes319){
                                $SIDMod319 = $SIDCode319.Trim('*')
                                $objSID319 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod319)
                                $objUser319 = $objSID319.Translate( [System.Security.Principal.NTAccount])
                                $ObjName319 = $objUser319.Value
                                $ObjName319
                            }
                        $PolTag319Dif = Compare-Object -ReferenceObject $RefTag319 -DifferenceObject $PolTag319Grps -PassThru
                        $PolTag319Cnt = $PolTag319Dif.Count
                        if ($PolTag319Cnt -eq '0'){
                            $Res319 = '1'} else {$Res319 = '2'}
                        $Str319 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag319 + ';' + $Desc319 + ';' + $Res319 + ';' + $Using:CurntDateForm)
                        $Str319
						}

                        #2.2.3 (L1) Ensure 'Act as part of the operating system' is set to 'No One' (Scored) WIN2012R2
                        $Tag12 = '2.2.3'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc12 = 'Ensure Act as part of the operating system is set to No One (Scored)'
                            $Lvl12 = 'L1'
                            $PassPol12 = $secpol | where{$_ -like "SeTcbPrivilege*"}
                            if (!$PassPol12){
                            $Res12 = '1'}
                            Else{ 
                            $TcbPri = $PassPol12 -split '= '
                            $SIDCodes12 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag12 = @('no one')
                            $PolTag12Grps = foreach ($SIDCode12 in $SIDCodes12){
                                $SIDMod12 = $SIDCode12.Trim('*')
                                $objSID12 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod12)
                                $objUser12 = $objSID12.Translate( [System.Security.Principal.NTAccount])
                                $ObjName12 = $objUser12.Value
                                $ObjName12
                            }
                            $PolTag12Dif = Compare-Object -ReferenceObject $RefTag12 -DifferenceObject $PolTag12Grps -PassThru
                            $PolTag12Cnt = $PolTag12Dif.Count
                            if ($PolTag12Cnt -eq '0'){
                                $Res12 = '1'} else {$Res12 = '2'}
                                }
                            $Str12 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag12 + ';' + $Desc12 + ';' + $Res12 + ';' + $Using:CurntDateForm)
                            $Str12
                        }

                        #2.2.3 (L1) Ensure 'Access this computer from the network' is set to 'Administrators, Authenticated Users' (MS only) (Scored) WIN2016 
                        $Tag320 = '2.2.3'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc320 = 'Ensure Access this computer from the network is set to Administrators, Authenticated Users (MS only) (Scored)'
                            $Lvl320 = 'L1'
                            $PassPol320 = $secpol | where{$_ -like "SeNetworkLogonRight*"}
                            $NetLogRig = $PassPol320 -split '= '
                            $SIDCodes320 = $NetLogRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag320 = @('BUILTIN\Administrators','NT AUTHORITY\Authenticated Users')
                            $PolTag320Grps = foreach ($SIDCode320 in $SIDCodes320){
                                $SIDMod320 = $SIDCode320.Trim('*')
                                $objSID320 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod320)
                                $objUser320 = $objSID320.Translate( [System.Security.Principal.NTAccount])
                                $ObjName320 = $objUser320.Value
                                $ObjName320
                            }
                            $PolTag320Dif = Compare-Object -ReferenceObject $RefTag320 -DifferenceObject $PolTag320Grps -PassThru
                            $PolTag320Cnt = $PolTag320Dif.Count
                            if ($PolTag320Cnt -eq '0'){
                                $Res320 = '1'} else {$Res320 = '2'}
                            $Str320 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag320 + ';' + $Desc320 + ';' + $Res320 + ';' + $Using:CurntDateForm)
                            $Str320
                        }

                        #==========================================================================================================================
                        #2.2.4 (L1) Ensure 'Add workstations to domain' is set to 'Administrators' (DC only) (Scored) WIN2012R2
                        $Tag13 = '2.2.4'
                        if (($OSVersion -eq 'W2K12R2') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc13 = 'Ensure Add workstations to domain is set to Administrators (DC only) (Scored)'
                            $Lvl13 = 'L1'
                            $PassPol13 = $secpol | where{$_ -like "SeMachineAccountPrivilege*"}
                            $TcbPri = $PassPol13 -split '= '
                            $SIDCodes13 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag13 = @('BUILTIN\Administrators')
                            $PolTag13Grps = foreach ($SIDCode13 in $SIDCodes13){
	                            $SIDMod13 = $SIDCode13.Trim('*')
	                            $objSID13 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod13)
	                            $objUser13 = $objSID13.Translate( [System.Security.Principal.NTAccount])
	                            $ObjName13 = $objUser13.Value
	                            $ObjName13
	                            }
                            $PolTag13Dif = Compare-Object -ReferenceObject $RefTag13 -DifferenceObject $PolTag13Grps -PassThru
                            $PolTag13Cnt = $PolTag13Dif.Count
                            if ($PolTag13Cnt -eq '0'){
                            $Res13 = '1'} else {$Res13 = '2'}
                            $Str13 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag13 + ';' + $Desc13 + ';' + $Res13 + ';' + $Using:CurntDateForm)
				            $Str13
                        }
                        
                        #2.2.4 (L1) Ensure 'Act as part of the operating system' is set to 'No One' (Scored) WIN2016
                        $Tag321 = '2.2.4'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc321 = 'Ensure Act as part of the operating system is set to No One (Scored)'
                            $Lvl321 = 'L1'
                            $PassPol321 = $secpol | where{$_ -like "SeTcbPrivilege*"}
                            if (!$PassPol321){
                            $Res321 = '1'}
                            Else{ 
                            $TcbPri = $PassPol321 -split '= '
                            $SIDCodes321 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag321 = @('no one')
                            $PolTag321Grps = foreach ($SIDCode321 in $SIDCodes321){
                                $SIDMod321 = $SIDCode321.Trim('*')
                                $objSID321 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod321)
                                $objUser321 = $objSID321.Translate( [System.Security.Principal.NTAccount])
                                $ObjName321 = $objUser321.Value
                                $ObjName321
                            }
                            $PolTag321Dif = Compare-Object -ReferenceObject $RefTag321 -DifferenceObject $PolTag321Grps -PassThru
                            $PolTag321Cnt = $PolTag321Dif.Count
                            if ($PolTag321Cnt -eq '0'){
                                $Res321 = '1'} else {$Res321 = '2'}
                                }
                            $Str321 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag321 + ';' + $Desc321 + ';' + $Res321 + ';' + $Using:CurntDateForm)
                            $Str321
                        }
                        
                        #==========================================================================================================================

                        #2.2.5 (L1) Ensure 'Adjust memory quotas for a process' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE' (Scored) WIN2012R2
                        $Tag14 = '2.2.5'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc14 = 'Ensure Adjust memory quotas for a process is set to Administrators, LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl14 = 'L1'                        
                            $PassPol14 = $secpol | where{$_ -like "SeIncreaseQuotaPrivilege*"}
                            $IncQuoRig = $PassPol14 -split '= '
                            $SIDCodes14 = $IncQuoRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag14 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators')
                            $PolTag14Grps = foreach ($SIDCode14 in $SIDCodes14){
                                $SIDMod14 = $SIDCode14.Trim('*')
                                $objSID14 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod14)
                                $objUser14 = $objSID14.Translate( [System.Security.Principal.NTAccount])
                                $ObjName14 = $objUser14.Value
                                $ObjName14
                            }
                            $PolTag14Dif = Compare-Object -ReferenceObject $RefTag14 -DifferenceObject $PolTag14Grps -PassThru
                            $PolTag14Cnt = $PolTag14Dif.Count
                            if ($PolTag14Cnt -eq '0'){
                                $Res14 = '1'} else {$Res14 = '2'}
                            $Str14 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag14 + ';' + $Desc14 + ';' + $Res14 + ';' + $Using:CurntDateForm)
                            $Str14
                        }
                        
                        #2.2.5 (L1) Ensure 'Add workstations to domain' is set to 'Administrators' (DC only) (Scored) WIN2016 
                        $Tag322 = '2.2.5'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc322 = 'Ensure Add workstations to domain is set to Administrators (DC only) (Scored)'
                            $Lvl322 = 'L1'
                            $PassPol322 = $secpol | where{$_ -like "SeMachineAccountPrivilege*"}
                            $TcbPri = $PassPol322 -split '= '
                            $SIDCodes322 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag322 = @('BUILTIN\Administrators')
                            $PolTag322Grps = foreach ($SIDCode322 in $SIDCodes322){
	                            $SIDMod322 = $SIDCode322.Trim('*')
	                            $objSID322 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod322)
	                            $objUser322 = $objSID322.Translate( [System.Security.Principal.NTAccount])
	                            $ObjName322 = $objUser322.Value
	                            $ObjName322
	                            }
                            $PolTag322Dif = Compare-Object -ReferenceObject $RefTag322 -DifferenceObject $PolTag322Grps -PassThru
                            $PolTag322Cnt = $PolTag322Dif.Count
                            if ($PolTag322Cnt -eq '0'){
                            $Res322 = '1'} else {$Res322 = '2'}
                            $Str322 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag322 + ';' + $Desc322 + ';' + $Res322 + ';' + $Using:CurntDateForm)
				            $Str322
                        }

                        #2.2.6 (L1) Configure 'Allow log on locally' (Scored) WIN2012R2
                        $Tag15 = '2.2.6'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc15 = 'Configure Allow log on locally (Scored)'
                            $Lvl15 = 'L1'
                            $PassPol15 = $secpol | where{$_ -like "SeInteractiveLogonRight*"}
                            $IntLogRig = $PassPol15 -split '= '
                            $SIDCodes15 = $IntLogRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag15 = @('BUILTIN\Administrators')
                            $PolTag15Grps = foreach ($SIDCode15 in $SIDCodes15){
                                $SIDMod15 = $SIDCode15.Trim('*')
                                $objSID15 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod15)
                                $objUser15 = $objSID15.Translate( [System.Security.Principal.NTAccount])
                                $ObjName15 = $objUser15.Value
                                $ObjName15
                            }
                            $PolTag15Dif = Compare-Object -ReferenceObject $RefTag15 -DifferenceObject $PolTag15Grps -PassThru
                            $PolTag15Cnt = $PolTag15Dif.Count
                            if ($PolTag15Cnt -eq '0'){
                               $Res15 = '1'} else {$Res15 = '2'}
                            $Str15 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag15 + ';' + $Desc15 + ';' + $Res15 + ';' + $Using:CurntDateForm)
                            $Str15
                        }
                        
                        #2.2.6 (L1) Ensure 'Adjust memory quotas for a process' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE' (Scored) W2K16
                        $Tag323 = '2.2.6'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc323 = 'Ensure Adjust memory quotas for a process is set to Administrators, LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl323 = 'L1'                        
                            $PassPol323 = $secpol | where{$_ -like "SeIncreaseQuotaPrivilege*"}
                            $IncQuoRig = $PassPol323 -split '= '
                            $SIDCodes323 = $IncQuoRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag323 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators')
                            $PolTag323Grps = foreach ($SIDCode323 in $SIDCodes323){
                                $SIDMod323 = $SIDCode323.Trim('*')
                                $objSID323 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod323)
                                $objUser323 = $objSID323.Translate( [System.Security.Principal.NTAccount])
                                $ObjName323 = $objUser323.Value
                                $ObjName323
                            }
                            $PolTag323Dif = Compare-Object -ReferenceObject $RefTag323 -DifferenceObject $PolTag323Grps -PassThru
                            $PolTag323Cnt = $PolTag323Dif.Count
                            if ($PolTag323Cnt -eq '0'){
                                $Res323 = '1'} else {$Res323 = '2'}
                            $Str323 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag323 + ';' + $Desc323 + ';' + $Res323 + ';' + $Using:CurntDateForm)
                            $Str323
                        }

                        #2.2.7 (L1) Configure 'Allow log on through Remote Desktop Services' (Scored) WIN2012R2
                        $Tag16 = '2.2.7'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc16 = 'Configure Allow log on through Remote Desktop Services (Scored)'
                            $Lvl16 = 'L1'                        
                            $PassPol16 = $secpol | where{$_ -like "SeRemoteInteractiveLogonRight*"}
                            $RemIntLog = $PassPol16 -split '= '
                            $SIDCodes16 = $RemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag16 = @('BUILTIN\Administrators','BUILTIN\Remote Desktop Users')
                            $PolTag16Grps = foreach ($SIDCode16 in $SIDCodes16){
                                $SIDMod16 = $SIDCode16.Trim('*')
                                $objSID16 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod16)
                                $objUser16 = $objSID16.Translate( [System.Security.Principal.NTAccount])
                                $ObjName16 = $objUser16.Value
                                $ObjName16
                            }
                            $PolTag16Dif = Compare-Object -ReferenceObject $RefTag16 -DifferenceObject $PolTag16Grps -PassThru
                            $PolTag16Cnt = $PolTag16Dif.Count
                            if ($PolTag16Cnt -eq '0'){
                                $Res16 = '1'} else {$Res16 = '2'}
                            $Str16 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag16 + ';' + $Desc16 + ';' + $Res16 + ';' + $Using:CurntDateForm)
                            $Str16
                        }
                        
                        #2.2.7 (L1) Ensure 'Allow log on locally' is set to 'Administrators' (Scored) WIN2016
                        $Tag324 = '2.2.7'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc324 = 'Ensure Allow log on locally is set to Administrators (Scored)'
                            $Lvl324 = 'L1'
                            $PassPol324 = $secpol | where{$_ -like "SeInteractiveLogonRight*"}
                            $IntLogRig = $PassPol324 -split '= '
                            $SIDCodes324 = $IntLogRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag324 = @('BUILTIN\Administrators')
                            $PolTag324Grps = foreach ($SIDCode324 in $SIDCodes324){
                                $SIDMod324 = $SIDCode324.Trim('*')
                                $objSID324 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod324)
                                $objUser324 = $objSID324.Translate( [System.Security.Principal.NTAccount])
                                $ObjName324 = $objUser324.Value
                                $ObjName324
                            }
                            $PolTag324Dif = Compare-Object -ReferenceObject $RefTag324 -DifferenceObject $PolTag324Grps -PassThru
                            $PolTag324Cnt = $PolTag324Dif.Count
                            if ($PolTag324Cnt -eq '0'){
                               $Res324 = '1'} else {$Res324 = '2'}
                            $Str324 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag324 + ';' + $Desc324 + ';' + $Res324 + ';' + $Using:CurntDateForm)
                            $Str324
                        }

                        #2.2.8 (L1) Ensure 'Back up files and directories' is set to 'Administrators' (Scored) WIN2012R2
                        $Tag17 = '2.2.8'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc17 = 'Ensure Back up files and directories is set to Administrators (Scored)'
                            $Lvl17 = 'L1'
                            $PassPol17 = $secpol | where{$_ -like "SeBackupPrivilege*"}
                            $BckRight = $PassPol17 -split '= '
                            $SIDCodes17 = $BckRight[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag17 = @('BUILTIN\Administrators')
                            $PolTag17Grps = foreach ($SIDCode17 in $SIDCodes17){
                                $SIDMod17 = $SIDCode17.Trim('*')
                                $objSID17 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod17)
                                $objUser17 = $objSID17.Translate( [System.Security.Principal.NTAccount])
                                $ObjName17 = $objUser17.Value
                                $ObjName17
                            }
                            $PolTag17Dif = Compare-Object -ReferenceObject $RefTag17 -DifferenceObject $PolTag17Grps -PassThru
                            $PolTag17Cnt = $PolTag17Dif.Count
                            if ($PolTag17Cnt -eq '0'){
                                $Res17 = '1'} else {$Res17 = '2'}
                                $Str17 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag17 + ';' + $Desc17 + ';' + $Res17 + ';' + $Using:CurntDateForm)
                            $Str17
                        }

                        #2.2.8 (L1) Ensure 'Allow log on through Remote Desktop Services' is set to 'Administrators' (DC only) (Scored) W2K16
                        $Tag325 = '2.2.8'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc325 = 'Ensure Allow log on through Remote Desktop Services is set to Administrators (DC only) (Scored)'
                            $Lvl325 = 'L1'                        
                            $PassPol325 = $secpol | where{$_ -like "SeRemoteInteractiveLogonRight*"}
                            $RemIntLog = $PassPol325 -split '= '
                            $SIDCodes325 = $RemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag325 = @('BUILTIN\Administrators')
                            $PolTag325Grps = foreach ($SIDCode325 in $SIDCodes325){
                                $SIDMod325 = $SIDCode325.Trim('*')
                                $objSID325 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod325)
                                $objUser325 = $objSID325.Translate( [System.Security.Principal.NTAccount])
                                $ObjName325 = $objUser325.Value
                                $ObjName325
                            }
                            $PolTag325Dif = Compare-Object -ReferenceObject $RefTag325 -DifferenceObject $PolTag325Grps -PassThru
                            $PolTag325Cnt = $PolTag325Dif.Count
                            if ($PolTag325Cnt -eq '0'){
                                $Res325 = '1'} else {$Res325 = '2'}
                            $Str325 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag325 + ';' + $Desc325 + ';' + $Res325 + ';' + $Using:CurntDateForm)
                            $Str325
                        }

                        #2.2.9 (L1) Ensure 'Change the system time' is set to 'Administrators, LOCAL SERVICE' (Scored) WIN2012R2
                        $Tag18 = '2.2.9'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc18 = 'Ensure Change the system time is set to Administrators, LOCAL SERVICE (Scored)'
                            $Lvl18 = 'L1'
                            $PassPol18 = $secpol | where{$_ -like "SeSystemtimePrivilege*"}
                            $SysTimRig = $PassPol18 -split '= '
                            $SIDCodes18 = $SysTimRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag18 = @('NT AUTHORITY\LOCAL SERVICE','BUILTIN\Administrators')
                            $PolTag18Grps = foreach ($SIDCode18 in $SIDCodes18){
                                $SIDMod18 = $SIDCode18.Trim('*')
                                $objSID18 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod18)
                                $objUser18 = $objSID18.Translate( [System.Security.Principal.NTAccount])
                                $ObjName18 = $objUser18.Value
                                $ObjName18
                            }
                            $PolTag18Dif = Compare-Object -ReferenceObject $RefTag18 -DifferenceObject $PolTag18Grps -PassThru
                            $PolTag18Cnt = $PolTag18Dif.Count
                            if ($PolTag18Cnt -eq '0'){
                               $Res18 = '1'} else {$Res18 = '2'}
                               $Str18 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag18 + ';' + $Desc18 + ';' + $Res18 + ';' + $Using:CurntDateForm)
                            $Str18
                        }

                        #2.2.9 (L1) Ensure 'Allow log on through Remote Desktop Services' is set to 'Administrators, Remote Desktop Users' (MS only) (Scored) W2K16
                        $Tag326 = '2.2.9'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc326 = 'Ensure Allow log on through Remote Desktop Services is set to Administrators, Remote Desktop Users (MS only) (Scored)'
                            $Lvl326 = 'L1'                        
                            $PassPol326 = $secpol | where{$_ -like "SeRemoteInteractiveLogonRight*"}
                            $RemIntLog = $PassPol326 -split '= '
                            $SIDCodes326 = $RemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag326 = @('BUILTIN\Administrators','BUILTIN\Remote Desktop Users')
                            $PolTag326Grps = foreach ($SIDCode326 in $SIDCodes326){
                                $SIDMod326 = $SIDCode326.Trim('*')
                                $objSID326 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod326)
                                $objUser326 = $objSID326.Translate( [System.Security.Principal.NTAccount])
                                $ObjName326 = $objUser326.Value
                                $ObjName326
                            }
                            $PolTag326Dif = Compare-Object -ReferenceObject $RefTag326 -DifferenceObject $PolTag326Grps -PassThru
                            $PolTag326Cnt = $PolTag326Dif.Count
                            if ($PolTag326Cnt -eq '0'){
                                $Res326 = '1'} else {$Res326 = '2'}
                            $Str326 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag326 + ';' + $Desc326 + ';' + $Res326 + ';' + $Using:CurntDateForm)
                            $Str326
                        }

                        #2.2.10 (L1) Ensure 'Change the time zone' is set to 'Administrators, LOCAL SERVICE' (Scored) WIN2012R2
                        $Tag19 = '2.2.10'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc19 = 'Ensure Change the time zone is set to Administrators, LOCAL SERVICE (Scored)'
                            $Lvl19 = 'L1'
                            $PassPol19 = $secpol | where{$_ -like "SeTimeZonePrivilege*"}
                            $TimeZone = $PassPol19 -split '= '
                            $SIDCodes19 = $TimeZone[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag19 = @('NT AUTHORITY\LOCAL SERVICE','BUILTIN\Administrators')
                            $PolTag19Grps = foreach ($SIDCode19 in $SIDCodes19){
                                $SIDMod19 = $SIDCode19.Trim('*')
                                $objSID19 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod19)
                                $objUser19 = $objSID19.Translate( [System.Security.Principal.NTAccount])
                                $ObjName19 = $objUser19.Value
                                $ObjName19
                            }
                            $PolTag19Dif = Compare-Object -ReferenceObject $RefTag19 -DifferenceObject $PolTag19Grps -PassThru
                            $PolTag19Cnt = $PolTag19Dif.Count
                            if ($PolTag19Cnt -eq '0'){
                               $Res19 = '1'} else {$Res19 = '2'}
                               $Str19 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag19 + ';' + $Desc19 + ';' + $Res19 + ';' + $Using:CurntDateForm)
                            $Str19
                        }

                        #2.2.10 (L1) Ensure 'Back up files and directories' is set to 'Administrators' (Scored) WIN2016
                        $Tag327 = '2.2.10'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc327 = 'Ensure Back up files and directories is set to Administrators (Scored)'
                            $Lvl327 = 'L1'
                            $PassPol327 = $secpol | where{$_ -like "SeBackupPrivilege*"}
                            $BckRight = $PassPol327 -split '= '
                            $SIDCodes327 = $BckRight[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag327 = @('BUILTIN\Administrators')
                            $PolTag327Grps = foreach ($SIDCode327 in $SIDCodes327){
                                $SIDMod327 = $SIDCode327.Trim('*')
                                $objSID327 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod327)
                                $objUser327 = $objSID327.Translate( [System.Security.Principal.NTAccount])
                                $ObjName327 = $objUser327.Value
                                $ObjName327
                            }
                            $PolTag327Dif = Compare-Object -ReferenceObject $RefTag327 -DifferenceObject $PolTag327Grps -PassThru
                            $PolTag327Cnt = $PolTag327Dif.Count
                            if ($PolTag327Cnt -eq '0'){
                                $Res327 = '1'} else {$Res327 = '2'}
                                $Str327 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag327 + ';' + $Desc327 + ';' + $Res327 + ';' + $Using:CurntDateForm)
                            $Str327
                        }

                        #2.2.11 (L1) Ensure 'Create a pagefile' is set to 'Administrators' (Scored) W2K12R2
                        $Tag20 = '2.2.11'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc20 = 'Ensure Create a pagefile is set to Administrators (Scored)'
                            $Lvl20 = 'L1'
                            $PassPol20 = $secpol | where{$_ -like "SeCreatePagefilePrivilege*"}
                            $CrePagFil = $PassPol20 -split '= '
                            $SIDCodes20 = $CrePagFil[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag20 = @('BUILTIN\Administrators')
                            $PolTag20Grps = foreach ($SIDCode20 in $SIDCodes20){
                                $SIDMod20 = $SIDCode20.Trim('*')
                                $objSID20 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod20)
                                $objUser20 = $objSID20.Translate( [System.Security.Principal.NTAccount])
                                $ObjName20 = $objUser20.Value
                                $ObjName20
                            }
                            $PolTag20Dif = Compare-Object -ReferenceObject $RefTag20 -DifferenceObject $PolTag20Grps -PassThru
                            $PolTag20Cnt = $PolTag20Dif.Count
                            if ($PolTag20Cnt -eq '0'){
                               $Res20 = '1'} else {$Res20 = '2'}
                               $Str20 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag20 + ';' + $Desc20 + ';' + $Res20 + ';' + $Using:CurntDateForm)
                            $Str20
                        }

                        #2.2.11 (L1) Ensure 'Change the system time' is set to 'Administrators, LOCAL SERVICE' (Scored) W2K16
                        $Tag328 = '2.2.11'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc328 = 'Ensure Change the system time is set to Administrators, LOCAL SERVICE (Scored)'
                            $Lvl328 = 'L1'
                            $PassPol328 = $secpol | where{$_ -like "SeSystemtimePrivilege*"}
                            $SysTimRig = $PassPol328 -split '= '
                            $SIDCodes328 = $SysTimRig[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag328 = @('NT AUTHORITY\LOCAL SERVICE','BUILTIN\Administrators')
                            $PolTag328Grps = foreach ($SIDCode328 in $SIDCodes328){
                                $SIDMod328 = $SIDCode328.Trim('*')
                                $objSID328 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod328)
                                $objUser328 = $objSID328.Translate( [System.Security.Principal.NTAccount])
                                $ObjName328 = $objUser328.Value
                                $ObjName328
                            }
                            $PolTag328Dif = Compare-Object -ReferenceObject $RefTag328 -DifferenceObject $PolTag328Grps -PassThru
                            $PolTag328Cnt = $PolTag328Dif.Count
                            if ($PolTag328Cnt -eq '0'){
                               $Res328 = '1'} else {$Res328 = '2'}
                               $Str328 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag328 + ';' + $Desc328 + ';' + $Res328 + ';' + $Using:CurntDateForm)
                            $Str328
                        }

                        #2.2.12 (L1) Ensure 'Create a token object' is set to 'No One' (Scored) W2K12R2
                        $Tag21 = '2.2.12'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc21 = 'Ensure Create a token object is set to No One (Scored)'
                            $Lvl21 = 'L1'
                            $PassPol21 = $secpol | where{$_ -like "SeCreateTokenPrivilege*"}
                            if (!$PassPol21){
                            $Res21 = '1'}
                            Else{ 
                            $CreTknPri = $PassPol21 -split '= '
                            $SIDCodes21 = $CreTknPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag21 = @('no one')
                            $PolTag21Grps = foreach ($SIDCode21 in $SIDCodes21){
                                $SIDMod21 = $SIDCode21.Trim('*')
                                $objSID21 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod21)
                                $objUser21 = $objSID21.Translate( [System.Security.Principal.NTAccount])
                                $ObjName21 = $objUser21.Value
                                $ObjName21
                            }
                            $PolTag21Dif = Compare-Object -ReferenceObject $RefTag21 -DifferenceObject $PolTag21Grps -PassThru
                            $PolTag21Cnt = $PolTag20Dif.Count
                            if ($PolTag21Cnt -eq '0'){
                               $Res21 = '1'} else {$Res21 = '2'}
                               }
                            $Str21 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag21 + ';' + $Desc21 + ';' + $Res21 + ';' + $Using:CurntDateForm)
                            $Str21
            			}            

                        #2.2.12 (L1) Ensure 'Change the time zone' is set to 'Administrators, LOCAL SERVICE' (Scored) W2K16
                        $Tag329 = '2.2.12'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc329 = 'Ensure Change the time zone is set to Administrators, LOCAL SERVICE (Scored)'
                            $Lvl329 = 'L1'
                            $PassPol329 = $secpol | where{$_ -like "SeTimeZonePrivilege*"}
                            $TimeZone = $PassPol329 -split '= '
                            $SIDCodes329 = $TimeZone[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag329 = @('NT AUTHORITY\LOCAL SERVICE','BUILTIN\Administrators')
                            $PolTag329Grps = foreach ($SIDCode329 in $SIDCodes329){
                                $SIDMod329 = $SIDCode329.Trim('*')
                                $objSID329 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod329)
                                $objUser329 = $objSID329.Translate( [System.Security.Principal.NTAccount])
                                $ObjName329 = $objUser329.Value
                                $ObjName329
                            }
                            $PolTag329Dif = Compare-Object -ReferenceObject $RefTag329 -DifferenceObject $PolTag329Grps -PassThru
                            $PolTag329Cnt = $PolTag329Dif.Count
                            if ($PolTag329Cnt -eq '0'){
                               $Res329 = '1'} else {$Res329 = '2'}
                               $Str329 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag329 + ';' + $Desc329 + ';' + $Res329 + ';' + $Using:CurntDateForm)
                            $Str329
                        }    

                        #2.2.13 (L1) Ensure 'Create global objects' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE' (Scored) W2K12R2
                        $Tag22 = '2.2.13'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc22 = 'Ensure Create global objects is set to Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE (Scored)'
                            $Lvl22 = 'L1'
                            $PassPol22 = $secpol | where{$_ -like "SeCreateGlobalPrivilege*"}
                            $CreGlbPri = $PassPol22 -split '= '
                            $SIDCodes22 = $CreGlbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag22 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators','NT AUTHORITY\SERVICE')
                            $PolTag22Grps = foreach ($SIDCode22 in $SIDCodes22){
                                $SIDMod22 = $SIDCode22.Trim('*')
                                $objSID22 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod22)
                                $objUser22 = $objSID22.Translate( [System.Security.Principal.NTAccount])
                                $ObjName22 = $objUser22.Value
                                $ObjName22
                            }
                            $PolTag22Dif = Compare-Object -ReferenceObject $RefTag22 -DifferenceObject $PolTag22Grps -PassThru
                            $PolTag22Cnt = $PolTag22Dif.Count
                            if ($PolTag22Cnt -eq '0'){
                               $Res22 = '1'} else {$Res22 = '2'}
                            $Str22 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag22 + ';' + $Desc22 + ';' + $Res22 + ';' + $Using:CurntDateForm)
                            $Str22
                        }

                        #2.2.13 (L1) Ensure 'Create a pagefile' is set to 'Administrators' (Scored) W2K16 
                        $Tag330 = '2.2.13'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc330 = 'Ensure Create a pagefile is set to Administrators (Scored)'
                            $Lvl330 = 'L1'
                            $PassPol330 = $secpol | where{$_ -like "SeCreatePagefilePrivilege*"}
                            $CrePagFil = $PassPol330 -split '= '
                            $SIDCodes330 = $CrePagFil[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag330 = @('BUILTIN\Administrators')
                            $PolTag330Grps = foreach ($SIDCode330 in $SIDCodes330){
                                $SIDMod330 = $SIDCode330.Trim('*')
                                $objSID330 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod330)
                                $objUser330 = $objSID330.Translate( [System.Security.Principal.NTAccount])
                                $ObjName330 = $objUser330.Value
                                $ObjName330
                            }
                            $PolTag330Dif = Compare-Object -ReferenceObject $RefTag330 -DifferenceObject $PolTag330Grps -PassThru
                            $PolTag330Cnt = $PolTag330Dif.Count
                            if ($PolTag330Cnt -eq '0'){
                               $Res330 = '1'} else {$Res330 = '2'}
                               $Str330 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag330 + ';' + $Desc330 + ';' + $Res330 + ';' + $Using:CurntDateForm)
                            $Str330
                        }

                        #2.2.14 (L1) Ensure 'Create permanent shared objects' is set to 'No One' (Scored) W2K12R2
                        $Tag23 = '2.2.14'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc23 = 'Ensure Create permanent shared objects is set to No One (Scored)'
                            $Lvl23 = 'L1'
                            $PassPol23 = $secpol | where{$_ -like "SeCreatePermanentPrivilege*"}
                            if (!$PassPol23){
                            $Res23 = '1'}
                            Else{ 
                            $CrePerPri = $PassPol23 -split '= '
                            $SIDCodes23 = $CrePerPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag23 = @('no one')
                            $PolTag23Grps = foreach ($SIDCode23 in $SIDCodes23){
                                $SIDMod23 = $SIDCode23.Trim('*')
                                $objSID23 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod23)
                                $objUser23 = $objSID23.Translate( [System.Security.Principal.NTAccount])
                                $ObjName23 = $objUser23.Value
                                $ObjName23
                            }
                            $PolTag23Dif = Compare-Object -ReferenceObject $RefTag23 -DifferenceObject $PolTag23Grps -PassThru
                            $PolTag23Cnt = $PolTag23Dif.Count
                            if ($PolTag23Cnt -eq '0'){
                               $Res23 = '1'} else {$Res23 = '2'}
                               }
                            $Str23 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag23 + ';' + $Desc23 + ';' + $Res23 + ';' + $Using:CurntDateForm)
                            $Str23
                        }
                        
                        #2.2.14 (L1) Ensure 'Create a token object' is set to 'No One' (Scored) W2K16
                        $Tag331 = '2.2.14'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc331 = 'Ensure Create a token object is set to No One (Scored)'
                            $Lvl331 = 'L1'
                            $PassPol331 = $secpol | where{$_ -like "SeCreateTokenPrivilege*"}
                            if (!$PassPol331){
                            $Res331 = '1'}
                            Else{ 
                            $CreTknPri = $PassPol331 -split '= '
                            $SIDCodes331 = $CreTknPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag331 = @('no one')
                            $PolTag331Grps = foreach ($SIDCode331 in $SIDCodes331){
                                $SIDMod331 = $SIDCode331.Trim('*')
                                $objSID331 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod331)
                                $objUser331 = $objSID331.Translate( [System.Security.Principal.NTAccount])
                                $ObjName331 = $objUser331.Value
                                $ObjName331
                            }
                            $PolTag331Dif = Compare-Object -ReferenceObject $RefTag331 -DifferenceObject $PolTag331Grps -PassThru
                            $PolTag331Cnt = $PolTag20Dif.Count
                            if ($PolTag331Cnt -eq '0'){
                               $Res331 = '1'} else {$Res331 = '2'}
                               }
                            $Str331 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag331 + ';' + $Desc331 + ';' + $Res331 + ';' + $Using:CurntDateForm)
                            $Str331
            			}

                        #2.2.15 (L1) Configure 'Create symbolic links' (Scored) W2K12R2
                        $Tag24 = '2.2.15'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc24 = 'Configure Create symbolic links (Scored)'
                            $Lvl24 = 'L1'
                            $PassPol24 = $secpol | where{$_ -like "SeDebugPrivilege*"}
                            $CreSymLink = $PassPol24 -split '= '
                            $SIDCodes24 = $CreSymLink[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag24 = @('BUILTIN\Administrators')
                            $PolTag24Grps = foreach ($SIDCode24 in $SIDCodes24){
                                $SIDMod24 = $SIDCode24.Trim('*')
                                $objSID24 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod24)
                                $objUser24 = $objSID24.Translate( [System.Security.Principal.NTAccount])
                                $ObjName24 = $objUser24.Value
                                $ObjName24
                            }
                            $PolTag24Dif = Compare-Object -ReferenceObject $RefTag24 -DifferenceObject $PolTag24Grps -PassThru
                            $PolTag24Cnt = $PolTag24Dif.Count
                            if ($PolTag24Cnt -eq '0'){
                               $Res24 = '1'} else {$Res24 = '2'}
                            $Str24 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag24 + ';' + $Desc24 + ';' + $Res24 + ';' + $Using:CurntDateForm)
                            $Str24
                        }

                        #2.2.15 (L1) Ensure 'Create global objects' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE' (Scored) W2K16
                        $Tag332 = '2.2.15'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc332 = 'Ensure Create global objects is set to Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE (Scored)'
                            $Lvl332 = 'L1'
                            $PassPol332 = $secpol | where{$_ -like "SeCreateGlobalPrivilege*"}
                            $CreGlbPri = $PassPol332 -split '= '
                            $SIDCodes332 = $CreGlbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag332 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators','NT AUTHORITY\SERVICE')
                            $PolTag332Grps = foreach ($SIDCode332 in $SIDCodes332){
                                $SIDMod332 = $SIDCode332.Trim('*')
                                $objSID332 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod332)
                                $objUser332 = $objSID332.Translate( [System.Security.Principal.NTAccount])
                                $ObjName332 = $objUser332.Value
                                $ObjName332
                            }
                            $PolTag332Dif = Compare-Object -ReferenceObject $RefTag332 -DifferenceObject $PolTag332Grps -PassThru
                            $PolTag332Cnt = $PolTag332Dif.Count
                            if ($PolTag332Cnt -eq '0'){
                               $Res332 = '1'} else {$Res332 = '2'}
                            $Str332 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag332 + ';' + $Desc332 + ';' + $Res332 + ';' + $Using:CurntDateForm)
                            $Str332
                        }

                        #2.2.16 (L1) Ensure 'Debug programs' is set to 'Administrators' (Scored) W2K12R2
                        $Tag25 = '2.2.16'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc25 = 'Ensure Debug programs is set to Administrators (Scored)'
                            $Lvl25 = 'L1'
                            $PassPol25 = $secpol | where{$_ -like "SeDebugPrivilege*"}
                            $DebProg = $PassPol25 -split '= '
                            $SIDCodes25 = $DebProg[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag25 = @('BUILTIN\Administrators')
                            $PolTag25Grps = foreach ($SIDCode25 in $SIDCodes25){
                                $SIDMod25 = $SIDCode25.Trim('*')
                                $objSID25 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod25)
                                $objUser25 = $objSID25.Translate( [System.Security.Principal.NTAccount])
                                $ObjName25 = $objUser25.Value
                                $ObjName25
                            }
                            $PolTag25Dif = Compare-Object -ReferenceObject $RefTag25 -DifferenceObject $PolTag25Grps -PassThru
                            $PolTag25Cnt = $PolTag25Dif.Count
                            if ($PolTag25Cnt -eq '0'){
                               $Res25 = '1'} else {$Res25 = '2'}
                            $Str25 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag25 + ';' + $Desc25 + ';' + $Res25 + ';' + $Using:CurntDateForm)
                            $Str25
                        }

                        #2.2.16 (L1) Ensure 'Create permanent shared objects' is set to 'No One' (Scored) W2K16
                        $Tag333 = '2.2.16'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc333 = 'Ensure Create permanent shared objects is set to No One (Scored)'
                            $Lvl333 = 'L1'
                            $PassPol333 = $secpol | where{$_ -like "SeCreatePermanentPrivilege*"}
                            if (!$PassPol333){
                            $Res333 = '1'}
                            Else{ 
                            $CrePerPri = $PassPol333 -split '= '
                            $SIDCodes333 = $CrePerPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag333 = @('no one')
                            $PolTag333Grps = foreach ($SIDCode333 in $SIDCodes333){
                                $SIDMod333 = $SIDCode333.Trim('*')
                                $objSID333 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod333)
                                $objUser333 = $objSID333.Translate( [System.Security.Principal.NTAccount])
                                $ObjName333 = $objUser333.Value
                                $ObjName333
                            }
                            $PolTag333Dif = Compare-Object -ReferenceObject $RefTag333 -DifferenceObject $PolTag333Grps -PassThru
                            $PolTag333Cnt = $PolTag333Dif.Count
                            if ($PolTag333Cnt -eq '0'){
                               $Res333 = '1'} else {$Res333 = '2'}
                               }
                            $Str333 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag333 + ';' + $Desc333 + ';' + $Res333 + ';' + $Using:CurntDateForm)
                            $Str333
                        }

                        #2.2.17 (L1) Configure 'Deny access to this computer from the network' (Scored) W2K12R2
                        $Tag26 = '2.2.17'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc26 = 'Configure Deny access to this computer from the network (Scored)'
                            $Lvl26 = 'L1'
                            $PassPol26 = $secpol | where{$_ -like "SeDenyNetworkLogonRight*"}
                            if (!$PassPol26){
                            $Res26 = '1'}
                            Else{ 
                            $DenNwLog = $PassPol26 -split '= '
                            $SIDCodes26 = $DenNwLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag26 = @('BUILTIN\Guest')
                            $PolTag26Grps = foreach ($SIDCode26 in $SIDCodes26){
                                $SIDMod26 = $SIDCode26.Trim('*')
                                $objSID26 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod26)
                                $objUser26 = $objSID26.Translate( [System.Security.Principal.NTAccount])
                                $ObjName26 = $objUser26.Value
                                $ObjName26
                            }
                            $PolTag26Dif = Compare-Object -ReferenceObject $RefTag26 -DifferenceObject $PolTag26Grps -PassThru
                            $PolTag26Cnt = $PolTag26Dif.Count
                            if ($PolTag26Cnt -eq '0'){
                                $Res26 = '1'} else {$Res26 = '2'}
                            }
                            $Str26 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag26 + ';' + $Desc26 + ';' + $Res26 + ';' + $Using:CurntDateForm)
                            $Str26
                        }
                        #2.2.17 (L1) Ensure 'Create symbolic links' is set to 'Administrators' (DC only) (Scored) W2K16
                        $Tag334 = '2.2.17'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc334 = 'Ensure Create symbolic links is set to Administrators (DC only) (Scored)'
                            $Lvl334 = 'L1'
                            $PassPol334 = $secpol | where{$_ -like "SeDebugPrivilege*"}
                            $CreSymLink = $PassPol334 -split '= '
                            $SIDCodes334 = $CreSymLink[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag334 = @('BUILTIN\Administrators')
                            $PolTag334Grps = foreach ($SIDCode334 in $SIDCodes334){
                                $SIDMod334 = $SIDCode334.Trim('*')
                                $objSID334 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod334)
                                $objUser334 = $objSID334.Translate( [System.Security.Principal.NTAccount])
                                $ObjName334 = $objUser334.Value
                                $ObjName334
                            }
                            $PolTag334Dif = Compare-Object -ReferenceObject $RefTag334 -DifferenceObject $PolTag334Grps -PassThru
                            $PolTag334Cnt = $PolTag334Dif.Count
                            if ($PolTag334Cnt -eq '0'){
                               $Res334 = '1'} else {$Res334 = '2'}
                            $Str334 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag334 + ';' + $Desc334 + ';' + $Res334 + ';' + $Using:CurntDateForm)
                            $Str334
                        }

                        #2.2.18 (L1) Ensure 'Deny log on as a batch job' to include 'Guests' (Scored) W2K12R2
                        $Tag27 = '2.2.18'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc27 = 'Ensure Deny log on as a batch job to include Guests (Scored)'
                            $Lvl27 = 'L1'
                            $PassPol27 = $secpol | where{$_ -like "SeDenyBatchLogonRight*"}
                            if (!$PassPol27){
                            $Res27 = '2'}
                            Else{ 
                            $DenBtchLog = $PassPol27 -split '= '
                            $SIDCodes27 = $DenBtchLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag27 = @('BUILTIN\Guests')
                            $PolTag27Grps = foreach ($SIDCode27 in $SIDCodes27){
                                $SIDMod27 = $SIDCode27.Trim('*')
                                $objSID27 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod27)
                                $objUser27 = $objSID27.Translate( [System.Security.Principal.NTAccount])
                                $ObjName27 = $objUser27.Value
                                $ObjName27
                            }
                            $PolTag27Dif = Compare-Object -ReferenceObject $RefTag27 -DifferenceObject $PolTag27Grps -PassThru
                            $PolTag27Cnt = $PolTag27Dif.Count
                            if ($PolTag27Cnt -eq '0'){
                                $Res27 = '1'} else {$Res27 = '2'}
                            }
                            $Str27 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag27 + ';' + $Desc27 + ';' + $Res27 + ';' + $Using:CurntDateForm)
                            $Str27
                        }

                        #2.2.18 (L1) Ensure 'Create symbolic links' is set to 'Administrators, NT VIRTUAL MACHINE\Virtual Machines' (MS only) (Scored) W2K16
                        $Tag335 = '2.2.18'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS') -and ($HVRole -eq 'Yes')){
                            $Count2++
                            $Desc335 = 'Ensure Create symbolic links is set to Administrators, NT VIRTUAL MACHINE\Virtual Machines (MS only) (Scored)'
                            $Lvl335 = 'L1'
                            $PassPol335 = $secpol | where{$_ -like "SeDebugPrivilege*"}
                            $CreSymLink = $PassPol335 -split '= '
                            $SIDCodes335 = $CreSymLink[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag335 = @('BUILTIN\Administrators', 'NT VIRTUAL MACHINE\Virtual Machines')
                            $PolTag335Grps = foreach ($SIDCode335 in $SIDCodes335){
                                $SIDMod335 = $SIDCode335.Trim('*')
                                $objSID335 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod335)
                                $objUser335 = $objSID335.Translate( [System.Security.Principal.NTAccount])
                                $ObjName335 = $objUser335.Value
                                $ObjName335
                            }
                            $PolTag335Dif = Compare-Object -ReferenceObject $RefTag335 -DifferenceObject $PolTag335Grps -PassThru
                            $PolTag335Cnt = $PolTag335Dif.Count
                            if ($PolTag335Cnt -eq '0'){
                               $Res335 = '1'} else {$Res335 = '2'}
                            $Str335 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag335 + ';' + $Desc335 + ';' + $Res335 + ';' + $Using:CurntDateForm)
                            $Str335
                        }

                        #2.2.19 (L1) Ensure 'Deny log on as a service' to include 'Guests' (Scored) W2K12R2
                        $Tag28 = '2.2.19'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc28 = 'Ensure Deny log on as a service to include Guests (Scored)'
                            $Lvl28 = 'L1'
                            $PassPol28 = $secpol | where{$_ -like "SeDenyServiceLogonRight*"}
                            if (!$PassPol28){
                            $Res28 = '2'}
                            Else{ 
                            $DenSvcLog = $PassPol28 -split '= '
                            $SIDCodes28 = $DenSvcLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag28 = @('BUILTIN\Guests')
                            $PolTag28Grps = foreach ($SIDCode28 in $SIDCodes28){
                                $SIDMod28 = $SIDCode28.Trim('*')
                                $objSID28 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod28)
                                $objUser28 = $objSID28.Translate( [System.Security.Principal.NTAccount])
                                $ObjName28 = $objUser28.Value
                                $ObjName28
                            }
                            $PolTag28Dif = Compare-Object -ReferenceObject $RefTag28 -DifferenceObject $PolTag28Grps -PassThru
                            $PolTag28Dif
                            $PolTag28Cnt = $PolTag28Dif.Count
                            if ($PolTag28Cnt -eq '0'){
                                $Res28 = '1'} else {$Res28 = '2'}
                            }
                            $Str28 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag28 + ';' + $Desc28 + ';' + $Res28 + ';' + $Using:CurntDateForm)
                            $Str28
                        }

                        #2.2.19 (L1) Ensure 'Debug programs' is set to 'Administrators' (Scored) W2K16
                        $Tag336 = '2.2.19'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc336 = 'Ensure Debug programs is set to Administrators (Scored)'
                            $Lvl336 = 'L1'
                            $PassPol336 = $secpol | where{$_ -like "SeDebugPrivilege*"}
                            $DebProg = $PassPol336 -split '= '
                            $SIDCodes336 = $DebProg[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag336 = @('BUILTIN\Administrators')
                            $PolTag336Grps = foreach ($SIDCode336 in $SIDCodes336){
                                $SIDMod336 = $SIDCode336.Trim('*')
                                $objSID336 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod336)
                                $objUser336 = $objSID336.Translate( [System.Security.Principal.NTAccount])
                                $ObjName336 = $objUser336.Value
                                $ObjName336
                            }
                            $PolTag336Dif = Compare-Object -ReferenceObject $RefTag336 -DifferenceObject $PolTag336Grps -PassThru
                            $PolTag336Cnt = $PolTag336Dif.Count
                            if ($PolTag336Cnt -eq '0'){
                               $Res336 = '1'} else {$Res336 = '2'}
                            $Str336 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag336 + ';' + $Desc336 + ';' + $Res336 + ';' + $Using:CurntDateForm)
                            $Str336
                        }

                        #2.2.20 (L1) Ensure 'Deny log on locally' to include 'Guests' (Scored) W2K12R2
                        $Tag29 = '2.2.20'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc29 = 'Ensure Deny log on locally to include Guests (Scored)'
                            $Lvl29 = 'L1'
                            $PassPol29 = $secpol | where{$_ -like "SeDenyInteractiveLogonRight*"}
                            if (!$PassPol29){
                            $Res29 = '2'}
                            Else{ 
                            $DenIntLog = $PassPol29 -split '= '
                            $SIDCodes29 = $DenIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag29 = @('BUILTIN\Guests')
                            $PolTag29Grps = foreach ($SIDCode29 in $SIDCodes29){
                                $SIDMod29 = $SIDCode29.Trim('*')
                                $objSID29 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod29)
                                $objUser29 = $objSID29.Translate( [System.Security.Principal.NTAccount])
                                $ObjName29 = $objUser29.Value
                                $ObjName29
                            }
                            $PolTag29Dif = Compare-Object -ReferenceObject $RefTag29 -DifferenceObject $PolTag29Grps -PassThru
                            $PolTag29Cnt = $PolTag29Dif.Count
                            if ($PolTag29Cnt -eq '0'){
                                $Res29 = '1'} else {$Res29 = '2'}
                            }
                            $Str29 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag29 + ';' + $Desc29 + ';' + $Res29 + ';' + $Using:CurntDateForm)
                            $Str29
                        }

                        #2.2.20 (L1) Ensure 'Deny access to this computer from the network' is set to 'Guests' (DC only) (Scored) W2K16
                        $Tag337 = '2.2.20'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc337 = 'Ensure Deny access to this computer from the network is set to Guests (DC only) (Scored)'
                            $Lvl337 = 'L1'
                            $PassPol337 = $secpol | where{$_ -like "SeDenyNetworkLogonRight*"}
                            if (!$PassPol337){
                            $Res337 = '1'}
                            Else{ 
                            $DenNwLog = $PassPol337 -split '= '
                            $SIDCodes337 = $DenNwLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag337 = @('BUILTIN\Guest')
                            $PolTag337Grps = foreach ($SIDCode337 in $SIDCodes337){
                                $SIDMod337 = $SIDCode337.Trim('*')
                                $objSID337 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod337)
                                $objUser337 = $objSID337.Translate( [System.Security.Principal.NTAccount])
                                $ObjName337 = $objUser337.Value
                                $ObjName337
                            }
                            $PolTag337Dif = Compare-Object -ReferenceObject $RefTag337 -DifferenceObject $PolTag337Grps -PassThru
                            $PolTag337Cnt = $PolTag337Dif.Count
                            if ($PolTag337Cnt -eq '0'){
                                $Res337 = '1'} else {$Res337 = '2'}
                            }
                            $Str337 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag337 + ';' + $Desc337 + ';' + $Res337 + ';' + $Using:CurntDateForm)
                            $Str337
                        }

                        #2.2.21 (L1) Ensure 'Deny log on through Remote Desktop Services' to include 'Guests, Local account' (Scored) W2K12R2
                        $Tag30 = '2.2.21'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc30 = 'Ensure Deny log on through Remote Desktop Services to include Guests, Local account (Scored)'
                            $Lvl30 = 'L1'
                            $PassPol30 = $secpol | where{$_ -like "SeDenyRemoteInteractiveLogonRight*"}
                            if (!$PassPol30){
                            $Res30 = '2'}
                            Else{ 
                            $DenRemIntLog = $PassPol30 -split '= '
                            $SIDCodes30 = $DenRemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag30 = @('BUILTIN\Guests')
                            $PolTag30Grps = foreach ($SIDCode30 in $SIDCodes30){
                                $SIDMod30 = $SIDCode30.Trim('*')
                                $objSID30 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod30)
                                $objUser30 = $objSID30.Translate( [System.Security.Principal.NTAccount])
                                $ObjName30 = $objUser30.Value
                                $ObjName30
                            }
                            $PolTag30Dif = Compare-Object -ReferenceObject $RefTag30 -DifferenceObject $PolTag30Grps -PassThru
                            $PolTag30Cnt = $PolTag30Dif.Count
                            if ($PolTag30Cnt -eq '0'){
                                $Res30 = '1'} else {$Res30 = '2'}
                            }
                            $Str30 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag30 + ';' + $Desc30 + ';' + $Res30 + ';' + $Using:CurntDateForm)
                            $Str30
                        }
                        
                        #2.2.21 (L1) Ensure 'Deny access to this computer from the network' is set to 'Guests, Local account and member of Administrators group' (MS only) (Scored) W2K16
                        $Tag338 = '2.2.21'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc338 = 'Ensure Deny access to this computer from the network is set to Guests, Local account and member of Administrators group (MS only) (Scored)'
                            $Lvl338 = 'L1'
                            $PassPol338 = $secpol | where{$_ -like "SeDenyNetworkLogonRight*"}
                            if (!$PassPol338){
                            $Res338 = '1'}
                            Else{ 
                            $DenNwLog = $PassPol338 -split '= '
                            $SIDCodes338 = $DenNwLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag338 = @('BUILTIN\Guest','NT AUTHORITY\Local account and member of Administrators group')
                            $PolTag338Grps = foreach ($SIDCode338 in $SIDCodes338){
                                $SIDMod338 = $SIDCode338.Trim('*')
                                $objSID338 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod338)
                                $objUser338 = $objSID338.Translate( [System.Security.Principal.NTAccount])
                                $ObjName338 = $objUser338.Value
                                $ObjName338
                            }
                            $PolTag338Dif = Compare-Object -ReferenceObject $RefTag338 -DifferenceObject $PolTag338Grps -PassThru
                            $PolTag338Cnt = $PolTag338Dif.Count
                            if ($PolTag338Cnt -eq '0'){
                                $Res338 = '1'} else {$Res338 = '2'}
                            }
                            $Str338 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag338 + ';' + $Desc338 + ';' + $Res338 + ';' + $Using:CurntDateForm)
                            $Str338
                        }

                        #2.2.22 (L1) Configure 'Enable computer and user accounts to be trusted for delegation' (Scored) W2K12R2
                        $Tag31 = '2.2.22'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc31 = 'Configure Enable computer and user accounts to be trusted for delegation (Scored)'
                            $Lvl31 = 'L1'
                            $PassPol31 = $secpol | where{$_ -like "SeEnableDelegationPrivilege*"}
                            if (!$PassPol31){
                            $Res31 = '1'}
                            Else{ 
                            $EnbDelPri = $PassPol31 -split '= '
                            $SIDCodes31 = $EnbDelPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag31 = @('no one')
                            $PolTag31Grps = foreach ($SIDCode31 in $SIDCodes31){
                                $SIDMod31 = $SIDCode31.Trim('*')
                                $objSID31 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod31)
                                $objUser31 = $objSID31.Translate( [System.Security.Principal.NTAccount])
                                $ObjName31 = $objUser31.Value
                                $ObjName31
                            }
                            $PolTag31Dif = Compare-Object -ReferenceObject $RefTag31 -DifferenceObject $PolTag31Grps -PassThru
                            $PolTag31Cnt = $PolTag31Dif.Count
                            if ($PolTag31Cnt -eq '0'){
                                $Res31 = '1'} else {$Res31 = '2'}
                            }
                            $Str31 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag31 + ';' + $Desc31 + ';' + $Res31 + ';' + $Using:CurntDateForm)
                            $Str31
                        }

                        #2.2.22 (L1) Ensure 'Deny log on as a batch job' to include 'Guests' (Scored) W2K16
                        $Tag339 = '2.2.22'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc339 = 'Ensure Deny log on as a batch job to include Guests (Scored)'
                            $Lvl339 = 'L1'
                            $PassPol339 = $secpol | where{$_ -like "SeDenyBatchLogonRight*"}
                            if (!$PassPol339){
                            $Res339 = '2'}
                            Else{ 
                            $DenBtchLog = $PassPol339 -split '= '
                            $SIDCodes339 = $DenBtchLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag339 = @('BUILTIN\Guests')
                            $PolTag339Grps = foreach ($SIDCode339 in $SIDCodes339){
                                $SIDMod339 = $SIDCode339.Trim('*')
                                $objSID339 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod339)
                                $objUser339 = $objSID339.Translate( [System.Security.Principal.NTAccount])
                                $ObjName339 = $objUser339.Value
                                $ObjName339
                            }
                            $PolTag339Dif = Compare-Object -ReferenceObject $RefTag339 -DifferenceObject $PolTag339Grps -PassThru
                            $PolTag339Cnt = $PolTag339Dif.Count
                            if ($PolTag339Cnt -eq '0'){
                                $Res339 = '1'} else {$Res339 = '2'}
                            }
                            $Str339 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag339 + ';' + $Desc339 + ';' + $Res339 + ';' + $Using:CurntDateForm)
                            $Str339
                        }

                        #2.2.23 (L1) Ensure 'Force shutdown from a remote system' is set to 'Administrators' (Scored) W2K12R2
                        $Tag32 = '2.2.23'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc32 = 'Ensure Force shutdown from a remote system is set to Administrators (Scored)'
                            $Lvl32 = 'L1'
                            $PassPol32 = $secpol | where{$_ -like "SeRemoteShutdownPrivilege*"}
                            if (!$PassPol32){
                            $Res32 = '2'}
                            Else{ 
                            $RemShdwPri = $PassPol32 -split '= '
                            $SIDCodes32 = $RemShdwPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag32 = @('BUILTIN\Administrators')
                            $PolTag32Grps = foreach ($SIDCode32 in $SIDCodes32){
                                $SIDMod32 = $SIDCode32.Trim('*')
                                $objSID32 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod32)
                                $objUser32 = $objSID32.Translate( [System.Security.Principal.NTAccount])
                                $ObjName32 = $objUser32.Value
                                $ObjName32
                            }
                            $PolTag32Dif = Compare-Object -ReferenceObject $RefTag32 -DifferenceObject $PolTag32Grps -PassThru
                            $PolTag32Cnt = $PolTag32Dif.Count
                            if ($PolTag32Cnt -eq '0'){
                                $Res32 = '1'} else {$Res32 = '2'}
                            }
                            $Str32 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag32 + ';' + $Desc32 + ';' + $Res32 + ';' + $Using:CurntDateForm)
                            $Str32
                        }

                        #2.2.23 (L1) Ensure 'Deny log on as a service' to include 'Guests' (Scored) W2K16
                        $Tag340 = '2.2.23'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc340 = 'Ensure Deny log on as a service to include Guests (Scored)'
                            $Lvl340 = 'L1'
                            $PassPol340 = $secpol | where{$_ -like "SeDenyServiceLogonRight*"}
                            if (!$PassPol340){
                            $Res340 = '2'}
                            Else{ 
                            $DenSvcLog = $PassPol340 -split '= '
                            $SIDCodes340 = $DenSvcLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag340 = @('BUILTIN\Guests')
                            $PolTag340Grps = foreach ($SIDCode340 in $SIDCodes340){
                                $SIDMod340 = $SIDCode340.Trim('*')
                                $objSID340 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod340)
                                $objUser340 = $objSID340.Translate( [System.Security.Principal.NTAccount])
                                $ObjName340 = $objUser340.Value
                                $ObjName340
                            }
                            $PolTag340Dif = Compare-Object -ReferenceObject $RefTag340 -DifferenceObject $PolTag340Grps -PassThru
                            $PolTag340Dif
                            $PolTag340Cnt = $PolTag340Dif.Count
                            if ($PolTag340Cnt -eq '0'){
                                $Res340 = '1'} else {$Res340 = '2'}
                            }
                            $Str340 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag340 + ';' + $Desc340 + ';' + $Res340 + ';' + $Using:CurntDateForm)
                            $Str340
                        }

                        #2.2.24 (L1) Ensure 'Generate security audits' is set to 'LOCAL SERVICE, NETWORK SERVICE' (Scored) W2K12R2
                        $Tag33 = '2.2.24'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc33 = 'Ensure Generate security audits is set to LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl33 = 'L1'
		                    $PassPol33 = $secpol | where{$_ -like "SeAuditPrivilege*"}
                            if (!$PassPol33){
                            $Res33 = '2'}
                            Else{ 
                            $AudtPri = $PassPol33 -split '= '
                            $SIDCodes33 = $AudtPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag33 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE')
                            $PolTag33Grps = foreach ($SIDCode33 in $SIDCodes33){
                                $SIDMod33 = $SIDCode33.Trim('*')
                                $objSID33 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod33)
                                $objUser33 = $objSID33.Translate( [System.Security.Principal.NTAccount])
                                $ObjName33 = $objUser33.Value
                                $ObjName33
                            }
                            $PolTag33Dif = Compare-Object -ReferenceObject $RefTag33 -DifferenceObject $PolTag33Grps -PassThru
                            $PolTag33Cnt = $PolTag33Dif.Count
                            if ($PolTag33Cnt -eq '0'){
                                $Res33 = '1'} else {$Res33 = '2'}
                            }
		                    $Str33 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag33 + ';' + $Desc33 + ';' + $Res33 + ';' + $Using:CurntDateForm)
                            $Str33
                        }

                        #2.2.24 (L1) Ensure 'Deny log on locally' to include 'Guests' (Scored) W2K16
                        $Tag341 = '2.2.24'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc341 = 'Ensure Deny log on locally to include Guests (Scored)'
                            $Lvl341 = 'L1'
                            $PassPol341 = $secpol | where{$_ -like "SeDenyInteractiveLogonRight*"}
                            if (!$PassPol341){
                            $Res341 = '2'}
                            Else{ 
                            $DenIntLog = $PassPol341 -split '= '
                            $SIDCodes341 = $DenIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag341 = @('BUILTIN\Guests')
                            $PolTag341Grps = foreach ($SIDCode341 in $SIDCodes341){
                                $SIDMod341 = $SIDCode341.Trim('*')
                                $objSID341 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod341)
                                $objUser341 = $objSID341.Translate( [System.Security.Principal.NTAccount])
                                $ObjName341 = $objUser341.Value
                                $ObjName341
                            }
                            $PolTag341Dif = Compare-Object -ReferenceObject $RefTag341 -DifferenceObject $PolTag341Grps -PassThru
                            $PolTag341Cnt = $PolTag341Dif.Count
                            if ($PolTag341Cnt -eq '0'){
                                $Res341 = '1'} else {$Res341 = '2'}
                            }
                            $Str341 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag341 + ';' + $Desc341 + ';' + $Res341 + ';' + $Using:CurntDateForm)
                            $Str341
                        }

                        #2.2.25 (L1) Configure 'Impersonate a client after authentication' (Scored)
                        $Tag34 = '2.2.25'
		                if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc34 = 'Configure Impersonate a client after authentication (Scored)'
                            $Lvl34 = 'L1'
                            $PassPol34 = $secpol | where{$_ -like "SeImpersonatePrivilege*"}
                            if (!$PassPol34){
                            $Res34 = '2'}
                            Else{ 
                            $ImpersoPri = $PassPol34 -split '= '
                            $SIDCodes34 = $ImpersoPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag34 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators')
                            $PolTag34Grps = foreach ($SIDCode34 in $SIDCodes34){
                                $SIDMod34 = $SIDCode34.Trim('*')
                                $objSID34 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod34)
                                $objUser34 = $objSID34.Translate( [System.Security.Principal.NTAccount])
                                $ObjName34 = $objUser34.Value
                                $ObjName34
                            }
                            $PolTag34Dif = Compare-Object -ReferenceObject $RefTag34 -DifferenceObject $PolTag34Grps -PassThru
                            $PolTag34Cnt = $PolTag34Dif.Count
                            if ($PolTag34Cnt -eq '0'){
                                $Res34 = '1'} else {$Res34 = '2'}
                            }
		                    $Str34 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag34 + ';' + $Desc34 + ';' + $Res34 + ';' + $Using:CurntDateForm)
                            $Str34
                        }

                        #2.2.25 (L1) Ensure 'Deny log on through Remote Desktop Services' is set to 'Guests' (DC only) (Scored) W2K16
                        $Tag342 = '2.2.25'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc342 = 'Ensure Deny log on through Remote Desktop Services is set to Guests (DC only) (Scored)'
                            $Lvl342 = 'L1'
                            $PassPol342 = $secpol | where{$_ -like "SeDenyRemoteInteractiveLogonRight*"}
                            if (!$PassPol342){
                            $Res342 = '2'}
                            Else{ 
                            $DenRemIntLog = $PassPol342 -split '= '
                            $SIDCodes342 = $DenRemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag342 = @('BUILTIN\Guests')
                            $PolTag342Grps = foreach ($SIDCode342 in $SIDCodes342){
                                $SIDMod342 = $SIDCode342.Trim('*')
                                $objSID342 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod342)
                                $objUser342 = $objSID342.Translate( [System.Security.Principal.NTAccount])
                                $ObjName342 = $objUser342.Value
                                $ObjName342
                            }
                            $PolTag342Dif = Compare-Object -ReferenceObject $RefTag342 -DifferenceObject $PolTag342Grps -PassThru
                            $PolTag342Cnt = $PolTag342Dif.Count
                            if ($PolTag342Cnt -eq '0'){
                                $Res342 = '1'} else {$Res342 = '2'}
                            }
                            $Str342 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag342 + ';' + $Desc342 + ';' + $Res342 + ';' + $Using:CurntDateForm)
                            $Str342
                        }

                        #2.2.26 (L1) Ensure 'Increase scheduling priority' is set to 'Administrators' (Scored) W2K12
                        $Tag35 = '2.2.26'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc35 = 'Ensure Increase scheduling priority is set to Administrators (Scored)'
                            $Lvl35 = 'L1'
		                    $PassPol35 = $secpol | where{$_ -like "SeIncreaseBasePriorityPrivilege*"}
                            if (!$PassPol35){
                            $Res35 = '2'}
                            Else{
                            $IncBasePri = $PassPol35 -split '= '
                            $SIDCodes35 = $IncBasePri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag35 = @('BUILTIN\Administrators')
                            $PolTag35Grps = foreach ($SIDCode35 in $SIDCodes35){
                                $SIDMod35 = $SIDCode35.Trim('*')
                                $objSID35 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod35)
                                $objUser35 = $objSID35.Translate( [System.Security.Principal.NTAccount])
                                $ObjName35 = $objUser35.Value
                                $ObjName35
                            }
                            $PolTag35Dif = Compare-Object -ReferenceObject $RefTag35 -DifferenceObject $PolTag35Grps -PassThru
                            $PolTag35Cnt = $PolTag35Dif.Count
                            if ($PolTag35Cnt -eq '0'){
                                $Res35 = '1'} else {$Res35 = '2'}
                            }
		                    $Str35 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag35 + ';' + $Desc35 + ';' + $Res35 + ';' + $Using:CurntDateForm)
                            $Str35
                        }

                        #2.2.26 (L1) Ensure 'Deny log on through Remote Desktop Services' is set to 'Guests, Local account' (MS only) (Scored) W2K16
                        $Tag342 = '2.2.26'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc342 = 'Ensure Deny log on through Remote Desktop Services is set to Guests, Local account (MS only) (Scored)'
                            $Lvl342 = 'L1'
                            $PassPol342 = $secpol | where{$_ -like "SeDenyRemoteInteractiveLogonRight*"}
                            if (!$PassPol342){
                            $Res342 = '2'}
                            Else{ 
                            $DenRemIntLog = $PassPol342 -split '= '
                            $SIDCodes342 = $DenRemIntLog[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag342 = @('BUILTIN\Guests','NT AUTHORITY\Local account')
                            $PolTag342Grps = foreach ($SIDCode342 in $SIDCodes342){
                                $SIDMod342 = $SIDCode342.Trim('*')
                                $objSID342 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod342)
                                $objUser342 = $objSID342.Translate( [System.Security.Principal.NTAccount])
                                $ObjName342 = $objUser342.Value
                                $ObjName342
                            }
                            $PolTag342Dif = Compare-Object -ReferenceObject $RefTag342 -DifferenceObject $PolTag342Grps -PassThru
                            $PolTag342Cnt = $PolTag342Dif.Count
                            if ($PolTag342Cnt -eq '0'){
                                $Res342 = '1'} else {$Res342 = '2'}
                            }
                            $Str342 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag342 + ';' + $Desc342 + ';' + $Res342 + ';' + $Using:CurntDateForm)
                            $Str342
                        }

                        #2.2.27 (L1) Ensure 'Load and unload device drivers' is set to 'Administrators' (Scored) W2K12R2
                        $Tag36 = '2.2.27'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc36 = 'Ensure Load and unload device drivers is set to Administrators (Scored)'
                            $Lvl36 = 'L1'
		                    $PassPol36 = $secpol | where{$_ -like "SeLoadDriverPrivilege*"}
                            if (!$PassPol36){
                            $Res36 = '2'}
                            Else{
                            $LoadDrvPri = $PassPol36 -split '= '
                            $SIDCodes36 = $LoadDrvPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag36 = @('BUILTIN\Administrators')
                            $PolTag36Grps = foreach ($SIDCode36 in $SIDCodes36){
                                $SIDMod36 = $SIDCode36.Trim('*')
                                $objSID36 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod36)
                                $objUser36 = $objSID36.Translate( [System.Security.Principal.NTAccount])
                                $ObjName36 = $objUser36.Value
                                $ObjName36
                            }
                            $PolTag36Dif = Compare-Object -ReferenceObject $RefTag36 -DifferenceObject $PolTag36Grps -PassThru
                            $PolTag36Cnt = $PolTag36Dif.Count
                            if ($PolTag36Cnt -eq '0'){
                                $Res36 = '1'} else {$Res36 = '2'}
                                }
		                    $Str36 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag36 + ';' + $Desc36 + ';' + $Res36 + ';' + $Using:CurntDateForm)
                            $Str36
                        }

                        #2.2.27 (L1) Ensure 'Enable computer and user accounts to be trusted for delegation' is set to 'Administrators' (DC only) (Scored) W2K16
                        $Tag343 = '2.2.27'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc343 = 'Ensure Enable computer and user accounts to be trusted for delegation is set to Administrators (DC only)'
                            $Lvl343 = 'L1'
                            $PassPol343 = $secpol | where{$_ -like "SeEnableDelegationPrivilege*"}
                            if (!$PassPol343){
                            $Res343 = '1'}
                            Else{ 
                            $EnbDelPri = $PassPol343 -split '= '
                            $SIDCodes343 = $EnbDelPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag343 = @('BUILTIN\Administrators')
                            $PolTag343Grps = foreach ($SIDCode343 in $SIDCodes343){
                                $SIDMod343 = $SIDCode343.Trim('*')
                                $objSID343 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod343)
                                $objUser343 = $objSID343.Translate( [System.Security.Principal.NTAccount])
                                $ObjName343 = $objUser343.Value
                                $ObjName343
                            }
                            $PolTag343Dif = Compare-Object -ReferenceObject $RefTag343 -DifferenceObject $PolTag343Grps -PassThru
                            $PolTag343Cnt = $PolTag343Dif.Count
                            if ($PolTag343Cnt -eq '0'){
                                $Res343 = '1'} else {$Res343 = '2'}
                            }
                            $Str343 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag343 + ';' + $Desc343 + ';' + $Res343 + ';' + $Using:CurntDateForm)
                            $Str343
                        }

                        #2.2.28 (L1) Ensure 'Lock pages in memory' is set to 'No One' (Scored) W2K12R2
                        $Tag37 = '2.2.28'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc37 = 'Ensure Lock pages in memory is set to No One (Scored)'
                            $Lvl37 = 'L1'
		                    $PassPol37 = $secpol | where{$_ -like "SeLockMemoryPrivilege*"}
                            if (!$PassPol37){
                            $Res37 = '1'}
                            Else{
                            $LckMemPri = $PassPol37 -split '= '
                            $SIDCodes37 = $LckMemPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag37 = @('no one')
                            $PolTag37Grps = foreach ($SIDCode37 in $SIDCodes37){
                                $SIDMod37 = $SIDCode37.Trim('*')
                                $objSID37 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod37)
                                $objUser37 = $objSID37.Translate( [System.Security.Principal.NTAccount])
                                $ObjName37 = $objUser37.Value
                                $ObjName37
                            }
                            $PolTag37Dif = Compare-Object -ReferenceObject $RefTag37 -DifferenceObject $PolTag37Grps -PassThru
                            $PolTag37Cnt = $PolTag37Dif.Count
                            if ($PolTag37Cnt -eq '0'){
                                $Res37 = '1'} else {$Res37 = '2'}
                                }
		                    $Str37 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag37 + ';' + $Desc37 + ';' + $Res37 + ';' + $Using:CurntDateForm)
                            $Str37
                        }

                        #2.2.28 (L1) Ensure 'Enable computer and user accounts to be trusted for delegation' is set to 'No One' (MS only) (Scored) W2K16
                        $Tag344 = '2.2.28'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc344 = 'Ensure Enable computer and user accounts to be trusted for delegation is set to Administrators (DC only)'
                            $Lvl344 = 'L1'
                            $PassPol344 = $secpol | where{$_ -like "SeEnableDelegationPrivilege*"}
                            if (!$PassPol344){
                            $Res344 = '1'}
                            Else{ 
                            $EnbDelPri = $PassPol344 -split '= '
                            $SIDCodes344 = $EnbDelPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag344 = @('No One')
                            $PolTag344Grps = foreach ($SIDCode344 in $SIDCodes344){
                                $SIDMod344 = $SIDCode344.Trim('*')
                                $objSID344 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod344)
                                $objUser344 = $objSID344.Translate( [System.Security.Principal.NTAccount])
                                $ObjName344 = $objUser344.Value
                                $ObjName344
                            }
                            $PolTag344Dif = Compare-Object -ReferenceObject $RefTag344 -DifferenceObject $PolTag344Grps -PassThru
                            $PolTag344Cnt = $PolTag344Dif.Count
                            if ($PolTag344Cnt -eq '0'){
                                $Res344 = '1'} else {$Res344 = '2'}
                            }
                            $Str344 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag344 + ';' + $Desc344 + ';' + $Res344 + ';' + $Using:CurntDateForm)
                            $Str344
                        }

                        #=================================================================================================
                        #2.2.29 (L2) Ensure 'Log on as a batch job' is set to 'Administrators' (DC Only) (Scored) - 38 W2K12R2
                        $Tag38 = '2.2.29'
                        if (($OSVersion -eq 'W2K12R2') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc38 = 'Ensure Log on as a batch job is set to Administrators (DC Only) (Scored)'
                            $Lvl38 = 'L2'
                            $PassPol38 = $secpol | where{$_ -like "SeBatchLogonRight*"}
                            $TcbPri = $PassPol38 -split '= '
                            $SIDCodes38 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag38 = @('BUILTIN\Administrators')
                            $PolTag38Grps = foreach ($SIDCode38 in $SIDCodes38){
	                            $SIDMod38 = $SIDCode38.Trim('*')
	                            $objSID38 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod38)
	                            $objUser38 = $objSID38.Translate( [System.Security.Principal.NTAccount])
	                            $ObjName38 = $objUser38.Value
	                            $ObjName38
	                            }
                            $PolTag38Dif = Compare-Object -ReferenceObject $RefTag38 -DifferenceObject $PolTag38Grps -PassThru
                            $PolTag38Cnt = $PolTag38Dif.Count
                            if ($PolTag38Cnt -eq '0'){
                                $Res38 = '1'} else {$Res38 = '2'}
                            $Str38 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag38 + ';' + $Desc38 + ';' + $Res38 + ';' + $Using:CurntDateForm)
	                        $Str38
                        }

                        #2.2.29 (L1) Ensure 'Force shutdown from a remote system' is set to 'Administrators' (Scored) W2K16
                        $Tag345 = '2.2.29'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc345 = 'Ensure Force shutdown from a remote system is set to Administrators (Scored)'
                            $Lvl345 = 'L1'
                            $PassPol345 = $secpol | where{$_ -like "SeRemoteShutdownPrivilege*"}
                            if (!$PassPol345){
                            $Res345 = '2'}
                            Else{ 
                            $RemShdwPri = $PassPol345 -split '= '
                            $SIDCodes345 = $RemShdwPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag345 = @('BUILTIN\Administrators')
                            $PolTag345Grps = foreach ($SIDCode345 in $SIDCodes345){
                                $SIDMod345 = $SIDCode345.Trim('*')
                                $objSID345 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod345)
                                $objUser345 = $objSID345.Translate( [System.Security.Principal.NTAccount])
                                $ObjName345 = $objUser345.Value
                                $ObjName345
                            }
                            $PolTag345Dif = Compare-Object -ReferenceObject $RefTag345 -DifferenceObject $PolTag345Grps -PassThru
                            $PolTag345Cnt = $PolTag345Dif.Count
                            if ($PolTag345Cnt -eq '0'){
                                $Res345 = '1'} else {$Res345 = '2'}
                            }
                            $Str345 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag345 + ';' + $Desc345 + ';' + $Res345 + ';' + $Using:CurntDateForm)
                            $Str345
                        }

                        #=================================================================================================

                        #2.2.30 (L1) Configure 'Manage auditing and security log' (Scored) W2K12R2
                        $Tag39 = '2.2.30'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc39 = 'Configure Manage auditing and security log (Scored)'
                            $Lvl39 = 'L1'
		                    $PassPol39 = $secpol | where{$_ -like "SeSecurityPrivilege*"}
                            if (!$PassPol39){
                            $Res39 = '2'}
                            Else{
                            $SecPriv = $PassPol39 -split '= '
                            $SIDCodes39 = $SecPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag39 = @('BUILTIN\Administrators')
                            $PolTag39Grps = foreach ($SIDCode39 in $SIDCodes39){
                                $SIDMod39 = $SIDCode39.Trim('*')
                                $objSID39 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod39)
                                $objUser39 = $objSID39.Translate( [System.Security.Principal.NTAccount])
                                $ObjName39 = $objUser39.Value
                                $ObjName39
                            }
                            $PolTag39Dif = Compare-Object -ReferenceObject $RefTag39 -DifferenceObject $PolTag39Grps -PassThru
                            $PolTag39Cnt = $PolTag39Dif.Count
                            if ($PolTag39Cnt -eq '0'){
                                $Res39 = '1'} else {$Res39 = '2'}
                                }
		                    $Str39 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag39 + ';' + $Desc39 + ';' + $Res39 + ';' + $Using:CurntDateForm)
                            $Str39
                        }

                        #2.2.30 (L1) Ensure 'Generate security audits' is set to 'LOCAL SERVICE, NETWORK SERVICE' (Scored) W2K16
                        $Tag346 = '2.2.30'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc346 = 'Ensure Generate security audits is set to LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl346 = 'L1'
		                    $PassPol346 = $secpol | where{$_ -like "SeAuditPrivilege*"}
                            if (!$PassPol346){
                            $Res346 = '2'}
                            Else{ 
                            $AudtPri = $PassPol346 -split '= '
                            $SIDCodes346 = $AudtPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag346 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE')
                            $PolTag346Grps = foreach ($SIDCode346 in $SIDCodes346){
                                $SIDMod346 = $SIDCode346.Trim('*')
                                $objSID346 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod346)
                                $objUser346 = $objSID346.Translate( [System.Security.Principal.NTAccount])
                                $ObjName346 = $objUser346.Value
                                $ObjName346
                            }
                            $PolTag346Dif = Compare-Object -ReferenceObject $RefTag346 -DifferenceObject $PolTag346Grps -PassThru
                            $PolTag346Cnt = $PolTag346Dif.Count
                            if ($PolTag346Cnt -eq '0'){
                                $Res346 = '1'} else {$Res346 = '2'}
                            }
		                    $Str346 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag346 + ';' + $Desc346 + ';' + $Res346 + ';' + $Using:CurntDateForm)
                            $Str346
                        }

                        #2.2.31 (L1) Ensure 'Modify an object label' is set to 'No One' (Scored) W2K12R2
                        $Tag40 = '2.2.31'
		                if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc40 = 'Ensure Modify an object label is set to No One (Scored)'
                            $Lvl40 = 'L1'
                            $PassPol40 = $secpol | where{$_ -like "SeRelabelPrivilege*"}
                            if (!$PassPol40){
                            $Res40 = '1'}
                            Else{
                            $RelabPri = $PassPol40 -split '= '
                            $SIDCodes40 = $RelabPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag40 = @('no one')
                            $PolTag40Grps = foreach ($SIDCode40 in $SIDCodes40){
                                $SIDMod40 = $SIDCode40.Trim('*')
                                $objSID40 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod40)
                                $objUser40 = $objSID40.Translate( [System.Security.Principal.NTAccount])
                                $ObjName40 = $objUser40.Value
                                $ObjName40
                            }
                            $PolTag40Dif = Compare-Object -ReferenceObject $RefTag40 -DifferenceObject $PolTag40Grps -PassThru
                            $PolTag40Cnt = $PolTag40Dif.Count
                            if ($PolTag40Cnt -eq '0'){
                                $Res40 = '1'} else {$Res40 = '2'}
                                }
		                    $Str40 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag40 + ';' + $Desc40 + ';' + $Res40 + ';' + $Using:CurntDateForm)
                            $Str40
                        }

                        #2.2.31 (L1) Ensure 'Impersonate a client after authentication' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE' (DC only) (Scored) W2K16
                        $Tag347 = '2.2.31'
		                if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc347 = 'Configure Impersonate a client after authentication (Scored)'
                            $Lvl347 = 'L1'
                            $PassPol347 = $secpol | where{$_ -like "SeImpersonatePrivilege*"}
                            if (!$PassPol347){
                            $Res347 = '2'}
                            Else{ 
                            $ImpersoPri = $PassPol347 -split '= '
                            $SIDCodes347 = $ImpersoPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag347 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators','NT AUTHORITY\SERVICE')
                            $PolTag347Grps = foreach ($SIDCode347 in $SIDCodes347){
                                $SIDMod347 = $SIDCode347.Trim('*')
                                $objSID347 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod347)
                                $objUser347 = $objSID347.Translate( [System.Security.Principal.NTAccount])
                                $ObjName347 = $objUser347.Value
                                $ObjName347
                            }
                            $PolTag347Dif = Compare-Object -ReferenceObject $RefTag347 -DifferenceObject $PolTag347Grps -PassThru
                            $PolTag347Cnt = $PolTag347Dif.Count
                            if ($PolTag347Cnt -eq '0'){
                                $Res347 = '1'} else {$Res347 = '2'}
                            }
		                    $Str347 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag347 + ';' + $Desc347 + ';' + $Res347 + ';' + $Using:CurntDateForm)
                            $Str347
                        }

                        #2.2.32 (L1) Ensure 'Modify firmware environment values' is set to 'Administrators' (Scored) W2K12R2
                        $Tag41 = '2.2.32'
		                if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc41 = 'Ensure Modify firmware environment values is set to Administrators (Scored)'
                            $Lvl41 = 'L1'
                            $PassPol41 = $secpol | where{$_ -like "SeSystemEnvironmentPrivilege*"}
                            if (!$PassPol41){
                            $Res41 = '2'}
                            Else{
                            $SysEnvPri = $PassPol41 -split '= '
                            $SIDCodes41 = $SysEnvPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag41 = @('BUILTIN\Administrators')
                            $PolTag41Grps = foreach ($SIDCode41 in $SIDCodes41){
                                $SIDMod41 = $SIDCode41.Trim('*')
                                $objSID41 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod41)
                                $objUser41 = $objSID41.Translate( [System.Security.Principal.NTAccount])
                                $ObjName41 = $objUser41.Value
                                $ObjName41
                            }
                            $PolTag41Dif = Compare-Object -ReferenceObject $RefTag41 -DifferenceObject $PolTag41Grps -PassThru
                            $PolTag41Cnt = $PolTag41Dif.Count
                            if ($PolTag41Cnt -eq '0'){
                                $Res41 = '1'} else {$Res41 = '2'}
                                }
		                    $Str41 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag41 + ';' + $Desc41 + ';' + $Res41 + ';' + $Using:CurntDateForm)
                            $Str41
                        }

                        #2.2.32 (L1) Ensure 'Impersonate a client after authentication' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE' and (when the Web Server (IIS) Role with Web Services Role Service is installed) 'IIS_IUSRS' (MS only) (Scored) W2K16
                        $Tag348 = '2.2.32'
		                if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc348 = 'Ensure Impersonate a client after authentication is set to Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE and (when the Web Server (IIS) Role with Web Services Role Service is installed) IIS_IUSRS (MS only) (Scored)'
                            $Lvl348 = 'L1'
                            $PassPol348 = $secpol | where{$_ -like "SeImpersonatePrivilege*"}
                            if (!$PassPol348){
                            $Res348 = '2'}
                            Else{ 
                            $ImpersoPri = $PassPol348 -split '= '
                            $SIDCodes348 = $ImpersoPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag348a = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators','NT AUTHORITY\SERVICE')
                            $RefTag348b = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE','BUILTIN\Administrators','NT AUTHORITY\SERVICE','BUILTIN\IIS_IUSRS')
							$PolTag348Grps = foreach ($SIDCode348 in $SIDCodes348){
                                $SIDMod348 = $SIDCode348.Trim('*')
                                $objSID348 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod348)
                                $objUser348 = $objSID348.Translate( [System.Security.Principal.NTAccount])
                                $ObjName348 = $objUser348.Value
                                $ObjName348
                            }
                            if ($IISRole -eq 'Yes'){
								$PolTag348Dif = Compare-Object -ReferenceObject $RefTag348b -DifferenceObject $PolTag348Grps -PassThru
								$PolTag348Cnt = $PolTag348Dif.Count
								if ($PolTag348Cnt -eq '0'){
									$Res348 = '1'} else {$Res348 = '2'}
								}
							if ($IISRole -eq 'No'){
								$PolTag348Dif = Compare-Object -ReferenceObject $RefTag348a -DifferenceObject $PolTag348Grps -PassThru
								$PolTag348Cnt = $PolTag348Dif.Count
								if ($PolTag348Cnt -eq '0'){
									$Res348 = '1'} else {$Res348 = '2'}
								}
							}
							
		                    $Str348 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag348 + ';' + $Desc348 + ';' + $Res348 + ';' + $Using:CurntDateForm)
                            $Str348
                        }

                        #2.2.33 (L1) Ensure 'Perform volume maintenance tasks' is set to 'Administrators' (Scored) W2K12R2
                        $Tag42 = '2.2.33'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc42 = 'Ensure Perform volume maintenance tasks is set to Administrators (Scored)'
                            $Lvl42 = 'L1'
		                    $PassPol42 = $secpol | where{$_ -like "SeManageVolumePrivilege*"}
                            if (!$PassPol42){
                            $Res42 = '2'}
                            Else{
                            $MgmVolPri = $PassPol42 -split '= '
                            $SIDCodes42 = $MgmVolPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag42 = @('BUILTIN\Administrators')
                            $PolTag42Grps = foreach ($SIDCode42 in $SIDCodes42){
                                $SIDMod42 = $SIDCode42.Trim('*')
                                $objSID42 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod42)
                                $objUser42 = $objSID42.Translate( [System.Security.Principal.NTAccount])
                                $ObjName42 = $objUser42.Value
                                $ObjName42
                            }
                            $PolTag42Dif = Compare-Object -ReferenceObject $RefTag42 -DifferenceObject $PolTag42Grps -PassThru
                            $PolTag42Cnt = $PolTag42Dif.Count
                            if ($PolTag42Cnt -eq '0'){
                                $Res42 = '1'} else {$Res42 = '2'}
                            }
		                    $Str42 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag42 + ';' + $Desc42 + ';' + $Res42 + ';' + $Using:CurntDateForm)
                            $Str42
                        }

                        #2.2.33 (L1) Ensure 'Increase scheduling priority' is set to 'Administrators' (Scored) W2K16
                        $Tag349 = '2.2.33'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc349 = 'Ensure Increase scheduling priority is set to Administrators (Scored)'
                            $Lvl349 = 'L1'
		                    $PassPol349 = $secpol | where{$_ -like "SeIncreaseBasePriorityPrivilege*"}
                            if (!$PassPol349){
                            $Res349 = '2'}
                            Else{
                            $IncBasePri = $PassPol349 -split '= '
                            $SIDCodes349 = $IncBasePri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag349 = @('BUILTIN\Administrators')
                            $PolTag349Grps = foreach ($SIDCode349 in $SIDCodes349){
                                $SIDMod349 = $SIDCode349.Trim('*')
                                $objSID349 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod349)
                                $objUser349 = $objSID349.Translate( [System.Security.Principal.NTAccount])
                                $ObjName349 = $objUser349.Value
                                $ObjName349
                            }
                            $PolTag349Dif = Compare-Object -ReferenceObject $RefTag349 -DifferenceObject $PolTag349Grps -PassThru
                            $PolTag349Cnt = $PolTag349Dif.Count
                            if ($PolTag349Cnt -eq '0'){
                                $Res349 = '1'} else {$Res349 = '2'}
                            }
		                    $Str349 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag349 + ';' + $Desc349 + ';' + $Res349 + ';' + $Using:CurntDateForm)
                            $Str349
                        }

                        #2.2.34 (L1) Ensure 'Profile single process' is set to 'Administrators' (Scored) W2K12R2
                        $Tag43 = '2.2.34'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc43 = 'Ensure Profile single process is set to Administrators (Scored)'
                            $Lvl43 = 'L1'
		                    $PassPol43 = $secpol | where{$_ -like "SeProfileSingleProcessPrivilege*"}
                            if (!$PassPol43){
                            $Res43 = '2'}
                            Else{
                            $PflSinProc = $PassPol43 -split '= '
                            $SIDCodes43 = $PflSinProc[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag43 = @('BUILTIN\Administrators')
                            $PolTag43Grps = foreach ($SIDCode43 in $SIDCodes43){
                                $SIDMod43 = $SIDCode43.Trim('*')
                                $objSID43 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod43)
                                $objUser43 = $objSID43.Translate( [System.Security.Principal.NTAccount])
                                $ObjName43 = $objUser43.Value
                                $ObjName43
                            }
                            $PolTag43Dif = Compare-Object -ReferenceObject $RefTag43 -DifferenceObject $PolTag43Grps -PassThru
                            $PolTag43Cnt = $PolTag43Dif.Count
                            if ($PolTag43Cnt -eq '0'){
                                $Res43 = '1'} else {$Res43 = '2'}
			                    }
		                    $Str43 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag43 + ';' + $Desc43 + ';' + $Res43 + ';' + $Using:CurntDateForm)
                            $Str43
                        }

                        #2.2.34 (L1) Ensure 'Load and unload device drivers' is set to 'Administrators' (Scored) W2K16
                        $Tag350 = '2.2.34'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc350 = 'Ensure Load and unload device drivers is set to Administrators (Scored)'
                            $Lvl350 = 'L1'
		                    $PassPol350 = $secpol | where{$_ -like "SeLoadDriverPrivilege*"}
                            if (!$PassPol350){
                            $Res350 = '2'}
                            Else{
                            $LoadDrvPri = $PassPol350 -split '= '
                            $SIDCodes350 = $LoadDrvPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag350 = @('BUILTIN\Administrators')
                            $PolTag350Grps = foreach ($SIDCode350 in $SIDCodes350){
                                $SIDMod350 = $SIDCode350.Trim('*')
                                $objSID350 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod350)
                                $objUser350 = $objSID350.Translate( [System.Security.Principal.NTAccount])
                                $ObjName350 = $objUser350.Value
                                $ObjName350
                            }
                            $PolTag350Dif = Compare-Object -ReferenceObject $RefTag350 -DifferenceObject $PolTag350Grps -PassThru
                            $PolTag350Cnt = $PolTag350Dif.Count
                            if ($PolTag350Cnt -eq '0'){
                                $Res350 = '1'} else {$Res350 = '2'}
                                }
		                    $Str350 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag350 + ';' + $Desc350 + ';' + $Res350 + ';' + $Using:CurntDateForm)
                            $Str350
                        }

                        #2.2.35 (L1) Ensure 'Profile system performance' is set to 'Administrators, NT SERVICE\WdiServiceHost' (Scored) W2K12
                        $Tag44 = '2.2.35'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc44 = 'Ensure Profile system performance is set to Administrators, NT SERVICE\WdiServiceHost (Scored)'
                            $Lvl44 = 'L1'
		                    $PassPol44 = $secpol | where{$_ -like "SeSystemProfilePrivilege*"}
                            if (!$PassPol44){
                            $Res44 = '2'}
                            Else{
                            $SysPflPri = $PassPol44 -split '= '
                            $SIDCodes44 = $SysPflPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag44 = @('BUILTIN\Administrators','NT SERVICE\WdiServiceHost')
                            $PolTag44Grps = foreach ($SIDCode44 in $SIDCodes44){
                                $SIDMod44 = $SIDCode44.Trim('*')
                                $objSID44 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod44)
                                $objUser44 = $objSID44.Translate( [System.Security.Principal.NTAccount])
                                $ObjName44 = $objUser44.Value
                                $ObjName44
                            }
                            $PolTag44Dif = Compare-Object -ReferenceObject $RefTag44 -DifferenceObject $PolTag44Grps -PassThru
                            $PolTag44Cnt = $PolTag44Dif.Count
                            if ($PolTag44Cnt -eq '0'){
                                $Res44 = '1'} else {$Res44 = '2'}
                            }
		                    $Str44 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag44 + ';' + $Desc44 + ';' + $Res44 + ';' + $Using:CurntDateForm)
                            $Str44
                        }

                        #2.2.35 (L1) Ensure 'Lock pages in memory' is set to 'No One' (Scored) W2K16
                        $Tag351 = '2.2.35'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc351 = 'Ensure Lock pages in memory is set to No One (Scored)'
                            $Lvl351 = 'L1'
		                    $PassPol351 = $secpol | where{$_ -like "SeLockMemoryPrivilege*"}
                            if (!$PassPol351){
                            $Res351 = '1'}
                            Else{
                            $LckMemPri = $PassPol351 -split '= '
                            $SIDCodes351 = $LckMemPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag351 = @('No One')
                            $PolTag351Grps = foreach ($SIDCode351 in $SIDCodes351){
                                $SIDMod351 = $SIDCode351.Trim('*')
                                $objSID351 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod351)
                                $objUser351 = $objSID351.Translate( [System.Security.Principal.NTAccount])
                                $ObjName351 = $objUser351.Value
                                $ObjName351
                            }
                            $PolTag351Dif = Compare-Object -ReferenceObject $RefTag351 -DifferenceObject $PolTag351Grps -PassThru
                            $PolTag351Cnt = $PolTag351Dif.Count
                            if ($PolTag351Cnt -eq '0'){
                                $Res351 = '1'} else {$Res351 = '2'}
                                }
		                    $Str351 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag351 + ';' + $Desc351 + ';' + $Res351 + ';' + $Using:CurntDateForm)
                            $Str351
                        }

                        #2.2.36 (L1) Ensure 'Replace a process level token' is set to 'LOCAL SERVICE, NETWORK SERVICE' (Scored) W2K12R2
                        $Tag45 = '2.2.36'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc45 = 'Ensure Replace a process level token is set to LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl45 = 'L1'
		                    $PassPol45 = $secpol | where{$_ -like "SeAssignPrimaryTokenPrivilege*"}
                            if (!$PassPol45){
                            $Res45 = '2'}
                            Else{
                            $AsigPrimTkn = $PassPol45 -split '= '
                            $SIDCodes45 = $AsigPrimTkn[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag45 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE')
                            $PolTag45Grps = foreach ($SIDCode45 in $SIDCodes45){
                                $SIDMod45 = $SIDCode45.Trim('*')
                                $objSID45 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod45)
                                $objUser45 = $objSID45.Translate( [System.Security.Principal.NTAccount])
                                $ObjName45 = $objUser45.Value
                                $ObjName45
                            }
                            $PolTag45Dif = Compare-Object -ReferenceObject $RefTag45 -DifferenceObject $PolTag45Grps -PassThru
                            $PolTag45Cnt = $PolTag45Dif.Count
                            if ($PolTag45Cnt -eq '0'){
                                $Res45 = '1'} else {$Res45 = '2'}
                            }
		                    $Str45 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag45 + ';' + $Desc45 + ';' + $Res45 + ';' + $Using:CurntDateForm)
                            $Str45
                        }

                        #2.2.36 (L2) Ensure 'Log on as a batch job' is set to 'Administrators' (DC Only) (Scored) W2K16
                        $Tag352 = '2.2.36'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc352 = 'Ensure Log on as a batch job is set to Administrators (DC Only) (Scored)'
                            $Lvl352 = 'L2'
                            $PassPol352 = $secpol | where{$_ -like "SeBatchLogonRight*"}
                            $TcbPri = $PassPol352 -split '= '
                            $SIDCodes352 = $TcbPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag352 = @('BUILTIN\Administrators')
                            $PolTag352Grps = foreach ($SIDCode352 in $SIDCodes352){
	                            $SIDMod352 = $SIDCode352.Trim('*')
	                            $objSID352 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod352)
	                            $objUser352 = $objSID352.Translate( [System.Security.Principal.NTAccount])
	                            $ObjName352 = $objUser352.Value
	                            $ObjName352
	                            }
                            $PolTag352Dif = Compare-Object -ReferenceObject $RefTag352 -DifferenceObject $PolTag352Grps -PassThru
                            $PolTag352Cnt = $PolTag352Dif.Count
                            if ($PolTag352Cnt -eq '0'){
                                $Res352 = '1'} else {$Res352 = '2'}
                            $Str352 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag352 + ';' + $Desc352 + ';' + $Res352 + ';' + $Using:CurntDateForm)
	                        $Str352
                        }

                        #2.2.37 (L1) Ensure 'Restore files and directories' is set to 'Administrators' (Scored) W2K12R2
                        $Tag46 = '2.2.37'
		                if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc46 = 'Ensure Restore files and directories is set to Administrators (Scored)'
                            $Lvl46 = 'L1'
                            $PassPol46 = $secpol | where{$_ -like "SeRestorePrivilege*"}
                            if (!$PassPol46){
                            $Res46 = '2'}
                            Else{
                            $RestPriv = $PassPol46 -split '= '
                            $SIDCodes46 = $RestPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag46 = @('BUILTIN\Administrators')
                            $PolTag46Grps = foreach ($SIDCode46 in $SIDCodes46){
                                $SIDMod46 = $SIDCode46.Trim('*')
                                $objSID46 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod46)
                                $objUser46 = $objSID46.Translate( [System.Security.Principal.NTAccount])
                                $ObjName46 = $objUser46.Value
                                $ObjName46
                            }
                            $PolTag46Dif = Compare-Object -ReferenceObject $RefTag46 -DifferenceObject $PolTag46Grps -PassThru
                            $PolTag46Cnt = $PolTag46Dif.Count
                            if ($PolTag46Cnt -eq '0'){
                                $Res46 = '1'} else {$Res46 = '2'}
                            }
		                    $Str46 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag46 + ';' + $Desc46 + ';' + $Res46 + ';' + $Using:CurntDateForm)
                            $Str46
                        }

                        #2.2.37 (L1) Ensure 'Manage auditing and security log' is set to 'Administrators` and (when Exchange is running in the environment) `Exchange Servers' (DC only) (Scored) W2K16
                        $Tag353 = '2.2.37'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc353 = 'Ensure Manage auditing and security log is set to Administrators and (when Exchange is running in the environment) Exchange Servers (DC only) (Scored)'
                            $Lvl353 = 'L1'
		                    $PassPol353 = $secpol | where{$_ -like "SeSecurityPrivilege*"}
                            if (!$PassPol353){
                            $Res353 = '2'}
                            Else{
                            $SecPriv = $PassPol353 -split '= '
                            $SIDCodes353 = $SecPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag353 = @('BUILTIN\Administrators')
                            $PolTag353Grps = foreach ($SIDCode353 in $SIDCodes353){
                                $SIDMod353 = $SIDCode353.Trim('*')
                                $objSID353 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod353)
                                $objUser353 = $objSID353.Translate( [System.Security.Principal.NTAccount])
                                $ObjName353 = $objUser353.Value
                                $ObjName353
                            }
                            $PolTag353Dif = Compare-Object -ReferenceObject $RefTag353 -DifferenceObject $PolTag353Grps -PassThru
                            $PolTag353Cnt = $PolTag353Dif.Count
                            if ($PolTag353Cnt -eq '0'){
                                $Res353 = '1'} else {$Res353 = '2'}
                                }
		                    $Str353 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag353 + ';' + $Desc353 + ';' + $Res353 + ';' + $Using:CurntDateForm)
                            $Str353
                        }

                        #2.2.38 (L1) Ensure 'Shut down the system' is set to 'Administrators' (Scored) W2K12R2
                        $Tag47 = '2.2.38'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc47 = 'Ensure Shut down the system is set to Administrators (Scored)'
                            $Lvl47 = 'L1'
		                    $PassPol47 = $secpol | where{$_ -like "SeShutdownPrivilege*"}
                            if (!$PassPol47){
                            $Res47 = '2'}
                            Else{
                            $ShdwPriv = $PassPol47 -split '= '
                            $SIDCodes47 = $ShdwPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag47 = @('BUILTIN\Administrators')
                            $PolTag47Grps = foreach ($SIDCode47 in $SIDCodes47){
                                $SIDMod47 = $SIDCode47.Trim('*')
                                $objSID47 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod47)
                                $objUser47 = $objSID47.Translate( [System.Security.Principal.NTAccount])
                                $ObjName47 = $objUser47.Value
                                $ObjName47
                            }
                            $PolTag47Dif = Compare-Object -ReferenceObject $RefTag47 -DifferenceObject $PolTag47Grps -PassThru
                            $PolTag47Cnt = $PolTag47Dif.Count
                            if ($PolTag47Cnt -eq '0'){
                                $Res47 = '1'} else {$Res47 = '2'}
                            }
                            $Str47 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag47 + ';' + $Desc47 + ';' + $Res47 + ';' + $Using:CurntDateForm)
                            $Str47
                        }

                        #2.2.38 (L1) Ensure 'Manage auditing and security log' is set to 'Administrators' (MS only) (Scored) W2K16
                        $Tag354 = '2.2.38'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
                            $Desc354 = 'Ensure Manage auditing and security log is set to Administrators (MS only) (Scored)'
                            $Lvl354 = 'L1'
		                    $PassPol354 = $secpol | where{$_ -like "SeSecurityPrivilege*"}
                            if (!$PassPol354){
                            $Res354 = '2'}
                            Else{
                            $SecPriv = $PassPol354 -split '= '
                            $SIDCodes354 = $SecPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag354 = @('BUILTIN\Administrators')
                            $PolTag354Grps = foreach ($SIDCode354 in $SIDCodes354){
                                $SIDMod354 = $SIDCode354.Trim('*')
                                $objSID354 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod354)
                                $objUser354 = $objSID354.Translate( [System.Security.Principal.NTAccount])
                                $ObjName354 = $objUser354.Value
                                $ObjName354
                            }
                            $PolTag354Dif = Compare-Object -ReferenceObject $RefTag354 -DifferenceObject $PolTag354Grps -PassThru
                            $PolTag354Cnt = $PolTag354Dif.Count
                            if ($PolTag354Cnt -eq '0'){
                                $Res354 = '1'} else {$Res354 = '2'}
                                }
		                    $Str354 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag354 + ';' + $Desc354 + ';' + $Res354 + ';' + $Using:CurntDateForm)
                            $Str354
                        }

                        #===================================================================================================================
                        #2.2.39 (L1) Ensure 'Synchronize directory service data' is set to 'No One' (DC only) (Scored) - 48 W2K12R2
                        $Tag48 = '2.2.39'
                        if (($OSVersion -eq 'W2K12R2') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc48 = 'Ensure Synchronize directory service data is set to No One (DC only) (Scored)'
                            $Lvl48 = 'L1'
                            $PassPol48 = $secpol | where{$_ -like "SeSyncAgentPrivilege*"}
                            if (!$PassPol48){
                                $Res37 = '1'}
	                        Else{
		                        $Res48 = '2'}
                            $Str48 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag48 + ';' + $Desc48 + ';' + $Res48 + ';' + $Using:CurntDateForm)
	                        $Str48
                        }

                        #2.2.39 (L1) Ensure 'Modify an object label' is set to 'No One' (Scored) W2K16
                        $Tag355 = '2.2.39'
		                if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc355 = 'Ensure Modify an object label is set to No One (Scored)'
                            $Lvl355 = 'L1'
                            $PassPol355 = $secpol | where{$_ -like "SeRelabelPrivilege*"}
                            if (!$PassPol355){
                            $Res355 = '1'}
                            Else{
                            $RelabPri = $PassPol355 -split '= '
                            $SIDCodes355 = $RelabPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag355 = @('No One')
                            $PolTag355Grps = foreach ($SIDCode355 in $SIDCodes355){
                                $SIDMod355 = $SIDCode355.Trim('*')
                                $objSID355 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod355)
                                $objUser355 = $objSID355.Translate( [System.Security.Principal.NTAccount])
                                $ObjName355 = $objUser355.Value
                                $ObjName355
                            }
                            $PolTag355Dif = Compare-Object -ReferenceObject $RefTag355 -DifferenceObject $PolTag355Grps -PassThru
                            $PolTag355Cnt = $PolTag355Dif.Count
                            if ($PolTag355Cnt -eq '0'){
                                $Res355 = '1'} else {$Res355 = '2'}
                                }
		                    $Str355 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag355 + ';' + $Desc355 + ';' + $Res355 + ';' + $Using:CurntDateForm)
                            $Str355
                        }
                        
                        #====================================================================================================================

                        #2.2.40 (L1) Ensure 'Take ownership of files or other objects' is set to 'Administrators' (Scored) W2K12R2
                        $Tag49 = '2.2.40'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
                            $Desc49 = 'Ensure Take ownership of files or other objects is set to Administrators (Scored)'
                            $Lvl49 = 'L1'
		                    $PassPol49 = $secpol | where{$_ -like "SeTakeOwnershipPrivilege*"}
                            if (!$PassPol49){
                            $Res49 = '2'}
                            Else{
                            $TkOwnrShPri = $PassPol49 -split '= '
                            $SIDCodes49 = $TkOwnrShPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag49 = @('BUILTIN\Administrators')
                            $PolTag49Grps = foreach ($SIDCode49 in $SIDCodes49){
                                $SIDMod49 = $SIDCode49.Trim('*')
                                $objSID49 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod49)
                                $objUser49 = $objSID49.Translate( [System.Security.Principal.NTAccount])
                                $ObjName49 = $objUser49.Value
                                $ObjName49
                            }
                            $PolTag49Dif = Compare-Object -ReferenceObject $RefTag49 -DifferenceObject $PolTag49Grps -PassThru
                            $PolTag49Cnt = $PolTag49Dif.Count
                            if ($PolTag49Cnt -eq '0'){
                                $Res49 = '1'} else {$Res49 = '2'}
                            }
		                    $Str49 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag49 + ';' + $Desc49 + ';' + $Res49 + ';' + $Using:CurntDateForm)
                            $Str49
                        }

                        #2.2.40 (L1) Ensure 'Modify firmware environment values' is set to 'Administrators' (Scored) W2K16
                        $Tag356 = '2.2.40'
		                if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc356 = 'Ensure Modify firmware environment values is set to Administrators (Scored)'
                            $Lvl356 = 'L1'
                            $PassPol356 = $secpol | where{$_ -like "SeSystemEnvironmentPrivilege*"}
                            if (!$PassPol356){
                            $Res356 = '2'}
                            Else{
                            $SysEnvPri = $PassPol356 -split '= '
                            $SIDCodes356 = $SysEnvPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag356 = @('BUILTIN\Administrators')
                            $PolTag356Grps = foreach ($SIDCode356 in $SIDCodes356){
                                $SIDMod356 = $SIDCode356.Trim('*')
                                $objSID356 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod356)
                                $objUser356 = $objSID356.Translate( [System.Security.Principal.NTAccount])
                                $ObjName356 = $objUser356.Value
                                $ObjName356
                            }
                            $PolTag356Dif = Compare-Object -ReferenceObject $RefTag356 -DifferenceObject $PolTag356Grps -PassThru
                            $PolTag356Cnt = $PolTag356Dif.Count
                            if ($PolTag356Cnt -eq '0'){
                                $Res356 = '1'} else {$Res356 = '2'}
                                }
		                    $Str356 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag356 + ';' + $Desc356 + ';' + $Res356 + ';' + $Using:CurntDateForm)
                            $Str356
                        }

                        #2.2.41 (L1) Ensure 'Perform volume maintenance tasks' is set to 'Administrators' (Scored) W2K16
                        $Tag357 = '2.2.41'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc357 = 'Ensure Perform volume maintenance tasks is set to Administrators (Scored)'
                            $Lvl357 = 'L1'
		                    $PassPol357 = $secpol | where{$_ -like "SeManageVolumePrivilege*"}
                            if (!$PassPol357){
                            $Res357 = '2'}
                            Else{
                            $MgmVolPri = $PassPol357 -split '= '
                            $SIDCodes357 = $MgmVolPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag357 = @('BUILTIN\Administrators')
                            $PolTag357Grps = foreach ($SIDCode357 in $SIDCodes357){
                                $SIDMod357 = $SIDCode357.Trim('*')
                                $objSID357 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod357)
                                $objUser357 = $objSID357.Translate( [System.Security.Principal.NTAccount])
                                $ObjName357 = $objUser357.Value
                                $ObjName357
                            }
                            $PolTag357Dif = Compare-Object -ReferenceObject $RefTag357 -DifferenceObject $PolTag357Grps -PassThru
                            $PolTag357Cnt = $PolTag357Dif.Count
                            if ($PolTag357Cnt -eq '0'){
                                $Res357 = '1'} else {$Res357 = '2'}
                            }
		                    $Str357 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag357 + ';' + $Desc357 + ';' + $Res357 + ';' + $Using:CurntDateForm)
                            $Str357
                        }

                        #2.2.42 (L1) Ensure 'Profile single process' is set to 'Administrators' (Scored) W2K16
                        $Tag358 = '2.2.42'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc358 = 'Ensure Profile single process is set to Administrators (Scored)'
                            $Lvl358 = 'L1'
		                    $PassPol358 = $secpol | where{$_ -like "SeProfileSingleProcessPrivilege*"}
                            if (!$PassPol358){
                            $Res358 = '2'}
                            Else{
                            $PflSinProc = $PassPol358 -split '= '
                            $SIDCodes358 = $PflSinProc[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag358 = @('BUILTIN\Administrators')
                            $PolTag358Grps = foreach ($SIDCode358 in $SIDCodes358){
                                $SIDMod358 = $SIDCode358.Trim('*')
                                $objSID358 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod358)
                                $objUser358 = $objSID358.Translate( [System.Security.Principal.NTAccount])
                                $ObjName358 = $objUser358.Value
                                $ObjName358
                            }
                            $PolTag358Dif = Compare-Object -ReferenceObject $RefTag358 -DifferenceObject $PolTag358Grps -PassThru
                            $PolTag358Cnt = $PolTag358Dif.Count
                            if ($PolTag358Cnt -eq '0'){
                                $Res358 = '1'} else {$Res358 = '2'}
			                    }
		                    $Str358 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag358 + ';' + $Desc358 + ';' + $Res358 + ';' + $Using:CurntDateForm)
                            $Str358
                        }

                        #2.2.43 (L1) Ensure 'Profile system performance' is set to 'Administrators, NT SERVICE\WdiServiceHost' (Scored) W2K16
                        $Tag359 = '2.2.43'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc359 = 'Ensure Profile system performance is set to Administrators, NT SERVICE\WdiServiceHost (Scored)'
                            $Lvl359 = 'L1'
		                    $PassPol359 = $secpol | where{$_ -like "SeSystemProfilePrivilege*"}
                            if (!$PassPol359){
                            $Res359 = '2'}
                            Else{
                            $SysPflPri = $PassPol359 -split '= '
                            $SIDCodes359 = $SysPflPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag359 = @('BUILTIN\Administrators','NT SERVICE\WdiServiceHost')
                            $PolTag359Grps = foreach ($SIDCode359 in $SIDCodes359){
                                $SIDMod359 = $SIDCode359.Trim('*')
                                $objSID359 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod359)
                                $objUser359 = $objSID359.Translate( [System.Security.Principal.NTAccount])
                                $ObjName359 = $objUser359.Value
                                $ObjName359
                            }
                            $PolTag359Dif = Compare-Object -ReferenceObject $RefTag359 -DifferenceObject $PolTag359Grps -PassThru
                            $PolTag359Cnt = $PolTag359Dif.Count
                            if ($PolTag359Cnt -eq '0'){
                                $Res359 = '1'} else {$Res359 = '2'}
                            }
		                    $Str359 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag359 + ';' + $Desc359 + ';' + $Res359 + ';' + $Using:CurntDateForm)
                            $Str359
                        }

                        #2.2.44 (L1) Ensure 'Replace a process level token' is set to 'LOCAL SERVICE, NETWORK SERVICE' (Scored) W2K16
                        $Tag360 = '2.2.44'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc360 = 'Ensure Replace a process level token is set to LOCAL SERVICE, NETWORK SERVICE (Scored)'
                            $Lvl360 = 'L1'
		                    $PassPol360 = $secpol | where{$_ -like "SeAssignPrimaryTokenPrivilege*"}
                            if (!$PassPol360){
                            $Res360 = '2'}
                            Else{
                            $AsigPrimTkn = $PassPol360 -split '= '
                            $SIDCodes360 = $AsigPrimTkn[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag360 = @('NT AUTHORITY\LOCAL SERVICE','NT AUTHORITY\NETWORK SERVICE')
                            $PolTag360Grps = foreach ($SIDCode360 in $SIDCodes360){
                                $SIDMod360 = $SIDCode360.Trim('*')
                                $objSID360 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod360)
                                $objUser360 = $objSID360.Translate( [System.Security.Principal.NTAccount])
                                $ObjName360 = $objUser360.Value
                                $ObjName360
                            }
                            $PolTag360Dif = Compare-Object -ReferenceObject $RefTag360 -DifferenceObject $PolTag360Grps -PassThru
                            $PolTag360Cnt = $PolTag360Dif.Count
                            if ($PolTag360Cnt -eq '0'){
                                $Res360 = '1'} else {$Res360 = '2'}
                            }
		                    $Str360 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag360 + ';' + $Desc360 + ';' + $Res360 + ';' + $Using:CurntDateForm)
                            $Str360
                        }

                        #2.2.45 (L1) Ensure 'Restore files and directories' is set to 'Administrators' (Scored) W2K16
                        $Tag361 = '2.2.45'
		                if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc361 = 'Ensure Restore files and directories is set to Administrators (Scored)'
                            $Lvl361 = 'L1'
                            $PassPol361 = $secpol | where{$_ -like "SeRestorePrivilege*"}
                            if (!$PassPol361){
                            $Res361 = '2'}
                            Else{
                            $RestPriv = $PassPol361 -split '= '
                            $SIDCodes361 = $RestPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag361 = @('BUILTIN\Administrators')
                            $PolTag361Grps = foreach ($SIDCode361 in $SIDCodes361){
                                $SIDMod361 = $SIDCode361.Trim('*')
                                $objSID361 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod361)
                                $objUser361 = $objSID361.Translate( [System.Security.Principal.NTAccount])
                                $ObjName361 = $objUser361.Value
                                $ObjName361
                            }
                            $PolTag361Dif = Compare-Object -ReferenceObject $RefTag361 -DifferenceObject $PolTag361Grps -PassThru
                            $PolTag361Cnt = $PolTag361Dif.Count
                            if ($PolTag361Cnt -eq '0'){
                                $Res361 = '1'} else {$Res361 = '2'}
                            }
		                    $Str361 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag361 + ';' + $Desc361 + ';' + $Res361 + ';' + $Using:CurntDateForm)
                            $Str361
                        }

                        #2.2.46 (L1) Ensure 'Shut down the system' is set to 'Administrators' (Scored) W2K16
                        $Tag362 = '2.2.46'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc362 = 'Ensure Shut down the system is set to Administrators (Scored)'
                            $Lvl362 = 'L1'
		                    $PassPol362 = $secpol | where{$_ -like "SeShutdownPrivilege*"}
                            if (!$PassPol362){
                            $Res362 = '2'}
                            Else{
                            $ShdwPriv = $PassPol362 -split '= '
                            $SIDCodes362 = $ShdwPriv[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag362 = @('BUILTIN\Administrators')
                            $PolTag362Grps = foreach ($SIDCode362 in $SIDCodes362){
                                $SIDMod362 = $SIDCode362.Trim('*')
                                $objSID362 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod362)
                                $objUser362 = $objSID362.Translate( [System.Security.Principal.NTAccount])
                                $ObjName362 = $objUser362.Value
                                $ObjName362
                            }
                            $PolTag362Dif = Compare-Object -ReferenceObject $RefTag362 -DifferenceObject $PolTag362Grps -PassThru
                            $PolTag362Cnt = $PolTag362Dif.Count
                            if ($PolTag362Cnt -eq '0'){
                                $Res362 = '1'} else {$Res362 = '2'}
                            }
                            $Str362 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag362 + ';' + $Desc362 + ';' + $Res362 + ';' + $Using:CurntDateForm)
                            $Str362
                        }

                        #2.2.47 (L1) Ensure 'Synchronize directory service data' is set to 'No One' (DC only) (Scored) W2K16
                        $Tag363 = '2.2.47'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
                            $Desc363 = 'Ensure Synchronize directory service data is set to No One (DC only) (Scored)'
                            $Lvl363 = 'L1'
                            $PassPol363 = $secpol | where{$_ -like "SeSyncAgentPrivilege*"}
                            if (!$PassPol363){
                                $Res37 = '1'}
	                        Else{
		                        $Res363 = '2'}
                            $Str363 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag363 + ';' + $Desc363 + ';' + $Res363 + ';' + $Using:CurntDateForm)
	                        $Str363
                        }

                        #2.2.48 (L1) Ensure 'Take ownership of files or other objects' is set to 'Administrators' (Scored) W2K16
                        $Tag364 = '2.2.48'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
                            $Desc364 = 'Ensure Take ownership of files or other objects is set to Administrators (Scored)'
                            $Lvl364 = 'L1'
		                    $PassPol364 = $secpol | where{$_ -like "SeTakeOwnershipPrivilege*"}
                            if (!$PassPol364){
                            $Res364 = '2'}
                            Else{
                            $TkOwnrShPri = $PassPol364 -split '= '
                            $SIDCodes364 = $TkOwnrShPri[1].Split(",") | Where-Object {$_.StartsWith('*S-')}
                            $RefTag364 = @('BUILTIN\Administrators')
                            $PolTag364Grps = foreach ($SIDCode364 in $SIDCodes364){
                                $SIDMod364 = $SIDCode364.Trim('*')
                                $objSID364 = New-Object System.Security.Principal.SecurityIdentifier ($SIDMod364)
                                $objUser364 = $objSID364.Translate( [System.Security.Principal.NTAccount])
                                $ObjName364 = $objUser364.Value
                                $ObjName364
                            }
                            $PolTag364Dif = Compare-Object -ReferenceObject $RefTag364 -DifferenceObject $PolTag364Grps -PassThru
                            $PolTag364Cnt = $PolTag364Dif.Count
                            if ($PolTag364Cnt -eq '0'){
                                $Res364 = '1'} else {$Res364 = '2'}
                            }
		                    $Str364 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag364 + ';' + $Desc364 + ';' + $Res364 + ';' + $Using:CurntDateForm)
                            $Str364
                        }

                        #==================================================================================================
                        #2.3 Security Options
                        #   This section contains recommendations for security options.
                        #==================================================================================================
                        #2.3.1 Accounts
                        #   This section contains recommendations related to default accounts.
                        #==================================================================================================

                        #2.3.1.1 (L1) Ensure 'Accounts: Administrator account status' is set to 'Disabled' (MS only) (Scored) W2K12R2 W2K16
                        $Tag50 = '2.3.1.1'
                        if ($SrvType -eq 'MS'){
                            $Count2++
                            $Desc50 = 'Ensure Accounts: Administrator account status is set to Disabled (Scored)'
                            $Lvl50 = 'L1'
		                    $AdmStatus = Get-WmiObject -Class Win32_UserAccount -Filter  "LocalAccount='True'" | Where-Object SID -Like '*-500' | Select-Object -ExpandProperty Disabled
                            if ($AdmStatus -eq 'True'){
                                 $Res50 = '1'} else {$Res50 = '2'}
		                    $Str50 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag50 + ';' + $Desc50 + ';' + $Res50 + ';' + $Using:CurntDateForm)
                            $Str50
                            }

                        #2.3.1.2 (L1) Ensure 'Accounts: Block Microsoft accounts' is set to 'Users can't add or log on with Microsoft accounts' (Scored) W2K12R2 W2K16
                        $Tag51 = '2.3.1.2'
                        $Count2++
                        $Desc51 = 'Ensure Accounts: Block Microsoft accounts is set to Users can not add or log on with Microsoft accounts (Scored)'
                        $Lvl51 = 'L1'
		                $BlckMsAcc = Get-ItemProperty -Path HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name NoConnectedUser -ErrorAction 'silentlycontinue'
                        if (!$BlckMsAcc){
                            $Res51 = '2'}
                        Else{
                        $PolRes51 = $BlckMsAcc | Select-Object -ExpandProperty NoConnectedUser
                        if ($PolRes51 -eq '3'){
                             $Res51 = '1'} else {$Res51 = '2'}
                             }
		                $Str51 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag51 + ';' + $Desc51 + ';' + $Res51 + ';' + $Using:CurntDateForm)
                        $Str51
                        
                        
                        #2.3.1.3 (L1) Ensure 'Accounts: Guest account status' is set to 'Disabled' (MS only) (Scored) W2K12R2 W2K16
                        $Tag52 = '2.3.1.3'
		                if ($SrvType -eq 'MS'){
                            $Count2++
                            $Desc52 = 'Ensure Accounts: Guest account status is set to Disabled (Scored)'
                            $Lvl52 = 'L1'
                            $GuestStatus = Get-WmiObject -Class Win32_UserAccount -Filter  "LocalAccount='True'" | Where-Object SID -Like '*-501' | Select-Object -ExpandProperty Disabled
                            if ($GuestStatus -eq 'True'){
                                 $Res52 = '1'} else {$Res52 = '2'}
		                    $Str52 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag52 + ';' + $Desc52 + ';' + $Res52 + ';' + $Using:CurntDateForm)
                            $Str52
                        }

                        #2.3.1.4 (L1) Ensure 'Accounts: Limit local account use of blank passwords to console logon only' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag53 = '2.3.1.4'
                        $Count2++
                        $Desc53 = 'Ensure Accounts: Limit local account use of blank passwords to console logon only is set to Enabled (Scored)'
                        $Lvl53 = 'L1'
		                $BlckPassUse = Get-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa -Name LimitBlankPasswordUse
                        if (!$BlckPassUse){
                            $Res53 = '2'}
                        Else{
                        $PolRes53 = $BlckPassUse | Select-Object -ExpandProperty LimitBlankPasswordUse
                        if ($PolRes53 -eq '1'){
                             $Res53 = '1'} else {$Res53 = '2'}
                             }
		                $Str53 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag53 + ';' + $Desc53 + ';' + $Res53 + ';' + $Using:CurntDateForm)
                        $Str53

                        #2.3.1.5 (L1) Configure 'Accounts: Rename administrator account' (Scored) W2K12R2 W2K16
                        $Tag54 = '2.3.1.5'
                        $Count2++
                        $Desc54 = 'Configure Accounts: Rename administrator account (Scored)'
                        $Lvl54 = 'L1'
		                $AdmRem = Get-WmiObject -Class Win32_UserAccount -Filter  "LocalAccount='True'" | Where-Object SID -Like '*-500' | Select-Object -ExpandProperty Name
                        if ($AdmRem -ne 'Administrator'){
                             $Res54 = '1'} else {$Res54 = '2'}
		                $Str54 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag54 + ';' + $Desc54 + ';' + $Res54 + ';' + $Using:CurntDateForm)
                        $Str54

                        #2.3.1.6 (L1) Configure 'Accounts: Rename guest account' (Scored) W2K12R2 W2K16
                        $Tag55 = '2.3.1.6'
		                $Count2++
                        $Desc55 = 'Configure Accounts: Rename guest account (Scored)'
                        $Lvl55 = 'L1'
                        $GuestRem = Get-WmiObject -Class Win32_UserAccount -Filter  "LocalAccount='True'" | Where-Object SID -Like '*-501' | Select-Object -ExpandProperty Name
                        if ($GuestRem -ne 'Guest'){
                             $Res55 = '1'} else {$Res55 = '2'}
		                $Str55 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag55 + ';' + $Desc55 + ';' + $Res55 + ';' + $Using:CurntDateForm)
                        $Str55

                        #================================================================================================================
                        #2.3.2 Audit
                        #   This section contains recommendations related to auditing controls.
                        #================================================================================================================

                        #2.3.2.1 (L1) Ensure 'Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag56 = '2.3.2.1'
                        $Count2++
                        $Desc56 = 'Ensure Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings is set to Enabled (Scored)'
                        $Lvl56 = 'L1'
		                $AuPolNoAppl = Get-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa -Name scenoapplylegacyauditpolicy -ErrorAction 'silentlycontinue'
                        if (!$AuPolNoAppl){
                            $Res56 = '2'}
                        Else{
                        $PolRes56 = $AuPolNoAppl | Select-Object -ExpandProperty scenoapplylegacyauditpolicy
                        if ($PolRes56 -eq '1'){
                             $Res56 = '1'} else {$Res56 = '2'}
                             }
		                $Str56 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag56 + ';' + $Desc56 + ';' + $Res56 + ';' + $Using:CurntDateForm)
                        $Str56

                        #2.3.2.2 (L1) Ensure 'Audit: Shut down system immediately if unable to log security audits' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag57 = '2.3.2.2'
                        $Count2++
                        $Desc57 = 'Ensure Audit: Shut down system immediately if unable to log security audits is set to Disabled (Scored)'
                        $Lvl57 = 'L1'
		                $CrashAud = Get-ItemProperty -Path HKLM:\System\CurrentControlSet\Control\Lsa -Name crashonauditfail
                        if (!$CrashAud){
                            $Res57 = '2'}
                        Else{
                        $PolRes57 = $CrashAud | Select-Object -ExpandProperty crashonauditfail
                        if ($PolRes57 -eq '0'){
                             $Res57 = '1'} else {$Res57 = '2'}
                             }
		                $Str57 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag57 + ';' + $Desc57 + ';' + $Res57 + ';' + $Using:CurntDateForm)
                        $Str57

                        #=========================================================================================================================
                        #2.3.3 DCOM
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=========================================================================================================================
                        #2.3.4 Devices
                        #This section contains recommendations related to managing devices.
                        #=========================================================================================================================

                        #2.3.4.1 (L1) Ensure 'Devices: Allowed to format and eject removable media' is set to 'Administrators' (Scored) W2K12R2 W2K16
                        $Tag58 = '2.3.4.1'
                        $Count2++
                        $Desc58 = 'Ensure Devices: Allowed to format and eject removable media is set to Administrators (Scored)'
                        $Lvl58 = 'L1'
		                $AllwRemMed = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name AllocateDASD -ErrorAction 'silentlycontinue'
                        if (!$AllwRemMed){
                            $Res58 = '2'}
                        Else{
                        $PolRes58 = $AllwRemMed | Select-Object -ExpandProperty AllocateDASD
                        if ($PolRes58 -eq '0'){
                             $Res58 = '1'} else {$Res58 = '2'}
                             }
		                $Str58 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag58 + ';' + $Desc58 + ';' + $Res58 + ';' + $Using:CurntDateForm)
                        $Str58

                        #2.3.4.2 (L1) Ensure 'Devices: Prevent users from installing printer drivers' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag59 = '2.3.4.2'
		                $Count2++
                        $Desc59 = 'Ensure Devices: Prevent users from installing printer drivers is set to Enabled (Scored)'
                        $Lvl59 = 'L1'
                        $AddPrtDrv = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Print\Providers\LanMan Print Services\Servers' -Name AddPrinterDrivers -ErrorAction 'silentlycontinue'
                        if (!$AddPrtDrv){
                            $Res59 = '2'}
                        Else{
                        $PolRes59 = $AddPrtDrv | Select-Object -ExpandProperty AddPrinterDrivers
                        if ($PolRes59 -eq '1'){
                             $Res59 = '1'} else {$Res59 = '2'}
                             }
		                $Str59 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag59 + ';' + $Desc59 + ';' + $Res59 + ';' + $Using:CurntDateForm)
                        $Str59

                        #=========================================================================================================================
                        #2.3.5 Domain controller
                        #   This section contains recommendations related to domain controllers.
                        #=========================================================================================================================
                        #2.3.5.1 (L1) Ensure 'Domain controller: Allow server operators to schedule tasks' is set to 'Disabled' (DC only) (Scored) W2K12R2 W2K16
                        $Tag60 = '2.3.5.1'
                        if ($SrvType -eq 'DC'){
	                        $Count2++
	                        $Desc60 = 'Ensure Domain controller: Allow server operators to schedule tasks is set to Disabled (DC only) (Scored)'
	                        $Lvl60 = 'L1'
	                        $SubmtCtrl = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name SubmitControl -ErrorAction 'silentlycontinue'
	                        if (!$SubmtCtrl){
		                        $Res60 = '1'}
		                        Else{
			                        $PolRes60 = $SubmtCtrl | Select-Object -ExpandProperty SubmitControl
			                        if ($PolRes60 -eq '0'){
				                        $Res60 = '1'} else {$Res60 = '2'}
				                        }
                        $Str60 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag60 + ';' + $Desc60 + ';' + $Res60 + ';' + $Using:CurntDateForm)
                        $Str60
                        }
                        
                        #=========================================================================================================================
                        #2.3.5.2 (L1) Ensure 'Domain controller: LDAP server signing requirements' is set to 'Require signing' (DC only) (Scored) W2K12R2 W2K16
                        $Tag61 = '2.3.5.2'
                        if ($SrvType -eq 'DC'){
	                        $Count2++
	                        $Desc61 = 'Ensure Domain controller: LDAP server signing requirements is set to Require signing (DC only) (Scored)'
	                        $Lvl61 = 'L1'
	                        $LDAPSrvIntgty = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\NTDS\Parameters' -Name ldapserverintegrity -ErrorAction 'silentlycontinue'
	                        if (!$LDAPSrvIntgty){
		                        $Res61 = '2'}
		                        Else{
			                        $PolRes61 = $LDAPSrvIntgty | Select-Object -ExpandProperty ldapserverintegrity
			                        if ($PolRes61 -eq '2'){
				                        $Res61 = '1'} else {$Res61 = '2'}
				                        }
                        $Str61 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag61 + ';' + $Desc61 + ';' + $Res61 + ';' + $Using:CurntDateForm)
                        $Str61
                        }
                        
                        #=========================================================================================================================
                        #2.3.5.3 (L1) Ensure 'Domain controller: Refuse machine account password changes' is set to 'Disabled' (DC only) (Scored) W2K12R2 W2K16
                        $Tag62 = '2.3.5.3'
                        if ($SrvType -eq 'DC'){
	                        $Count2++
	                        $Desc62 = 'Ensure Domain controller: Refuse machine account password changes is set to Disabled (DC only) (Scored)'
	                        $Lvl62 = 'L1'
	                        $RefPwdChng = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Netlogon\Parameters' -Name RefusePasswordChange -ErrorAction 'silentlycontinue'
	                        if (!$RefPwdChng){
		                        $Res62 = '2'}
		                        Else{
			                        $PolRes62 = $RefPwdChng | Select-Object -ExpandProperty RefusePasswordChange
			                        if ($PolRes62 -eq '0'){
				                        $Res62 = '1'} else {$Res62 = '2'}
				                        }
                        $Str62 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag62 + ';' + $Desc62 + ';' + $Res62 + ';' + $Using:CurntDateForm)
                        $Str62
                        }
                        
                        #=========================================================================================================================
                        #2.3.6 Domain member
                        #   This section contains recommendations related to domain membership.
                        #=========================================================================================================================

                        #2.3.6.1 (L1) Ensure 'Domain member: Digitally encrypt or sign secure channel data (always)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag63 = '2.3.6.1'
		                $Count2++
                        $Desc63 = 'Ensure Domain member: Digitally encrypt or sign secure channel data (always) is set to Enabled (Scored)'
                        $Lvl63 = 'L1'
                        $AddPrtDrv = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name requiresignorseal -ErrorAction 'silentlycontinue'
                        if (!$AddPrtDrv){
                            $Res63 = '2'}
                        Else{
                        $PolRes63 = $AddPrtDrv | Select-Object -ExpandProperty requiresignorseal
                        if ($PolRes63 -eq '1'){
                             $Res63 = '1'} else {$Res63 = '2'}
                             }
		                $Str63 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag63 + ';' + $Desc63 + ';' + $Res63 + ';' + $Using:CurntDateForm)
                        $Str63

                        #2.3.6.2 (L1) Ensure 'Domain member: Digitally encrypt secure channel data (when possible)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag64 = '2.3.6.2'
                        $Count2++
                        $Desc64 = 'Ensure Domain member: Digitally encrypt secure channel data (when possible) is set to Enabled (Scored)'
                        $Lvl64 = 'L1'
		                $SealSecCh = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name sealsecurechannel -ErrorAction 'silentlycontinue'
                        if (!$SealSecCh){
                            $Res64 = '2'}
                        Else{
                        $PolRes64 = $SealSecCh | Select-Object -ExpandProperty sealsecurechannel
                        if ($PolRes64 -eq '1'){
                             $Res64 = '1'} else {$Res64 = '2'}
                             }
		                $Str64 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag64 + ';' + $Desc64 + ';' + $Res64 + ';' + $Using:CurntDateForm)
                        $Str64

                        #2.3.6.3 (L1) Ensure 'Domain member: Digitally sign secure channel data (when possible)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag65 = '2.3.6.3'
                        $Count2++
                        $Desc65 = 'Ensure Domain member: Digitally sign secure channel data (when possible) is set to Enabled (Scored)'
                        $Lvl65 = 'L1'
		                $SignSecCh = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name signsecurechannel -ErrorAction 'silentlycontinue'
                        if (!$SignSecCh){
                            $Res65 = '2'}
                        Else{
                        $PolRes65 = $SignSecCh | Select-Object -ExpandProperty signsecurechannel
                        if ($PolRes65 -eq '1'){
                             $Res65 = '1'} else {$Res65 = '2'}
                             }
		                $Str65 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag65 + ';' + $Desc65 + ';' + $Res65 + ';' + $Using:CurntDateForm)
                        $Str65

                        #2.3.6.4 (L1) Ensure 'Domain member: Disable machine account password changes' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag66 = '2.3.6.4'
                        $Count2++
                        $Desc66 = 'Ensure Domain member: Disable machine account password changes is set to Disabled (Scored)'
                        $Lvl66 = 'L1'
		                $DisPswChg = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name disablepasswordchange -ErrorAction 'silentlycontinue'
                        if (!$DisPswChg){
                            $Res66 = '2'}
                        Else{
                        $PolRes66 = $DisPswChg | Select-Object -ExpandProperty disablepasswordchange
                        if ($PolRes66 -eq '0'){
                             $Res66 = '1'} else {$Res66 = '2'}
                             }
		                $Str66 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag66 + ';' + $Desc66 + ';' + $Res66 + ';' + $Using:CurntDateForm)
                        $Str66

                        #2.3.6.5 (L1) Ensure 'Domain member: Maximum machine account password age' is set to '30 or fewer days, but not 0' (Scored) W2K12R2 W2K16
                        $Tag67 = '2.3.6.5'
                        $Count2++
                        $Desc67 = 'Ensure Domain member: Maximum machine account password age is set to 30 or fewer days but not 0 (Scored)'
                        $Lvl67 = 'L1'
		                $MaxMchPswAg = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name MaximumPasswordAge
                        if (!$MaxMchPswAg){
                            $Res67 = '2'}
                        Else{
                        $MxPwAge = $MaxMchPswAg | Select-Object -ExpandProperty MaximumPasswordAge
                        $PolRes67 = $MxPwAg -as [int]
                        if ($PolRes67 -ge '30'){
                             $Res67 = '1'} else {$Res67 = '2'}
                             }
		                $Str67 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag67 + ';' + $Desc67 + ';' + $Res67 + ';' + $Using:CurntDateForm)
                        $Str67

                        #2.3.6.6 (L1) Ensure 'Domain member: Require strong (Windows 2000 or later) session key' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag68 = '2.3.6.6'
                        $Count2++
                        $Desc68 = 'Ensure Domain member: Require strong (Windows 2000 or later) session key is set to Enabled (Scored)'
                        $Lvl68 = 'L1'		
		                $ReqStrgKey = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Netlogon\Parameters' -Name requirestrongkey
                        if (!$ReqStrgKey){
                            $Res68 = '2'}
                        Else{
                        $PolRes68 = $ReqStrgKey | Select-Object -ExpandProperty requirestrongkey
                        if ($PolRes68 -eq '1'){
                             $Res68 = '1'} else {$Res68 = '2'}
                             }
		                $Str68 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag68 + ';' + $Desc68 + ';' + $Res68 + ';' + $Using:CurntDateForm)
                        $Str68

                        #=====================================================================================================================
                        #2.3.7 Interactive logon
                        #   This section contains recommendations related to interactive logons.
                        #=====================================================================================================================

                        #2.3.7.1 (L1) Ensure 'Interactive logon: Do not display last user name' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag69 = '2.3.7.1'
                        $Count2++
                        $Desc69 = 'Ensure Interactive logon: Do not display last user name is set to Enabled (Scored)'
                        $Lvl69 = 'L1'
		                $NotDisLstUsr = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DontDisplayLastUserName
                        if (!$NotDisLstUsr){
                            $Res69 = '2'}
                        Else{
                        $PolRes69 = $NotDisLstUsr | Select-Object -ExpandProperty DontDisplayLastUserName
                        if ($PolRes69 -eq '1'){
                             $Res69 = '1'} else {$Res69 = '2'}
                             }
		                $Str69 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag69 + ';' + $Desc69 + ';' + $Res69 + ';' + $Using:CurntDateForm)
                        $Str69

                        #2.3.7.2 (L1) Ensure 'Interactive logon: Do not require CTRL+ALT+DEL' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag70 = '2.3.7.2'
                        $Count2++
                        $Desc70 = 'Ensure Interactive logon: Do not require CTRL+ALT+DEL is set to Disabled (Scored)'
                        $Lvl70 = 'L1'
		                $DisCAD = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DisableCAD -ErrorAction 'silentlycontinue'
                        if (!$DisCAD){
                            $Res70 = '2'}
                        Else{
                        $PolRes70 = $DisCAD | Select-Object -ExpandProperty DisableCAD 
                        if ($PolRes70 -eq '0'){
                             $Res70 = '1'} else {$Res70 = '2'}
                             }
		                $Str70 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag70 + ';' + $Desc70 + ';' + $Res70 + ';' + $Using:CurntDateForm)
                        $Str70

                        #2.3.7.3 (L1) Ensure 'Interactive logon: Machine inactivity limit' is set to '900 or fewer second(s), but not 0' (Scored) W2K12R2 W2K16
                        $Tag71 = '2.3.7.3'
                        $Count2++
                        $Desc71 = 'Ensure Interactive logon: Machine inactivity limit is set to 900 or fewer second(s), but not 0 (Scored)'
                        $Lvl71 = 'L1'
		                $InacTimOutSec = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name InactivityTimeoutSecs -ErrorAction 'silentlycontinue'
                        if (!$InacTimOutSec){
                            $Res71 = '2'}
                        Else{
                        $InTimeOut = $InacTimOutSec | Select-Object -ExpandProperty InactivityTimeoutSecs
                        $PolRes71 = $InTimeOut -as [int]
		                if (($PolRes71 -gt '0') -and ($PolRes71 -le '900')) {
                             $Res71 = '1'} else {$Res71 = '2'}
                             }
		                $Str71 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag71 + ';' + $Desc71 + ';' + $Res71 + ';' + $Using:CurntDateForm)
                        $Str71

                        #2.3.7.4 (L1) Configure 'Interactive logon: Message text for users attempting to log on' (Scored) W2K12R2 W2K16
                        $Tag72 = '2.3.7.4'
                        $Count2++
                        $Desc72 = 'Configure Interactive logon: Message text for users attempting to log on (Scored)'
                        $Lvl72 = 'L1'
		                $LglNotTxt = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name LegalNoticeText
                        $PolRes72 = $LglNotTxt | Select-Object -ExpandProperty LegalNoticeText
                        if ($PolRes72 -eq '') {$Res72 = '2'} else {$Res72 = '1'}
		                $Str72 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag72 + ';' + $Desc72 + ';' + $Res72 + ';' + $Using:CurntDateForm)
                        $Str72

                        #2.3.7.5 (L1) Configure 'Interactive logon: Message title for users attempting to log on' (Scored) W2K12R2 W2K16
                        $Tag73 = '2.3.7.5'
                        $Count2++
                        $Desc73 = 'Configure Interactive logon: Message title for users attempting to log on (Scored)'
                        $Lvl73 = 'L1'
		                $LglNotCapt = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name LegalNoticeCaption
                        $PolRes73 = $LglNotCapt | Select-Object -ExpandProperty LegalNoticeCaption
                        if ($PolRes73 -eq '') {$Res73 = '2'} else {$Res73 = '1'}
		                $Str73 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag73 + ';' + $Desc73 + ';' + $Res73 + ';' + $Using:CurntDateForm)
                        $Str73

                        #2.3.7.6 (L2) Ensure 'Interactive logon: Number of previous logons to cache (in case domain controller is not available)' is set to '4 or fewer logon(s)' (MS only) (Scored) W2K12R2 W2K16
                        $Tag74 = '2.3.7.6'
                        if ($SrvType -eq 'MS'){
                            $Count2++
                            $Desc74 = 'Ensure Interactive logon: Number of previous logons to cache (in case domain controller is not available) is set to 4 or fewer logon(s) (MS only) (Scored)'
                            $Lvl74 = 'L2'
		                    $CachLogCount = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name cachedlogonscount -ErrorAction 'silentlycontinue'
                            if (!$CachLogCount){
                                $Res74 = '2'}
                            Else{
                            $CshLogonCnt = $CachLogCount | Select-Object -ExpandProperty cachedlogonscount
                            $PolRes74 = $CshLogonCnt -as [int]
		                    if (($PolRes74 -gt '0') -and ($PolRes74 -le '4')) {
                                $Res74 = '1'} else {$Res74 = '2'}
                                }
		                $Str74 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag74 + ';' + $Desc74 + ';' + $Res74 + ';' + $Using:CurntDateForm)
                        $Str74
                        }

                        #2.3.7.7 (L1) Ensure 'Interactive logon: Prompt user to change password before expiration' is set to 'between 5 and 14 days' (Scored) W2K12R2 W2K16
                        $Tag75 = '2.3.7.7'
                        $Count2++
		                $Desc75 = 'Ensure Interactive logon: Prompt user to change password before expiration is set to between 5 and 14 days (Scored)'
                        $Lvl75 = 'L1'
		                $PwdExpWarn = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name passwordexpirywarning -ErrorAction 'silentlycontinue'
                        if (!$PwdExpWarn){
                            $Res75 = '2'}
                        Else{
                        $PsswrdExpWarn = $PwdExpWarn | Select-Object -ExpandProperty passwordexpirywarning
                        $PolRes75 = $PsswrdExpWarn -as [int]
		                if (($PolRes75 -ge '5') -and ($PolRes75 -le '14')) {
                             $Res75 = '1'} else {$Res75 = '2'}
                             }
		                $Str75 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag75 + ';' + $Desc75 + ';' + $Res75 + ';' + $Using:CurntDateForm)
                        $Str75

                        #2.3.7.8 (L1) Ensure 'Interactive logon: Require Domain Controller Authentication to unlock workstation' is set to 'Enabled' (MS only) (Scored) W2K12R2 W2K16
                        $Tag76 = '2.3.7.8'
                        if ($SrvType -eq 'MS'){
                            $Count2++
		                    $Desc76 = 'Ensure Interactive logon: Require Domain Controller Authentication to unlock workstation is set to Enabled (MS only) (Scored)'
                            $Lvl76 = 'L1'
		                    $FrcUnlckLog = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name ForceUnlockLogon -ErrorAction 'silentlycontinue'
                            if (!$FrcUnlckLog){
                                $Res76 = '2'}
                            Else{
                            $PolRes76 = $FrcUnlckLog | Select-Object -ExpandProperty ForceUnlockLogon
                            if ($PolRes76 -eq '1') {
                                $Res76 = '1'} else {$Res76 = '2'}
                                }
		                    $Str76 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag76 + ';' + $Desc76 + ';' + $Res76 + ';' + $Using:CurntDateForm)
                            $Str76
                            }

                        #2.3.7.9 (L1) Ensure 'Interactive logon: Smart card removal behavior' is set to 'Lock Workstation' or higher (Scored) W2K12R2 W2K16
                        $Tag77 = '2.3.7.9'
                        $Count2++
		                $Desc77 = 'Ensure Interactive logon: Smart card removal behavior is set to Lock Workstation or higher (Scored)'
                        $Lvl77 = 'L1'
		                $ScrMovOpt = Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name scremoveoption
                        if (!$ScrMovOpt){
                            $Res77 = '2'}
                        Else{
                        $SCRemLckWrks = $ScrMovOpt | Select-Object -ExpandProperty scremoveoption
                        $PolRes77 = $SCRemLckWrks -as [int]
		                if (($PolRes77 -gt '0') -and ($PolRes77 -le '3')) {
                            $Res77 = '1'} else {$Res77 = '2'}
                            }
		                $Str77 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag77 + ';' + $Desc77 + ';' + $Res77 + ';' + $Using:CurntDateForm)
                        $Str77

                        #======================================================================================================================
                        #2.3.8 Microsoft network client
                        #   This section contains recommendations related to configuring the Microsoft network client.
                        #======================================================================================================================

                        #2.3.8.1 (L1) Ensure 'Microsoft network client: Digitally sign communications (always)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag78 = '2.3.8.1'
                        $Count2++
		                $Desc78 = 'Ensure Microsoft network client: Digitally sign communications (always) is set to Enabled (Scored)'
                        $Lvl78 = 'L1'
		                $ReqSecSign = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanmanWorkstation\Parameters' -Name RequireSecuritySignature -ErrorAction 'silentlycontinue'
                        if (!$ReqSecSign){
                            $Res78 = '2'}
                        Else{
                        $PolRes78 = $ReqSecSign | Select-Object -ExpandProperty RequireSecuritySignature
                        if ($PolRes78 -eq '1') {
                            $Res78 = '1'} else {$Res78 = '2'}
                            }
		                $Str78 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag78 + ';' + $Desc78 + ';' + $Res78 + ';' + $Using:CurntDateForm)
                        $Str78

                        #2.3.8.2 (L1) Ensure 'Microsoft network client: Digitally sign communications (if server agrees)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag79 = '2.3.8.2'
                        $Count2++
		                $Desc79 = 'Ensure Microsoft network client: Digitally sign communications (if server agrees) is set to Enabled (Scored)'
                        $Lvl79 = 'L1'
		                $EnSecSign = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanmanWorkstation\Parameters' -Name EnableSecuritySignature -ErrorAction 'silentlycontinue'
                        if (!$EnSecSign){
                            $Res79 = '2'}
                        Else{
                        $PolRes79 = $EnSecSign | Select-Object -ExpandProperty EnableSecuritySignature
                        if ($PolRes79 -eq '1') {
                            $Res79 = '1'} else {$Res79 = '2'}
                            }
		                $Str79 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag79 + ';' + $Desc79 + ';' + $Res79 + ';' + $Using:CurntDateForm)
                        $Str79

                        #2.3.8.3 (L1) Ensure 'Microsoft network client: Send unencrypted password to third-party SMB servers' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag80 = '2.3.8.3'
                        $Count2++
		                $Desc80 = 'Ensure Microsoft network client: Send unencrypted password to third-party SMB servers is set to Disabled (Scored)'
                        $Lvl80 = 'L1'
		                $EnPlainTxtPass = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanmanWorkstation\Parameters' -Name EnablePlainTextPassword -ErrorAction 'silentlycontinue'
                        if (!$EnPlainTxtPass){
                            $Res80 = '2'}
                        Else{
                        $PolRes80 = $EnPlainTxtPass | Select-Object -ExpandProperty EnablePlainTextPassword
                        if ($PolRes80 -eq '0') {
                            $Res80 = '1'} else {$Res80 = '2'}
                            }
		                $Str80 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag80 + ';' + $Desc80 + ';' + $Res80 + ';' + $Using:CurntDateForm)
                        $Str80

                        #============================================================================================================================
                        #2.3.9 Microsoft network server
                        #   This section contains recommendations related to configuring the Microsoft network server.
                        #============================================================================================================================

                        #2.3.9.1 (L1) Ensure 'Microsoft network server: Amount of idle time required before suspending session' is set to '15 or fewer minute(s), but not 0' (Scored) W2K12R2 W2K16
                        $Tag81 = '2.3.9.1'
                        $Count2++
		                $Desc81 = 'Ensure Microsoft network server: Amount of idle time required before suspending session is set to 15 or fewer minute(s) but not 0 (Scored)'
                        $Lvl81 = 'L1'
		                $AutoDiscnn = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name autodisconnect -ErrorAction 'silentlycontinue'
                        if (!$AutoDiscnn){
                            $Res81 = '2'}
                        Else{
                        $AutoDcntIdle = $AutoDiscnn | Select-Object -ExpandProperty autodisconnect
                        $PolRes81 = $AutoDcntIdle -as [int]
		                if (($PolRes81 -gt '0') -and ($PolRes81 -le '15')) {
                            $Res81 = '1'} else {$Res81 = '2'}
                            }
		                $Str81 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag81 + ';' + $Desc81 + ';' + $Res81 + ';' + $Using:CurntDateForm)
                        $Str81

                        #2.3.9.2 (L1) Ensure 'Microsoft network server: Digitally sign communications (always)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag82 = '2.3.9.2'
                        $Count2++
		                $Desc82 = 'Ensure Microsoft network server: Digitally sign communications (always) is set to Enabled (Scored)'
                        $Lvl82 = 'L1'
		                $ReqSignPass = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name requiresecuritysignature -ErrorAction 'silentlycontinue'
                        if (!$ReqSignPass){
                            $Res82 = '2'}
                        Else{
                        $PolRes82 = $ReqSignPass | Select-Object -ExpandProperty requiresecuritysignature
                        if ($PolRes82 -eq '1') {
                            $Res82 = '1'} else {$Res82 = '2'}
                            }
		                $Str82 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag82 + ';' + $Desc82 + ';' + $Res82 + ';' + $Using:CurntDateForm)
                        $Str82

                        #2.3.9.3 (L1) Ensure 'Microsoft network server: Digitally sign communications (if client agrees)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag83 = '2.3.9.3'
                        $Count2++
		                $Desc83 = 'Ensure Microsoft network server: Digitally sign communications (if client agrees) is set to Enabled (Scored)'
                        $Lvl83 = 'L1'
		                $EnbSecSign = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name enablesecuritysignature -ErrorAction 'silentlycontinue'
                        if (!$EnbSecSign){
                            $Res83 = '2'}
                        Else{
                        $PolRes83 = $EnbSecSign | Select-Object -ExpandProperty enablesecuritysignature
                        if ($PolRes83 -eq '1') {
                            $Res83 = '1'} else {$Res83 = '2'}
                            }
		                $Str83 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag83 + ';' + $Desc83 + ';' + $Res83 + ';' + $Using:CurntDateForm)
                        $Str83

                        #2.3.9.4 (L1) Ensure 'Microsoft network server: Disconnect clients when logon hours expire' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag84 = '2.3.9.4'
                        $Count2++
		                $Desc84 = 'Ensure Microsoft network server: Disconnect clients when logon hours expire is set to Enabled (Scored)'
                        $Lvl84 = 'L1'
		                $EnbForcLogOff = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name enableforcedlogoff -ErrorAction 'silentlycontinue'
                        if (!$EnbForcLogOff){
                            $Res84 = '2'}
                        Else{
                        $PolRes84 = $EnbForcLogOff | Select-Object -ExpandProperty enableforcedlogoff
                        if ($PolRes84 -eq '1') {
                            $Res84 = '1'} else {$Res84 = '2'}
                            }
		                $Str84 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag84 + ';' + $Desc84 + ';' + $Res84 + ';' + $Using:CurntDateForm)
                        $Str84

                        #2.3.9.5 (L1) Ensure 'Microsoft network server: Server SPN target name validation level' is set to 'Accept if provided by client' or higher (MS only) (Scored) W2K12R2 W2K16
                        $Tag85 = '2.3.9.5'
                        if ($SrvType -eq 'MS'){
                            $Count2++
		                    $Desc85 = 'Ensure Microsoft network server: Server SPN target name validation level is set to Accept if provided by client or higher (Scored)'
                            $Lvl85 = 'L1'
		                    $EnbForcLogOff = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name SMBServerNameHardeningLevel -ErrorAction 'silentlycontinue'
                            if (!$EnbForcLogOff){
                                $Res85 = '2'}
                            Else{
                            $PolRes85 = $EnbForcLogOff | Select-Object -ExpandProperty SMBServerNameHardeningLevel
                            if (($PolRes85 -gt '0') -and ($PolRes85 -le '2')) {
                                $Res85 = '1'} else {$Res85 = '2'}
                                }
		                    $Str85 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag85 + ';' + $Desc85 + ';' + $Res85 + ';' + $Using:CurntDateForm)
                            $Str85
                        }

                        #============================================================================================================================================
                        #2.3.10 Network access
                        #   This section contains recommendations related to network access.
                        #============================================================================================================================================

                        #2.3.10.1 (L1) Ensure 'Network access: Allow anonymous SID/Name translation' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag86 = '2.3.10.1'
                        $Count2++
		                $Desc86 = 'Ensure Network access: Allow anonymous SID/Name translation is set to Disabled (Scored)'
                        $Lvl86 = 'L1'
		                $PassPol86 = $secpol | where{$_ -like "LSAAnonymousNameLookup*"}
                        $AllwAnonSID = $PassPol86 -split '= '
                        if ($AllwAnonSID[1] -eq '0'){
                            $Res86 = '1'} else {$Res86 = '2'}
		                $Str86 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag86 + ';' + $Desc86 + ';' + $Res86 + ';' + $Using:CurntDateForm)
                        $Str86

                        #2.3.10.2 (L1) Ensure 'Network access: Do not allow anonymous enumeration of SAM accounts' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag87 = '2.3.10.2'
                        if ($SrvType -eq 'MS'){
                            $Count2++
		                    $Desc87 = 'Ensure Network access: Do not allow anonymous enumeration of SAM accounts is set to Enabled (Scored)'
                            $Lvl87 = 'L1'
		                    $RestAnymSAM = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name RestrictAnonymousSAM -ErrorAction 'silentlycontinue'
                            if (!$RestAnymSAM){
                                $Res87 = '2'}
                            Else{
                            $PolRes87 = $RestAnymSAM | Select-Object -ExpandProperty RestrictAnonymousSAM
                            if ($PolRes87 -eq '1') {
                                $Res87 = '1'} else {$Res87 = '2'}
                                }
		                    $Str87 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag87 + ';' + $Desc87 + ';' + $Res87 + ';' + $Using:CurntDateForm)
                            $Str87
                        }

                        #2.3.10.3 (L1) Ensure 'Network access: Do not allow anonymous enumeration of SAM accounts and shares' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag88 = '2.3.10.3'
                        if ($SrvType -eq 'MS'){
                            $Count2++
		                    $Desc88 = 'Ensure Network access: Do not allow anonymous enumeration of SAM accounts is set to Enabled (Scored)'
                            $Lvl88 = 'L1'
		                    $RestAnym = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name RestrictAnonymous -ErrorAction 'silentlycontinue'
                            if (!$RestAnym){
                                $Res88 = '2'}
                            Else{
                            $PolRes88 = $RestAnym | Select-Object -ExpandProperty RestrictAnonymous
                            if ($PolRes88 -eq '1') {
                                $Res88 = '1'} else {$Res88 = '2'}
                                }
		                    $Str88 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag88 + ';' + $Desc88 + ';' + $Res88 + ';' + $Using:CurntDateForm)
                            $Str88
                        }

                        #2.3.10.4 (L2) Ensure 'Network access: Do not allow storage of passwords and credentials for network authentication' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag89 = '2.3.10.4'
                        $Count2++
		                $Desc89 = 'Ensure Network access: Do not allow storage of passwords and credentials for network authentication is set to Enabled (Scored)'
                        $Lvl89 = 'L1'
		                $DisbDomCred = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name disabledomaincreds -ErrorAction 'silentlycontinue'
                        if (!$DisbDomCred){
                            $Res89 = '2'}
                        Else{
                        $PolRes89 = $DisbDomCred | Select-Object -ExpandProperty disabledomaincreds
                        if ($PolRes89 -eq '1') {
                            $Res89 = '1'} else {$Res89 = '2'}
                            }
		                $Str89 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag89 + ';' + $Desc89 + ';' + $Res89 + ';' + $Using:CurntDateForm)
                        $Str89

                        #2.3.10.5 (L1) Ensure 'Network access: Let Everyone permissions apply to anonymous users' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag90 = '2.3.10.5'
                        $Count2++
		                $Desc90 = 'Ensure Network access: Let Everyone permissions apply to anonymous users is set to Disabled (Scored)'
                        $Lvl90 = 'L1'
		                $EvryInclAnym = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Lsa' -Name EveryoneIncludesAnonymous -ErrorAction 'silentlycontinue'
                        if (!$EvryInclAnym){
                            $Res90 = '2'}
                        Else{
                        $PolRes90 = $EvryInclAnym | Select-Object -ExpandProperty EveryoneIncludesAnonymous
                        if ($PolRes90 -eq '1') {
                            $Res90 = '1'} else {$Res90 = '2'}
                            }
		                $Str90 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag90 + ';' + $Desc90 + ';' + $Res90 + ';' + $Using:CurntDateForm)
                        $Str90

                        #2.3.10.6 (L1) Configure 'Network access: Named Pipes that can be accessed anonymously' (MS only) (Scored) W2K12R2
                        $Tag91 = '2.3.10.6'
                        if (($OSVersion -eq 'W2K12R2') -and ($SrvType -eq 'MS')){
                            $Count2++
		                    $Desc91 = 'Configure Network access: Named Pipes that can be accessed anonymously (Scored)'
                            $Lvl91 = 'L1'
		                    $SrvcState = get-service -Name Browser | Select-Object -ExpandProperty Status
                            $NullSesPipe = Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\LanManServer\Parameters' -Name NullSessionPipes -ErrorAction 'silentlycontinue'
                            if($SrvcState -eq 'Running'){
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res91 = '2'}
                                Else{
                                $PolRes91 = $NullSesPipe | Select-Object -ExpandProperty NullSessionPipes
                                    if ($PolRes91 -eq 'BROWSER') {
                                        $Res91 = '1'} else {$Res91 = '2'}
                                        }
                                }
                            Else{
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res91 = '1'} else {$Res91 = '2'}
                                    }
		                    $Str91 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag91 + ';' + $Desc91 + ';' + $Res91 + ';' + $Using:CurntDateForm)
                            $Str91
                        }

                        #2.3.10.6 (L1) Configure 'Network access: Named Pipes that can be accessed anonymously' (DC only) (Scored) W2K16
                        $Tag365 = '2.3.10.6'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'DC')){
                            $Count2++
		                    $Desc365 = 'Configure Network access: Named Pipes that can be accessed anonymously (DC only) (Scored)'
                            $Lvl365 = 'L1'
		                    $SrvcState = get-service -Name Browser | Select-Object -ExpandProperty Status
                            $NullSesPipe = Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\LanManServer\Parameters' -Name NullSessionPipes -ErrorAction 'silentlycontinue'
                            if($SrvcState -eq 'Running'){
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res365 = '2'}
                                Else{
                                $PolRes365 = $NullSesPipe | Select-Object -ExpandProperty NullSessionPipes
                                    if ($PolRes365 -eq 'LSARPC, NETLOGON, SAMR, BROWSER') {
                                        $Res365 = '1'} else {$Res365 = '2'}
                                        }
                                }
                            Else{
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res365 = '1'} else {$Res365 = '2'}
                                    }
		                    $Str365 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag365 + ';' + $Desc365 + ';' + $Res365 + ';' + $Using:CurntDateForm)
                            $Str365
                        }

                        #2.3.10.7 (L1) Ensure 'Network access: Remotely accessible registry paths' (Scored) W2K12R2
                        $Tag92 = '2.3.10.7'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
		                    $Desc92 = 'Ensure Network access: Remotely accessible registry paths (Scored)'
                            $Lvl92 = 'L1'
		                    $RegRefTags = @('System\CurrentControlSet\Control\ProductOptions','System\CurrentControlSet\Control\Server Applications','Software\Microsoft\Windows NT\CurrentVersion')
                            $SecMachReg = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\SecurePipeServers\Winreg\AllowedExactPaths' -Name Machine -ErrorAction 'silentlycontinue'
                            $PolRes92 = $SecMachReg | Select-Object -ExpandProperty Machine
                            $PolTag92Dif = Compare-Object -ReferenceObject $RegRefTags -DifferenceObject $PolRes92 -PassThru
                                $PolTag92Cnt = $PolTag92Dif.Count
                                if ($PolTag92Cnt -eq '0'){
                                    $Res92 = '1'} else {$Res92 = '2'}
		                    $Str92 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag92 + ';' + $Desc92 + ';' + $Res92 + ';' + $Using:CurntDateForm)
                            $Str92
                        }

                        #2.3.10.7 (L1) Configure 'Network access: Named Pipes that can be accessed anonymously' (MS only) (Scored) W2K16
                        $Tag366 = '2.3.10.7'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                            $Count2++
		                    $Desc366 = 'Configure Network access: Named Pipes that can be accessed anonymously (MS only) (Scored)'
                            $Lvl366 = 'L1'
		                    $SrvcState = get-service -Name Browser | Select-Object -ExpandProperty Status
                            $NullSesPipe = Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\LanManServer\Parameters' -Name NullSessionPipes -ErrorAction 'silentlycontinue'
                            if($SrvcState -eq 'Running'){
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res366 = '2'}
                                Else{
                                $PolRes366 = $NullSesPipe | Select-Object -ExpandProperty NullSessionPipes
                                    if ($PolRes366 -eq 'BROWSER') {
                                        $Res366 = '1'} else {$Res366 = '2'}
                                        }
                                }
                            Else{
                                if (-not ([string]::IsNullOrEmpty($NullSesPipe))){
                                    $Res366 = '1'} else {$Res366 = '2'}
                                    }
		                    $Str366 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag366 + ';' + $Desc366 + ';' + $Res366 + ';' + $Using:CurntDateForm)
                            $Str366
                        }

                        #2.3.10.8 (L1) Ensure 'Network access: Remotely accessible registry paths and sub-paths' (Scored) W2K12R2
                        $Tag93 = '2.3.10.8'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
		                    $Desc93 = 'Ensure Network access: Remotely accessible registry paths and sub-paths (Scored)'
                            $Lvl93 = 'L1'
		                    $RegRefTags = @('System\CurrentControlSet\Control\Print\Printers','System\CurrentControlSet\Services\Eventlog','Software\Microsoft\OLAP Server','Software\Microsoft\Windows NT\CurrentVersion\Print','Software\Microsoft\Windows NT\CurrentVersion\Windows','System\CurrentControlSet\Control\ContentIndex','System\CurrentControlSet\Control\Terminal Server','System\CurrentControlSet\Control\Terminal Server\UserConfig','System\CurrentControlSet\Control\Terminal Server\DefaultUserConfiguration','Software\Microsoft\Windows NT\CurrentVersion\Perflib','System\CurrentControlSet\Services\SysmonLog')
                            $SecMachReg = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\SecurePipeServers\Winreg\AllowedPaths' -Name Machine -ErrorAction 'silentlycontinue'
                            $PolRes93 = $SecMachReg | Select-Object -ExpandProperty Machine
                            $PolTag93Dif = Compare-Object -ReferenceObject $RegRefTags -DifferenceObject $PolRes93 -PassThru
                                $PolTag93Cnt = $PolTag93Dif.Count
                                if ($PolTag93Cnt -eq '0'){
                                    $Res93 = '1'} else {$Res93 = '2'}
		                    $Str93 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag93 + ';' + $Desc93 + ';' + $Res93 + ';' + $Using:CurntDateForm)
                            $Str93
                        }

                        #2.3.10.8 (L1) Configure 'Network access: Remotely accessible registry paths' (Scored) W2K16
                        $Tag367 = '2.3.10.8'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
		                    $Desc367 = 'Configure Network access: Remotely accessible registry paths'
                            $Lvl367 = 'L1'
		                    $RegRefTags = @('System\CurrentControlSet\Control\ProductOptions','System\CurrentControlSet\Control\Server Applications','Software\Microsoft\Windows NT\CurrentVersion')
                            $SecMachReg = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\SecurePipeServers\Winreg\AllowedExactPaths' -Name Machine -ErrorAction 'silentlycontinue'
                            $PolRes367 = $SecMachReg | Select-Object -ExpandProperty Machine
                            $PolTag367Dif = Compare-Object -ReferenceObject $RegRefTags -DifferenceObject $PolRes367 -PassThru
                                $PolTag367Cnt = $PolTag367Dif.Count
                                if ($PolTag367Cnt -eq '0'){
                                    $Res367 = '1'} else {$Res367 = '2'}
		                    $Str367 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag367 + ';' + $Desc367 + ';' + $Res367 + ';' + $Using:CurntDateForm)
                            $Str367
                        }
                                                
                        #2.3.10.9 (L1) Ensure 'Network access: Restrict anonymous access to Named Pipes and Shares' is set to 'Enabled' (Scored) W2K12R2
                        $Tag94 = '2.3.10.9'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
		                    $Desc94 = 'Ensure Network access: Restrict anonymous access to Named Pipes and Shares is set to Enabled (Scored)'
                            $Lvl94 = 'L1'
		                    $RestNullAcc = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name restrictnullsessaccess -ErrorAction 'silentlycontinue'
                            if (!$RestNullAcc){
                                $Res94 = '2'}
                            Else{
                            $PolRes94 = $RestNullAcc | Select-Object -ExpandProperty restrictnullsessaccess
                            if ($PolRes94 -eq '1') {
                                $Res94 = '1'} else {$Res94 = '2'}
                                }
		                    $Str94 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag94 + ';' + $Desc94 + ';' + $Res94 + ';' + $Using:CurntDateForm)
                            $Str94
                        }

                        #2.3.10.9 (L1) Configure 'Network access: Remotely accessible registry paths and sub-paths' (Scored) W2K16
                        $Tag368 = '2.3.10.9'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
		                    $Desc368 = 'Configure Network access: Remotely accessible registry paths and sub-paths (Scored)'
                            $Lvl368 = 'L1'
		                    $RegRefTags = @('System\CurrentControlSet\Control\Print\Printers','System\CurrentControlSet\Services\Eventlog','Software\Microsoft\OLAP Server','Software\Microsoft\Windows NT\CurrentVersion\Print','Software\Microsoft\Windows NT\CurrentVersion\Windows','System\CurrentControlSet\Control\ContentIndex','System\CurrentControlSet\Control\Terminal Server','System\CurrentControlSet\Control\Terminal Server\UserConfig','System\CurrentControlSet\Control\Terminal Server\DefaultUserConfiguration','Software\Microsoft\Windows NT\CurrentVersion\Perflib','System\CurrentControlSet\Services\SysmonLog')
                            $SecMachReg = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\SecurePipeServers\Winreg\AllowedPaths' -Name Machine -ErrorAction 'silentlycontinue'
                            $PolRes368 = $SecMachReg | Select-Object -ExpandProperty Machine
                            $PolTag368Dif = Compare-Object -ReferenceObject $RegRefTags -DifferenceObject $PolRes368 -PassThru
                                $PolTag368Cnt = $PolTag368Dif.Count
                                if ($PolTag368Cnt -eq '0'){
                                    $Res368 = '1'} else {$Res368 = '2'}
		                    $Str368 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag368 + ';' + $Desc368 + ';' + $Res368 + ';' + $Using:CurntDateForm)
                            $Str368
                        }

                        #2.3.10.10 (L1) Ensure 'Network access: Shares that can be accessed anonymously' is set to 'None' (Scored) W2K12R2
                        $Tag95 = '2.3.10.10'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
		                    $Desc95 = 'Ensure Network access: Shares that can be accessed anonymously is set to None (Scored)'
                            $Lvl95 = 'L1'
		                    $NullSesShr = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\LanManServer\Parameters' -Name NullSessionShares -ErrorAction 'silentlycontinue'
                            if (!$NullSesShr){
                                $Res95 = '1'}
                            Else{
                            $PolRes95 = $NullSesShr | Select-Object -ExpandProperty NullSessionShares
                            if ($PolRes95 -eq '') {
                                $Res95 = '1'} else {$Res95 = '2'}
                                }
		                    $Str95 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag95 + ';' + $Desc95 + ';' + $Res95 + ';' + $Using:CurntDateForm)
                            $Str95
                        }

                        #2.3.10.10 (L1) Ensure 'Network access: Restrict anonymous access to Named Pipes and Shares' is set to 'Enabled' (Scored) W2K16
                        $Tag369 = '2.3.10.10'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
		                    $Desc369 = 'Ensure Network access: Restrict anonymous access to Named Pipes and Shares is set to Enabled (Scored)'
                            $Lvl369 = 'L1'
		                    $RestNullAcc = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters' -Name restrictnullsessaccess -ErrorAction 'silentlycontinue'
                            if (!$RestNullAcc){
                                $Res369 = '2'}
                            Else{
                            $PolRes369 = $RestNullAcc | Select-Object -ExpandProperty restrictnullsessaccess
                            if ($PolRes369 -eq '1') {
                                $Res369 = '1'} else {$Res369 = '2'}
                                }
		                    $Str369 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag369 + ';' + $Desc369 + ';' + $Res369 + ';' + $Using:CurntDateForm)
                            $Str369
                        }

                        #2.3.10.11 (L1) Ensure 'Network access: Sharing and security model for local accounts' is set to 'Classic - local users authenticate as themselves' (Scored) W2K12R2
                        $Tag96 = '2.3.10.11'
                        if ($OSVersion -eq 'W2K12R2'){
                            $Count2++
		                    $Desc96 = 'Ensure Network access: Sharing and security model for local accounts is set to Classic - local users authenticate as themselves (Scored)'
                            $Lvl96 = 'L1'
		                    $ForcGuest = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name ForceGuest -ErrorAction 'silentlycontinue'
                            if (!$ForcGuest){
                                $Res96 = '2'}
                            Else{
                            $PolRes96 = $ForcGuest | Select-Object -ExpandProperty ForceGuest
                            if ($PolRes96 -eq '0') {
                                $Res96 = '1'} else {$Res96 = '2'}
                                }
		                    $Str96 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag96 + ';' + $Desc96 + ';' + $Res96 + ';' + $Using:CurntDateForm)
                            $Str96
                        }

                        #2.3.10.11 (L1) Ensure 'Network access: Restrict clients allowed to make remote calls to SAM' is set to 'Administrators: Remote Access: Allow' (MS only) (Scored) W2K16
                        $Tag370 = '2.3.10.11'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
							$Count2++
							$Desc370 = 'Ensure Network access: Restrict clients allowed to make remote calls to SAM is set to Administrators: Remote Access: Allow (MS only) (Scored)'
							$Lvl370 = 'L1'
							$ForcGuest = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\Lsa' -Name restrictremotesam -ErrorAction 'silentlycontinue'
							if (!$ForcGuest){
								$Res370 = '2'}
							Else{
							$PolRes370 = $ForcGuest | Select-Object -ExpandProperty restrictremotesam
							if ($PolRes370 -eq 'O:BAG:BAD:(A;;RC;;;BA)') {
								$Res370 = '1'} else {$Res370 = '2'}
								}
							$Str370 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag370 + ';' + $Desc370 + ';' + $Res370 + ';' + $Using:CurntDateForm)
							$Str370
							}

                        #2.3.10.12 (L1) Ensure 'Network access: Shares that can be accessed anonymously' is set to 'None' (Scored) W2K16
                        $Tag371 = '2.3.10.12'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
		                    $Desc371 = 'Ensure Network access: Shares that can be accessed anonymously is set to None (Scored)'
                            $Lvl371 = 'L1'
		                    $NullSesShr = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\LanManServer\Parameters' -Name NullSessionShares -ErrorAction 'silentlycontinue'
                            if (!$NullSesShr){
                                $Res371 = '1'}
                            Else{
                            $PolRes371 = $NullSesShr | Select-Object -ExpandProperty NullSessionShares
                            if ($PolRes371 -eq '') {
                                $Res371 = '1'} else {$Res371 = '2'}
                                }
		                    $Str371 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag371 + ';' + $Desc371 + ';' + $Res371 + ';' + $Using:CurntDateForm)
                            $Str371
                        }

                        #2.3.10.13 (L1) Ensure 'Network access: Sharing and security model for local accounts' is set to 'Classic - local users authenticate as themselves' (Scored) W2K16
                        $Tag96 = '2.3.10.13'
                        if ($OSVersion -eq 'W2K16'){
                            $Count2++
		                    $Desc96 = 'Ensure Network access: Sharing and security model for local accounts is set to Classic - local users authenticate as themselves (Scored)'
                            $Lvl96 = 'L1'
		                    $ForcGuest = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name ForceGuest -ErrorAction 'silentlycontinue'
                            if (!$ForcGuest){
                                $Res96 = '2'}
                            Else{
                            $PolRes96 = $ForcGuest | Select-Object -ExpandProperty ForceGuest
                            if ($PolRes96 -eq '0') {
                                $Res96 = '1'} else {$Res96 = '2'}
                                }
		                    $Str96 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag96 + ';' + $Desc96 + ';' + $Res96 + ';' + $Using:CurntDateForm)
                            $Str96
                        }                        

                        #=================================================================================================================================
                        #2.3.11 Network security
                        #   This section contains recommendations related to network security.
                        #=================================================================================================================================

                        #2.3.11.1 (L1) Ensure 'Network security: Allow Local System to use computer identity for NTLM' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag97 = '2.3.11.1'
                        $Count2++
		                $Desc97 = 'Ensure Network security: Allow Local System to use computer identity for NTLM is set to Enabled (Scored)'
                        $Lvl97 = 'L1'
		                $UseMacID = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name UseMachineId -ErrorAction 'silentlycontinue'
                        if (!$UseMacID){
                            $Res97 = '2'}
                        Else{
                        $PolRes97 = $UseMacID | Select-Object -ExpandProperty UseMachineId
                        if ($PolRes97 -eq '1') {
                            $Res97 = '1'} else {$Res97 = '2'}
                            }
		                $Str97 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag97 + ';' + $Desc97 + ';' + $Res97 + ';' + $Using:CurntDateForm)
                        $Str97

                        #2.3.11.2 (L1) Ensure 'Network security: Allow LocalSystem NULL session fallback' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag98 = '2.3.11.2'
                        $Count2++
		                $Desc98 = 'Ensure Network security: Allow LocalSystem NULL session fallback is set to Disabled (Scored)'
                        $Lvl98 = 'L1'
		                $AllNullSesFall = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa\MSV1_0' -Name allownullsessionfallback -ErrorAction 'silentlycontinue'
                        if (!$AllNullSesFall){
                            $Res98 = '2'}
                        Else{
                        $PolRes98 = $AllNullSesFall | Select-Object -ExpandProperty allownullsessionfallback
                        if ($PolRes98 -eq '0') {
                            $Res98 = '1'} else {$Res98 = '2'}
                            }
		                $Str98 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag98 + ';' + $Desc98 + ';' + $Res98 + ';' + $Using:CurntDateForm)
                        $Str98

                        #2.3.11.3 (L1) Ensure 'Network Security: Allow PKU2U authentication requests to this computer to use online identities' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag99 = '2.3.11.3'
                        $Count2++
		                $Desc99 = 'Ensure Network Security: Allow PKU2U authentication requests to this computer to use online identities is set to Disabled (Scored)'
                        $Lvl99 = 'L1'
		                $AllowOnlnID = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa\pku2u' -Name AllowOnlineID -ErrorAction 'silentlycontinue'
                        if (!$AllowOnlnID){
                            $Res99 = '2'}
                        Else{
                        $PolRes99 = $AllowOnlnID | Select-Object -ExpandProperty AllowOnlineID
                        if ($PolRes99 -eq '0') {
                            $Res99 = '1'} else {$Res99 = '2'}
                            }
		                $Str99 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag99 + ';' + $Desc99 + ';' + $Res99 + ';' + $Using:CurntDateForm)
                        $Str99

                        #2.3.11.4 (L1) Ensure 'Network Security: Configure encryption types allowed for Kerberos' is set to 'RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types' (Scored) W2K12R2 W2K16
                        $Tag100 = '2.3.11.4'
                        $Count2++
		                $Desc100 = 'Ensure Network Security: Configure encryption types allowed for Kerberos is set to RC4_HMAC_MD5, AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types (Scored)'
                        $Lvl100 = 'L1'
		                $SupEncrTyp = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System\Kerberos\Parameters' -Name SupportedEncryptionTypes -ErrorAction 'silentlycontinue'
                        if (!$SupEncrTyp){
                            $Res100 = '2'}
                        Else{
                        $SuppEncryType = $SupEncrTyp | Select-Object -ExpandProperty SupportedEncryptionTypes
                        $PolRes100 = $SuppEncryType -as [int]
		                if ($PolRes100 -eq '2147483644') {
                            $Res100 = '1'} else {$Res100 = '2'}
                            }
		                $Str100 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag100 + ';' + $Desc100 + ';' + $Res100 + ';' + $Using:CurntDateForm)
                        $Str100

                        #2.3.11.5 (L1) Ensure 'Network security: Do not store LAN Manager hash value on next password change' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag101 = '2.3.11.5'
                        $Count2++
		                $Desc101 = 'Ensure Network security: Do not store LAN Manager hash value on next password change is set to Enabled (Scored)'
                        $Lvl101 = 'L1'
		                $NoLMHash = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name NoLMHash -ErrorAction 'silentlycontinue'
                        if (!$NoLMHash){
                            $Res101 = '2'}
                        Else{
                        $PolRes101 = $NoLMHash | Select-Object -ExpandProperty NoLMHash
                        if ($PolRes101 -eq '1') {
                            $Res101 = '1'} else {$Res101 = '2'}
                            }
		                $Str101 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag101 + ';' + $Desc101 + ';' + $Res101 + ';' + $Using:CurntDateForm)
                        $Str101

                        #2.3.11.6 (L1) Ensure 'Network security: Force logoff when logon hours expire' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag102 = '2.3.11.6'
                        $Count2++
		                $Desc102 = 'Ensure Network security: Force logoff when logon hours expire is set to Enabled (Scored)'
                        $Lvl102 = 'L1'
		                $EnbFordLgOff = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\LanManServer\Parameters' -Name EnableForcedLogOff -ErrorAction 'silentlycontinue'
                        if (!$EnbFordLgOff){
                            $Res102 = '2'}
                        Else{
                        $PolRes102 = $EnbFordLgOff | Select-Object -ExpandProperty EnableForcedLogOff
                        if ($PolRes102 -eq '1') {
                            $Res102 = '1'} else {$Res102 = '2'}
                            }
		                $Str102 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag102 + ';' + $Desc102 + ';' + $Res102 + ';' + $Using:CurntDateForm)
                        $Str102

                        #2.3.11.7 (L1) Ensure 'Network security: LAN Manager authentication level' is set to 'Send NTLMv2 response only. Refuse LM & NTLM' (Scored) W2K12R2 W2K16
                        $Tag103 = '2.3.11.7'
                        $Count2++
		                $Desc103 = 'Ensure Network security: LAN Manager authentication level is set to Send NTLMv2 response only Refuse LM & NTLM (Scored)'
                        $Lvl103 = 'L1'
		                $LMCompLvl = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa' -Name LmCompatibilityLevel -ErrorAction 'silentlycontinue'
                        if (!$LMCompLvl){
                            $Res103 = '2'}
                        Else{
                        $PolRes103 = $LMCompLvl | Select-Object -ExpandProperty LmCompatibilityLevel
                        if ($PolRes103 -eq '5') {
                            $Res103 = '1'} else {$Res103 = '2'}
                            }
		                $Str103 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag103 + ';' + $Desc103 + ';' + $Res103 + ';' + $Using:CurntDateForm)
                        $Str103

                        #2.3.11.8 (L1) Ensure 'Network security: LDAP client signing requirements' is set to 'Negotiate signing' or higher (Scored) W2K12R2 W2K16
                        $Tag104 = '2.3.11.8'
                        $Count2++
		                $Desc104 = 'Ensure Network security: LDAP client signing requirements is set to Negotiate signing or higher (Scored)'
                        $Lvl104 = 'L1'
		                $LdapCliInt = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\LDAP' -Name LDAPClientIntegrity -ErrorAction 'silentlycontinue'
                        if (!$LdapCliInt){
                            $Res104 = '2'}
                        Else{
                        $LDAPSgnReq = $LdapCliInt | Select-Object -ExpandProperty LDAPClientIntegrity
                        $PolRes104 = $LDAPSgnReq -as [int]
                        if (($PolRes104 -gt '0') -and ($PolRes104 -le '2')) {
                            $Res104 = '1'} else {$Res104 = '2'}
                            }
		                $Str104 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag104 + ';' + $Desc104 + ';' + $Res104 + ';' + $Using:CurntDateForm)
                        $Str104

                        #2.3.11.9 (L1) Ensure 'Network security: Minimum session security for NTLM SSP based (including secure RPC) clients' is set to 'Require NTLMv2 session security, Require 128-bit encryption' (Scored) W2K12R2 W2K16
                        $Tag105 = '2.3.11.9'
                        $Count2++
		                $Desc105 = 'Ensure Network security: Minimum session security for NTLM SSP based (including secure RPC) clients is set to Require NTLMv2 session security Require 128-bit encryption (Scored)'
                        $Lvl105 = 'L1'
		                $NTLMMinCliSec = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa\MSV1_0' -Name NTLMMinClientSec -ErrorAction 'silentlycontinue'
                        if (!$NTLMMinCliSec){
                            $Res105 = '2'}
                        Else{
                        $NTLMMinSessSec = $NTLMMinCliSec | Select-Object -ExpandProperty NTLMMinClientSec
                        $PolRes105 = $NTLMMinSessSec -as [int]
		                if ($PolRes105 -eq '537395200'){
                            $Res105 = '1'} else {$Res105 = '2'}
                            }
		                $Str105 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag105 + ';' + $Desc105 + ';' + $Res105 + ';' + $Using:CurntDateForm)
                        $Str105

                        #2.3.11.10 (L1) Ensure 'Network security: Minimum session security for NTLM SSP based (including secure RPC) servers' is set to 'Require NTLMv2 session security, Require 128-bit encryption' (Scored) W2K12R2 W2K16
                        $Tag106 = '2.3.11.10'
                        $Count2++
		                $Desc106 = 'Ensure Network security: Minimum session security for NTLM SSP based (including secure RPC) servers is set to Require NTLMv2 session security Require 128-bit encryption (Scored)'
                        $Lvl106 = 'L1'
		                $NTLMMinSrvSec = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Lsa\MSV1_0' -Name NTLMMinServerSec -ErrorAction 'silentlycontinue'
                        if (!$NTLMMinSrvSec){
                            $Res106 = '2'}
                        Else{
                        $NTLMSrvSec = $NTLMMinSrvSec | Select-Object -ExpandProperty NTLMMinServerSec
                        $PolRes106 = $NTLMSrvSec -as [int]
		                if ($PolRes106 -eq '537395200'){
                            $Res106 = '1'} else {$Res106 = '2'}
                            }
		                $Str106 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag106 + ';' + $Desc106 + ';' + $Res106 + ';' + $Using:CurntDateForm)
                        $Str106

                        #============================================================================================================================================
                        #2.3.12 Recovery console
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #============================================================================================================================================
                        #2.3.13 Shutdown
                        #   This section contains recommendations related to the Windows shutdown functionality.
                        #============================================================================================================================================

                        #2.3.13.1 (L1) Ensure 'Shutdown: Allow system to be shut down without having to log on' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag107 = '2.3.13.1'
                        $Count2++
		                $Desc107 = 'Ensure Shutdown: Allow system to be shut down without having to log on is set to Disabled (Scored)'
                        $Lvl107 = 'L1'
		                $Shtdwnwoutlogon = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name ShutdownWithoutLogon -ErrorAction 'silentlycontinue'
                        if (!$Shtdwnwoutlogon){
                            $Res107 = '2'}
                        Else{
                        $StdwnwLogon = $Shtdwnwoutlogon | Select-Object -ExpandProperty ShutdownWithoutLogon
                        $PolRes107 = $StdwnwLogon -as [int]
		                if ($PolRes107 -eq '0'){
                            $Res107 = '1'} else {$Res107 = '2'}
                            }
		                $Str107 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag107 + ';' + $Desc107 + ';' + $Res107 + ';' + $Using:CurntDateForm)
                        $Str107

                        #============================================================================================================================================
                        #2.3.14 System cryptography
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #============================================================================================================================================
                        #2.3.15 System objects
                        #   This section contains recommendations related to system objects.
                        #============================================================================================================================================

                        #2.3.15.1 (L1) Ensure 'System objects: Require case insensitivity for non-Windows subsystems' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag108 = '2.3.15.1'
                        $Count2++
		                $Desc108 = 'Ensure System objects: Require case insensitivity for non-Windows subsystems is set to Enabled (Scored)'
                        $Lvl108 = 'L1'
		                $ObCasInses = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Session Manager\Kernel' -Name ObCaseInsensitive -ErrorAction 'silentlycontinue'
                        if (!$ObCasInses){
                            $Res108 = '2'}
                        Else{
                        $PolRes108 = $ObCasInses | Select-Object -ExpandProperty ObCaseInsensitive
                        if ($PolRes108 -eq '1'){
                            $Res108 = '1'} else {$Res108 = '2'}
                            }
		                $Str108 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag108 + ';' + $Desc108 + ';' + $Res108 + ';' + $Using:CurntDateForm)
                        $Str108

                        #2.3.15.2 (L1) Ensure 'System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links)' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag109 = '2.3.15.2'
                        $Count2++
		                $Desc109 = 'Ensure System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links) is set to Enabled (Scored)'
                        $Lvl109 = 'L1'
		                $ProtctMode = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Session Manager' -Name ProtectionMode -ErrorAction 'silentlycontinue'
                        if (!$ProtctMode){
                            $Res109 = '2'}
                        Else{
                        $PolRes109 = $ProtctMode | Select-Object -ExpandProperty ProtectionMode
                        if ($PolRes109 -eq '1'){
                            $Res109 = '1'} else {$Res109 = '2'}
                            }
		                $Str109 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag109 + ';' + $Desc109 + ';' + $Res109 + ';' + $Using:CurntDateForm)
                        $Str109

                        #===============================================================================================================================================
                        #2.3.16 System settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #2.3.17 User Account Control
                        #   This section contains recommendations related to User Account Control.
                        #===============================================================================================================================================

                        #2.3.17.1 (L1) Ensure 'User Account Control: Admin Approval Mode for the Built-in Administrator account' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag110 = '2.3.17.1'
                        $Count2++
		                $Desc110 = 'Ensure System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links) is set to Enabled (Scored)'
                        $Lvl110 = 'L1'
		                $FiltAdmToken = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name FilterAdministratorToken -ErrorAction 'silentlycontinue'
                        if (!$FiltAdmToken){
                            $Res110 = '2'}
                        Else{
                        $PolRes110 = $FiltAdmToken | Select-Object -ExpandProperty FilterAdministratorToken
                        if ($PolRes110 -eq '1'){
                            $Res110 = '1'} else {$Res110 = '2'}
                            }
		                $Str110 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag110 + ';' + $Desc110 + ';' + $Res110 + ';' + $Using:CurntDateForm)
                        $Str110

                        #2.3.17.2 (L1) Ensure 'User Account Control: Allow UIAccess applications to prompt for elevation without using the secure desktop' is set to 'Disabled' (Scored) W2K12R2 W2K16
                        $Tag111 = '2.3.17.2'
                        $Count2++
		                $Desc111 = 'Ensure User Account Control: Allow UIAccess applications to prompt for elevation without using the secure desktop is set to Disabled (Scored)'
                        $Lvl111 = 'L1'
		                $EnbUIADskToogle = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' -Name EnableUIADesktopToggle -ErrorAction 'silentlycontinue'
                        if (!$EnbUIADskToogle){
                            $Res111 = '2'}
                        Else{
                        $PolRes111 = $EnbUIADskToogle | Select-Object -ExpandProperty EnableUIADesktopToggle
                        if ($PolRes111 -eq '0'){
                            $Res111 = '1'} else {$Res111 = '2'}
                            }
		                $Str111 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag111 + ';' + $Desc111 + ';' + $Res111 + ';' + $Using:CurntDateForm)
                        $Str111

                        #2.3.17.3 (L1) Ensure 'User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode' is set to 'Prompt for consent on the secure desktop' (Scored) W2K12R2 W2K16
		                $Tag112 = '2.3.17.3'
                        $Count2++
		                $Desc112 = 'Ensure User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode is set to Prompt for consent on the secure desktop (Scored)'
                        $Lvl112 = 'L1'
		                $ConcPrptBehAdm = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name ConsentPromptBehaviorAdmin -ErrorAction 'silentlycontinue'
                        if (!$ConcPrptBehAdm){
                            $Res112 = '2'}
                        Else{
                        $PolRes112 = $ConcPrptBehAdm | Select-Object -ExpandProperty ConsentPromptBehaviorAdmin
                        if ($PolRes112 -eq '2'){
                            $Res112 = '1'} else {$Res112 = '2'}
                            }
		                $Str112 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag112 + ';' + $Desc112 + ';' + $Res112 + ';' + $Using:CurntDateForm)
                        $Str112

                        #2.3.17.4 (L1) Ensure 'User Account Control: Behavior of the elevation prompt for standard users' is set to 'Automatically deny elevation requests' (Scored) W2K12R2 W2K16
                        $Tag113 = '2.3.17.4'
                        $Count2++
		                $Desc113 = 'Ensure User Account Control: Behavior of the elevation prompt for standard users is set to Automatically deny elevation requests (Scored)'
                        $Lvl113 = 'L1'
		                $ConcPrptBehUsr = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name ConsentPromptBehaviorUser -ErrorAction 'silentlycontinue'
                        if (!$ConcPrptBehUsr){
                            $Res113 = '2'}
                        Else{
                        $PolRes113 = $ConcPrptBehUsr | Select-Object -ExpandProperty ConsentPromptBehaviorUser
                        if ($PolRes113 -eq '0'){
                            $Res113 = '1'} else {$Res113 = '2'}
                            }
		                $Str113 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag113 + ';' + $Desc113 + ';' + $Res113 + ';' + $Using:CurntDateForm)
                        $Str113

                        #2.3.17.5 (L1) Ensure 'User Account Control: Detect application installations and prompt for elevation' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag114 = '2.3.17.5'
		                $Count2++
		                $Desc114 = 'Ensure User Account Control: Detect application installations and prompt for elevation is set to Enabled (Scored)'
                        $Lvl114 = 'L1'
                        $EnbInstDetct = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name EnableInstallerDetection -ErrorAction 'silentlycontinue'
                        if (!$EnbInstDetct){
                            $Res114 = '2'}
                        Else{
                        $PolRes114 = $EnbInstDetct | Select-Object -ExpandProperty EnableInstallerDetection
                        if ($PolRes114 -eq '1'){
                            $Res114 = '1'} else {$Res114 = '2'}
                            }
		                $Str114 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag114 + ';' + $Desc114 + ';' + $Res114 + ';' + $Using:CurntDateForm)
                        $Str114

                        #2.3.17.6 (L1) Ensure 'User Account Control: Only elevate UIAccess applications that are installed in secure locations' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag115 = '2.3.17.6'
                        $Count2++
		                $Desc115 = 'Ensure User Account Control: Only elevate UIAccess applications that are installed in secure locations is set to Enabled (Scored)'
                        $Lvl115 = 'L1'
		                $EnbSecUIPth = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name EnableSecureUIAPaths -ErrorAction 'silentlycontinue'
                        if (!$EnbSecUIPth){
                            $Res115 = '2'}
                        Else{
                        $PolRes115 = $EnbSecUIPth | Select-Object -ExpandProperty EnableSecureUIAPaths
                        if ($PolRes115 -eq '1'){
                            $Res115 = '1'} else {$Res115 = '2'}
                            }
		                $Str115 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag115 + ';' + $Desc115 + ';' + $Res115 + ';' + $Using:CurntDateForm)
                        $Str115

                        #2.3.17.7 (L1) Ensure 'User Account Control: Run all administrators in Admin Approval Mode' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag116 = '2.3.17.7'
                        $Count2++
		                $Desc116 = 'Ensure User Account Control: Run all administrators in Admin Approval Mode is set to Enabled (Scored)'
                        $Lvl116 = 'L1'
		                $EnableLUA = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name EnableLUA -ErrorAction 'silentlycontinue'
                        if (!$EnableLUA){
                            $Res116 = '2'}
                        Else{
                        $PolRes116 = $EnableLUA | Select-Object -ExpandProperty EnableLUA
                        if ($PolRes116 -eq '1'){
                            $Res116 = '1'} else {$Res116 = '2'}
                            }
		                $Str116 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag116 + ';' + $Desc116 + ';' + $Res116 + ';' + $Using:CurntDateForm)
                        $Str116

                        #2.3.17.8 (L1) Ensure 'User Account Control: Switch to the secure desktop when prompting for elevation' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag117 = '2.3.17.8'
                        $Count2++
		                $Desc117 = 'Ensure User Account Control: Switch to the secure desktop when prompting for elevation is set to Enabled (Scored)'
                        $Lvl117 = 'L1'		
		                $PrmtOnSecDsk = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name PromptOnSecureDesktop -ErrorAction 'silentlycontinue'
                        if (!$PrmtOnSecDsk){
                            $Res117 = '2'}
                        Else{
                        $PolRes117 = $PrmtOnSecDsk | Select-Object -ExpandProperty PromptOnSecureDesktop
                        if ($PolRes117 -eq '1'){
                            $Res117 = '1'} else {$Res117 = '2'}
                            }
		                $Str117 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag117 + ';' + $Desc117 + ';' + $Res117 + ';' + $Using:CurntDateForm)
                        $Str117

                        #2.3.17.9 (L1) Ensure 'User Account Control: Virtualize file and registry write failures to per-user locations' is set to 'Enabled' (Scored) W2K12R2 W2K16
                        $Tag118 = '2.3.17.9'
                        $Count2++
		                $Desc118 = 'Ensure User Account Control: Virtualize file and registry write failures to per-user locations is set to Enabled (Scored)'
                        $Lvl118 = 'L1'
		                $EnbVirtual = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name EnableVirtualization -ErrorAction 'silentlycontinue'
                        if (!$EnbVirtual){
                            $Res118 = '2'}
                        Else{
                        $PolRes118 = $EnbVirtual | Select-Object -ExpandProperty EnableVirtualization
                        if ($PolRes118 -eq '1'){
                            $Res118 = '1'} else {$Res118 = '2'}
                            }
		                $Str118 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag118 + ';' + $Desc118 + ';' + $Res118 + ';' + $Using:CurntDateForm)
                        $Str118

                        #=============================================================================================================================================
                        #3 Event Log
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.    
                        #=============================================================================================================================================
                        #4 Restricted Groups
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=============================================================================================================================================
                        #5 System Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=============================================================================================================================================
                        #6 Registry
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=============================================================================================================================================
                        #7 File System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=============================================================================================================================================
                        #8 Wired Network (IEEE 802.3) Policies
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=============================================================================================================================================
                        #9 Windows Firewall With Advanced Security
                        #   This section contains recommendations for configuring the Windows Firewall.
                        #=============================================================================================================================================

                        $CapNum9 = '9.'
                        $Cap9 = 'Windows Firewall With Advanced Security'
                        $Count9 = 0

                        #=============================================================================================================================================
                        #9.1 Domain Profile
                        #   This section contains recommendations for the Domain Profile of the Windows Firewall.
                        #=============================================================================================================================================

                        #9.1.1 (L1) Ensure 'Windows Firewall: Domain: Firewall state' is set to 'On (recommended)' (Scored) W2K12R2 W2K16
                        $Tag119 = '9.1.1'
                        $Count9++
		                $Desc119 = 'Ensure Windows Firewall: Domain: Firewall state is set to On (recommended) (Scored)'
                        $Lvl119 = 'L1'
		                $DomEnbFWDP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name EnableFirewall -ErrorAction 'silentlycontinue'
                        if (!$DomEnbFWDP){
                            $Res119 = '2'}
                        Else{
                        $PolRes119 = $DomEnbFWDP | Select-Object -ExpandProperty EnableFirewall
                        if ($PolRes119 -eq '1'){
                            $Res119 = '1'} else {$Res119 = '2'}
                            }
		                $Str119 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag119 + ';' + $Desc119 + ';' + $Res119 + ';' + $Using:CurntDateForm)
                        $Str119

                        #9.1.2 (L1) Ensure 'Windows Firewall: Domain: Inbound connections' is set to 'Block (default)' (Scored) W2K12R2 W2K16
                        $Tag120 = '9.1.2'
                        $Count9++
		                $Desc120 = 'Ensure Windows Firewall: Domain: Inbound connections is set to Block (default) (Scored)'
                        $Lvl120 = 'L1'
		                $DomDefInbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name DefaultInboundAction -ErrorAction 'silentlycontinue'
                        if (!$DomDefInbAct){
                            $Res120 = '2'}
                        Else{
                        $PolRes120 = $DomDefInbAct | Select-Object -ExpandProperty DefaultInboundAction
                        if ($PolRes120 -eq '1'){
                            $Res120 = '1'} else {$Res120 = '2'}
                            }
		                $Str120 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag120 + ';' + $Desc120 + ';' + $Res120 + ';' + $Using:CurntDateForm)
                        $Str120

                        #9.1.3 (L1) Ensure 'Windows Firewall: Domain: Outbound connections' is set to 'Allow (default)' (Scored) W2K12R2 W2K16
                        $Tag121 = '9.1.3'
                        $Count9++
		                $Desc121 = 'Ensure Windows Firewall: Domain: Outbound connections is set to Allow (default) (Scored)'
                        $Lvl121 = 'L1'
		                $DomDefOutbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name DefaultOutboundAction -ErrorAction 'silentlycontinue'
                        if (!$DomDefOutbAct){
                            $Res121 = '2'}
                        Else{
                        $PolRes121 = $DomDefOutbAct | Select-Object -ExpandProperty DefaultOutboundAction
                        if ($PolRes121 -eq '0'){
                            $Res121 = '1'} else {$Res121 = '2'}
                            }
		                $Str121 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag121 + ';' + $Desc121 + ';' + $Res121 + ';' + $Using:CurntDateForm)
                        $Str121

                        #9.1.4 (L1) Ensure 'Windows Firewall: Domain: Settings: Display a notification' is set to 'No' (Scored) W2K12R2 W2K16
                        $Tag122 = '9.1.4'
                        $Count9++
		                $Desc122 = 'Ensure Windows Firewall: Domain: Settings: Display a notification is set to No (Scored)'
                        $Lvl122 = 'L1'
		                $DomDisbNotf = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name DisableNotifications -ErrorAction 'silentlycontinue'
                        if (!$DomDisbNotf){
                            $Res122 = '2'}
                        Else{
                        $PolRes122 = $DomDisbNotf | Select-Object -ExpandProperty DisableNotifications
                        if ($PolRes122 -eq '1'){
                            $Res122 = '1'} else {$Res122 = '2'}
                            }
		                $Str122 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag122 + ';' + $Desc122 + ';' + $Res122 + ';' + $Using:CurntDateForm)
                        $Str122

                        #9.1.5 (L1) Ensure 'Windows Firewall: Domain: Logging: Name' is set to '%SYSTEMROOT%\System32\logfiles\firewall\domainfw.log' (Scored) W2K16
                        $Tag394 = '9.1.5'
                        if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc394 = 'Ensure Windows Firewall: Domain: Logging: Name is set to %SYSTEMROOT%\System32\logfiles\firewall\domainfw.log (Scored)'
                        $Lvl394 = 'L1'
		                $DomLogFilePath = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogFilePath -ErrorAction 'silentlycontinue'
                        if (!$DomLogFilePath){
                            $Res394 = '2'}
                        Else{
                        $PolRes394 = $DomLogFilePath | Select-Object -ExpandProperty LogFilePath
                        if ($PolRes394 -like '%systemroot%\system32\logfiles\firewall\domainfw.log'){
                            $Res394 = '1'} else {$Res394 = '2'}
                            }
		                $Str394 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag394 + ';' + $Desc394 + ';' + $Res394 + ';' + $Using:CurntDateForm)
                        $Str394
                        }

                        #9.1.5 (L1) Ensure 'Windows Firewall: Domain: Settings: Apply local firewall rules' is set to 'Yes (default)' (Scored) W2K12
                        $Tag123 = '9.1.5'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc123 = 'Ensure Windows Firewall: Domain: Settings: Apply local firewall rules is set to Yes (default) (Scored)'
                        $Lvl123 = 'L1'
		                $DomAllwLocPolMerg = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name AllowLocalPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$DomAllwLocPolMerg){
                            $Res123 = '2'}
                        Else{
                        $PolRes123 = $DomAllwLocPolMerg | Select-Object -ExpandProperty AllowLocalPolicyMerge
                        if ($PolRes123 -eq '1'){
                            $Res123 = '1'} else {$Res123 = '2'}
                            }
		                $Str123 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag123 + ';' + $Desc123 + ';' + $Res123 + ';' + $Using:CurntDateForm)
                        $Str123
                        }

                        #9.1.6 (L1) Ensure 'Windows Firewall: Domain: Settings: Apply local connection security rules' is set to 'Yes (default)' (Scored) W2K12
                        $Tag124 = '9.1.6'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc124 = 'Ensure Windows Firewall: Domain: Settings: Apply local connection security rules is set to Yes (default) (Scored)'
                        $Lvl124 = 'L1'
		                $DomAllwLocIPSecPol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile' -Name AllowLocalIPsecPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$DomAllwLocIPSecPol){
                            $Res124 = '2'}
                        Else{
                        $PolRes124 = $DomAllwLocIPSecPol | Select-Object -ExpandProperty AllowLocalIPsecPolicyMerge
                        if ($PolRes124 -eq '1'){
                            $Res124 = '1'} else {$Res124 = '2'}
                            }
		                $Str124 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag124 + ';' + $Desc124 + ';' + $Res124 + ';' + $Using:CurntDateForm)
                        $Str124
                        }

                        #9.1.7 (L1) Ensure 'Windows Firewall: Domain: Logging: Name' is set to '%SYSTEMROOT%\System32\logfiles\firewall\domainfw.log' (Scored) W2K12
                        $Tag125 = '9.1.7'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc125 = 'Ensure Windows Firewall: Domain: Logging: Name is set to %SYSTEMROOT%\System32\logfiles\firewall\domainfw.log (Scored)'
                        $Lvl125 = 'L1'
		                $DomLogFilePath = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogFilePath -ErrorAction 'silentlycontinue'
                        if (!$DomLogFilePath){
                            $Res125 = '2'}
                        Else{
                        $PolRes125 = $DomLogFilePath | Select-Object -ExpandProperty LogFilePath
                        if ($PolRes125 -like '%systemroot%\system32\logfiles\firewall\domainfw.log'){
                            $Res125 = '1'} else {$Res125 = '2'}
                            }
		                $Str125 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag125 + ';' + $Desc125 + ';' + $Res125 + ';' + $Using:CurntDateForm)
                        $Str125
                        }

                        #9.1.6 (L1) Ensure 'Windows Firewall: Domain: Logging: Size limit (KB)' is set to '16,384 KB or greater' (Scored) W2K16
                        $Tag396 = '9.1.6'
                        if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc396 = 'Ensure Windows Firewall: Domain: Logging: Size limit (KB) is set to 16384 KB or greater (Scored)'
                        $Lvl396 = 'L1'
		                $DomLogFileSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogFileSize -ErrorAction 'silentlycontinue'
                        if (!$DomLogFileSize){
                            $Res396 = '2'}
                        Else{
                        $DomLogSzLmt = $DomLogFileSize | Select-Object -ExpandProperty LogFileSize
                        $PolRes396 = $DomLogSzLmt -as [int]
		                if ($PolRes396 -ge '16384'){
                            $Res396 = '1'} else {$Res396 = '2'}
                            }
		                $Str396 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag396 + ';' + $Desc396 + ';' + $Res396 + ';' + $Using:CurntDateForm)
                        $Str396
                        }

                        #9.1.7 (L1) Ensure 'Windows Firewall: Domain: Logging: Log dropped packets' is set to 'Yes' (Scored) W2K16
                        $Tag397 = '9.1.7'
						if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc397 = 'Ensure Windows Firewall: Domain: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl397 = 'L1'
		                $DomLogDrpdFls = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogDroppedPackets -ErrorAction 'silentlycontinue'
                        if (!$DomLogDrpdFls){
                            $Res397 = '2'}
                        Else{
                        $PolRes397 = $DomLogDrpdFls | Select-Object -ExpandProperty LogDroppedPackets
                        if ($PolRes397 -eq '1'){
                            $Res397 = '1'} else {$Res397 = '2'}
                            }
		                $Str397 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag397 + ';' + $Desc397 + ';' + $Res397 + ';' + $Using:CurntDateForm)
                        $Str397
						}

                        #9.1.8 (L1) Ensure 'Windows Firewall: Domain: Logging: Size limit (KB)' is set to '16,384 KB or greater' (Scored) W2K12
                        $Tag126 = '9.1.8'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc126 = 'Ensure Windows Firewall: Domain: Logging: Size limit (KB) is set to 16384 KB or greater (Scored)'
                        $Lvl126 = 'L1'
		                $DomLogFileSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogFileSize -ErrorAction 'silentlycontinue'
                        if (!$DomLogFileSize){
                            $Res126 = '2'}
                        Else{
                        $DomLogSzLmt = $DomLogFileSize | Select-Object -ExpandProperty LogFileSize
                        $PolRes126 = $DomLogSzLmt -as [int]
		                if ($PolRes126 -ge '16384'){
                            $Res126 = '1'} else {$Res126 = '2'}
                            }
		                $Str126 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag126 + ';' + $Desc126 + ';' + $Res126 + ';' + $Using:CurntDateForm)
                        $Str126
                        }

                        #9.1.8 (L1) Ensure 'Windows Firewall: Domain: Logging: Log successful connections' is set to 'Yes' (Scored) W2K16
                        $Tag398 = '9.1.8'
                        if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc398 = 'Ensure Windows Firewall: Domain: Logging: Log successful connections is set to Yes (Scored)'
                        $Lvl398 = 'L1'
		                $DomLogSuccCnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogSuccessfulConnections -ErrorAction 'silentlycontinue'
                        if (!$DomLogSuccCnct){
                            $Res398 = '2'}
                        Else{
                        $PolRes398 = $DomLogSuccCnct | Select-Object -ExpandProperty LogSuccessfulConnections
                        if ($PolRes398 -eq '1'){
                            $Res398 = '1'} else {$Res398 = '2'}
                            }
		                $Str398 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag398 + ';' + $Desc398 + ';' + $Res398 + ';' + $Using:CurntDateForm)
                        $Str398
                        }

                        #9.1.9 (L1) Ensure 'Windows Firewall: Domain: Logging: Log dropped packets' is set to 'Yes' (Scored) W2K12
                        $Tag127 = '9.1.9'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc127 = 'Ensure Windows Firewall: Domain: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl127 = 'L1'
		                $DomLogDrpdFls = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogDroppedPackets -ErrorAction 'silentlycontinue'
                        if (!$DomLogDrpdFls){
                            $Res127 = '2'}
                        Else{
                        $PolRes127 = $DomLogDrpdFls | Select-Object -ExpandProperty LogDroppedPackets
                        if ($PolRes127 -eq '1'){
                            $Res127 = '1'} else {$Res127 = '2'}
                            }
		                $Str127 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag127 + ';' + $Desc127 + ';' + $Res127 + ';' + $Using:CurntDateForm)
                        $Str127
                        }

                        #9.1.10 (L1) Ensure 'Windows Firewall: Domain: Logging: Log successful connections' is set to 'Yes' (Scored) W2K12
                        $Tag128 = '9.1.10'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc128 = 'Ensure Windows Firewall: Domain: Logging: Log successful connections is set to Yes (Scored)'
                        $Lvl128 = 'L1'
		                $DomLogSuccCnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\DomainProfile\Logging' -Name LogSuccessfulConnections -ErrorAction 'silentlycontinue'
                        if (!$DomLogSuccCnct){
                            $Res128 = '2'}
                        Else{
                        $PolRes128 = $DomLogSuccCnct | Select-Object -ExpandProperty LogSuccessfulConnections
                        if ($PolRes128 -eq '1'){
                            $Res128 = '1'} else {$Res128 = '2'}
                            }
		                $Str128 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag128 + ';' + $Desc128 + ';' + $Res128 + ';' + $Using:CurntDateForm)
                        $Str128
                        }

                        #===============================================================================================================================================
                        #9.2 Private Profile
                        #   This section contains recommendations for the Private Profile of the Windows Firewall.
                        #===============================================================================================================================================
                        
                        #9.2.1 (L1) Ensure 'Windows Firewall: Private: Firewall state' is set to 'On (recommended)' (Scored) W2K12 W2K16
                        $Tag129 = '9.2.1'
                        $Count9++
		                $Desc129 = 'Ensure Windows Firewall: Private: Firewall state is set to On (recommended) (Scored)'
                        $Lvl129 = 'L1'
		                $PrvEnbFWDP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name EnableFirewall -ErrorAction 'silentlycontinue'
                        if (!$PrvEnbFWDP){
                            $Res129 = '2'}
                        Else{
                        $PolRes129 = $PrvEnbFWDP | Select-Object -ExpandProperty EnableFirewall
                        if ($PolRes129 -eq '1'){
                            $Res129 = '1'} else {$Res129 = '2'}
                            }
		                $Str129 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag129 + ';' + $Desc129 + ';' + $Res129 + ';' + $Using:CurntDateForm)
                        $Str129

                        #9.2.2 (L1) Ensure 'Windows Firewall: Private: Inbound connections' is set to 'Block (default)' (Scored) W2K12 W2K16
                        $Tag130 = '9.2.2'
                        $Count9++
		                $Desc130 = 'Ensure Windows Firewall: Private: Inbound connections is set to Block (default) (Scored)'
                        $Lvl130 = 'L1'
		                $PrvDefInbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name DefaultInboundAction -ErrorAction 'silentlycontinue'
                        if (!$PrvDefInbAct){
                            $Res130 = '2'}
                        Else{
                        $PolRes130 = $PrvDefInbAct | Select-Object -ExpandProperty DefaultInboundAction
                        if ($PolRes130 -eq '1'){
                            $Res130 = '1'} else {$Res130 = '2'}
                            }
		                $Str130 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag130 + ';' + $Desc130 + ';' + $Res130 + ';' + $Using:CurntDateForm)
                        $Str130

                        #9.2.3 (L1) Ensure 'Windows Firewall: Private: Outbound connections' is set to 'Allow (default)' (Scored) W2K12 W2K16
                        $Tag131 = '9.2.3'
                        $Count9++
		                $Desc131 = 'Ensure Windows Firewall: Private: Outbound connections is set to Allow (default) (Scored)'
                        $Lvl131 = 'L1'
		                $PrvDefOutbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name DefaultOutboundAction -ErrorAction 'silentlycontinue'
                        if (!$PrvDefOutbAct){
                            $Res131 = '2'}
                        Else{
                        $PolRes131 = $PrvDefOutbAct | Select-Object -ExpandProperty DefaultOutboundAction
                        if ($PolRes131 -eq '0'){
                            $Res131 = '1'} else {$Res131 = '2'}
                            }
		                $Str131 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag131 + ';' + $Desc131 + ';' + $Res131 + ';' + $Using:CurntDateForm)
                        $Str131

                        #9.2.4 (L1) Ensure 'Windows Firewall: Private: Settings: Display a notification' is set to 'No' (Scored) W2K12 W2K16
                        $Tag132 = '9.2.4'
                        $Count9++
		                $Desc132 = 'Ensure Windows Firewall: Private: Settings: Display a notification is set to No (Scored)'
                        $Lvl132 = 'L1'
		                $PrvDisbNotf = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name DisableNotifications -ErrorAction 'silentlycontinue'
                        if (!$PrvDisbNotf){
                            $Res132 = '2'}
                        Else{
                        $PolRes132 = $PrvDisbNotf | Select-Object -ExpandProperty DisableNotifications
                        if ($PolRes132 -eq '1'){
                            $Res132 = '1'} else {$Res132 = '2'}
                            }
		                $Str132 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag132 + ';' + $Desc132 + ';' + $Res132 + ';' + $Using:CurntDateForm)
                        $Str132

                        #9.2.5 (L1) Ensure 'Windows Firewall: Private: Settings: Apply local firewall rules' is set to 'Yes (default)' (Scored) W2K12
                        $Tag133 = '9.2.5'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc133 = 'Ensure Windows Firewall: Private: Settings: Apply local firewall rules is set to Yes (default) (Scored)'
                        $Lvl133 = 'L1'
		                $PrvAllwLocPolMerg = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name AllowLocalPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$PrvAllwLocPolMerg){
                            $Res133 = '2'}
                        Else{
                        $PolRes133 = $PrvAllwLocPolMerg | Select-Object -ExpandProperty AllowLocalPolicyMerge
                        if ($PolRes133 -eq '1'){
                            $Res133 = '1'} else {$Res133 = '2'}
                            }
		                $Str133 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag133 + ';' + $Desc133 + ';' + $Res133 + ';' + $Using:CurntDateForm)
                        $Str133
                        }

                        #9.2.5 (L1) Ensure 'Windows Firewall: Private: Logging: Name' is set to '%SYSTEMROOT%\System32\logfiles\firewall\privatefw.log' (Scored) W2K16
                        $Tag135 = '9.2.5'
						if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc135 = 'Ensure Windows Firewall: Private: Logging: Name is set to %SYSTEMROOT%\System32\logfiles\firewall\privatefw.log (Scored)'
                        $Lvl135 = 'L1'
		                $PrvLogFilePath = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogFilePath -ErrorAction 'silentlycontinue'
                        if (!$PrvLogFilePath){
                            $Res135 = '2'}
                        Else{
                        $PolRes135 = $PrvLogFilePath | Select-Object -ExpandProperty LogFilePath
                        if ($PolRes135 -like '%systemroot%\system32\logfiles\firewall\privatefw.log'){
                            $Res135 = '1'} else {$Res135 = '2'}
                            }
		                $Str135 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag135 + ';' + $Desc135 + ';' + $Res135 + ';' + $Using:CurntDateForm)
                        $Str135
						}

                        #9.2.6 (L1) Ensure 'Windows Firewall: Private: Settings: Apply local connection security rules' is set to 'Yes (default)' (Scored) W2K12
                        $Tag134 = '9.2.6'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc134 = 'Ensure Windows Firewall: Private: Settings: Apply local connection security rules is set to Yes (default) (Scored)'
                        $Lvl134 = 'L1'
		                $PrvAllwLocIPSecPol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile' -Name AllowLocalIPsecPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$PrvAllwLocIPSecPol){
                            $Res134 = '2'}
                        Else{
                        $PolRes134 = $PrvAllwLocIPSecPol | Select-Object -ExpandProperty AllowLocalIPsecPolicyMerge
                        if ($PolRes134 -eq '1'){
                            $Res134 = '1'} else {$Res134 = '2'}
                            }
		                $Str134 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag134 + ';' + $Desc134 + ';' + $Res134 + ';' + $Using:CurntDateForm)
                        $Str134
                        }

                        #9.2.6 (L1) Ensure 'Windows Firewall: Private: Logging: Size limit (KB)' is set to '16,384 KB or greater' (Scored) W2K16
                        $Tag399 = '9.2.6'
                        if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc399 = 'Ensure Windows Firewall: Private: Logging: Size limit (KB) is set to 16384 KB or greater (Scored)'
                        $Lvl399 = 'L1'
		                $PrvLogFileSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogFileSize -ErrorAction 'silentlycontinue'
                        if (!$PrvLogFileSize){
                            $Res399 = '2'}
                        Else{
                        $PrvLogFlSz = $PrvLogFileSize | Select-Object -ExpandProperty LogFileSize
                        $PolRes399 = $PrvLogFlSz -as [int]
		                if ($PolRes399 -ge '16384'){
                            $Res399 = '1'} else {$Res399 = '2'}
                            }
		                $Str399 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag399 + ';' + $Desc399 + ';' + $Res399 + ';' + $Using:CurntDateForm)
                        $Str399
                        }

                        #9.2.7 (L1) Ensure 'Windows Firewall: Private: Logging: Name' is set to '%SYSTEMROOT%\System32\logfiles\firewall\privatefw.log' (Scored) W2K12
                        $Tag135 = '9.2.7'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc135 = 'Ensure Windows Firewall: Private: Logging: Name is set to %SYSTEMROOT%\System32\logfiles\firewall\privatefw.log (Scored)'
                        $Lvl135 = 'L1'
		                $PrvLogFilePath = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogFilePath -ErrorAction 'silentlycontinue'
                        if (!$PrvLogFilePath){
                            $Res135 = '2'}
                        Else{
                        $PolRes135 = $PrvLogFilePath | Select-Object -ExpandProperty LogFilePath
                        if ($PolRes135 -like '%systemroot%\system32\logfiles\firewall\privatefw.log'){
                            $Res135 = '1'} else {$Res135 = '2'}
                            }
		                $Str135 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag135 + ';' + $Desc135 + ';' + $Res135 + ';' + $Using:CurntDateForm)
                        $Str135
                        }

                        #9.2.7 (L1) Ensure 'Windows Firewall: Private: Logging: Log dropped packets' is set to 'Yes' (Scored) W2K16
                        $Tag400 = '9.2.7'
						if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc400 = 'Ensure Windows Firewall: Private: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl400 = 'L1'
		                $PrvLogDrpdFls = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogDroppedPackets -ErrorAction 'silentlycontinue'
                        if (!$PrvLogDrpdFls){
                            $Res400 = '2'}
                        Else{
                        $PolRes400 = $PrvLogDrpdFls | Select-Object -ExpandProperty LogDroppedPackets
                        if ($PolRes400 -eq '1'){
                            $Res400 = '1'} else {$Res400 = '2'}
                            }
		                $Str400 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag400 + ';' + $Desc400 + ';' + $Res400 + ';' + $Using:CurntDateForm)
                        $Str400
						}

                        #9.2.8 (L1) Ensure 'Windows Firewall: Private: Logging: Size limit (KB)' is set to '16,384 KB or greater' (Scored) W2K12
                        $Tag136 = '9.2.8'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc136 = 'Ensure Windows Firewall: Private: Logging: Size limit (KB) is set to 16384 KB or greater (Scored)'
                        $Lvl136 = 'L1'
		                $PrvLogFileSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogFileSize -ErrorAction 'silentlycontinue'
                        if (!$PrvLogFileSize){
                            $Res136 = '2'}
                        Else{
                        $PrvLogFlSz = $PrvLogFileSize | Select-Object -ExpandProperty LogFileSize
                        $PolRes136 = $PrvLogFlSz -as [int]
		                if ($PolRes136 -ge '16384'){
                            $Res136 = '1'} else {$Res136 = '2'}
                            }
		                $Str136 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag136 + ';' + $Desc136 + ';' + $Res136 + ';' + $Using:CurntDateForm)
                        $Str136
                        }

                        #9.2.8 (L1) Ensure 'Windows Firewall: Private: Logging: Log successful connections' is set to 'Yes' (Scored) W2K16
                        $Tag401 = '9.2.8'
						if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc401 = 'Ensure Windows Firewall: Private: Logging: Log successful connections is set to Yes (Scored)'
                        $Lvl401 = 'L1'
		                $PrvLogSuccCnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogSuccessfulConnections -ErrorAction 'silentlycontinue'
                        if (!$PrvLogSuccCnct){
                            $Res401 = '2'}
                        Else{
                        $PolRes401 = $PrvLogSuccCnct | Select-Object -ExpandProperty LogSuccessfulConnections
                        if ($PolRes401 -eq '1'){
                            $Res401 = '1'} else {$Res401 = '2'}
                            }
		                $Str401 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag401 + ';' + $Desc401 + ';' + $Res401 + ';' + $Using:CurntDateForm)
                        $Str401
						}

                        #9.2.9 (L1) Ensure 'Windows Firewall: Private: Logging: Log dropped packets' is set to 'Yes' (Scored) W2K12
                        $Tag137 = '9.2.9'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc137 = 'Ensure Windows Firewall: Private: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl137 = 'L1'
		                $PrvLogDrpdFls = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogDroppedPackets -ErrorAction 'silentlycontinue'
                        if (!$PrvLogDrpdFls){
                            $Res137 = '2'}
                        Else{
                        $PolRes137 = $PrvLogDrpdFls | Select-Object -ExpandProperty LogDroppedPackets
                        if ($PolRes137 -eq '1'){
                            $Res137 = '1'} else {$Res137 = '2'}
                            }
		                $Str137 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag137 + ';' + $Desc137 + ';' + $Res137 + ';' + $Using:CurntDateForm)
                        $Str137
                        }

                        #9.2.10 (L1) Ensure 'Windows Firewall: Private: Logging: Log successful connections' is set to 'Yes' (Scored) W2K12
                        $Tag138 = '9.2.10'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc138 = 'Ensure Windows Firewall: Private: Logging: Log successful connections is set to Yes (Scored)'
                        $Lvl138 = 'L1'
		                $PrvLogSuccCnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PrivateProfile\Logging' -Name LogSuccessfulConnections -ErrorAction 'silentlycontinue'
                        if (!$PrvLogSuccCnct){
                            $Res138 = '2'}
                        Else{
                        $PolRes138 = $PrvLogSuccCnct | Select-Object -ExpandProperty LogSuccessfulConnections
                        if ($PolRes138 -eq '1'){
                            $Res138 = '1'} else {$Res138 = '2'}
                            }
		                $Str138 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag138 + ';' + $Desc138 + ';' + $Res138 + ';' + $Using:CurntDateForm)
                        $Str138
                        }

                        #================================================================================================================================================
                        #9.3 Public Profile
                        #   This section contains recommendations for the Public Profile of the Windows Firewall.
                        #================================================================================================================================================

                        #9.3.1 (L1) Ensure 'Windows Firewall: Public: Firewall state' is set to 'On (recommended)' (Scored) W2K12 W2K16
                        $Tag139 = '9.3.1'
                        $Count9++
		                $Desc139 = 'Ensure Windows Firewall: Public: Firewall state is set to On (recommended) (Scored)'
                        $Lvl139 = 'L1'
		                $PubEnbFWDP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name EnableFirewall -ErrorAction 'silentlycontinue'
                        if (!$PubEnbFWDP){
                            $Res139 = '2'}
                        Else{
                        $PolRes139 = $PubEnbFWDP | Select-Object -ExpandProperty EnableFirewall
                        if ($PolRes139 -eq '1'){
                            $Res139 = '1'} else {$Res139 = '2'}
                            }
		                $Str139 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag139 + ';' + $Desc139 + ';' + $Res139 + ';' + $Using:CurntDateForm)
                        $Str139

                        #9.3.2 (L1) Ensure 'Windows Firewall: Public: Inbound connections' is set to 'Block (default)' (Scored) W2K12 W2K16
                        $Tag140 = '9.3.2'
                        $Count9++
		                $Desc140 = 'Ensure Windows Firewall: Public: Inbound connections is set to Block (default) (Scored)'
                        $Lvl140 = 'L1'
		                $PubDefInbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name DefaultInboundAction -ErrorAction 'silentlycontinue'
                        if (!$PubDefInbAct){
                            $Res140 = '2'}
                        Else{
                        $PolRes140 = $PubDefInbAct | Select-Object -ExpandProperty DefaultInboundAction
                        if ($PolRes140 -eq '1'){
                            $Res140 = '1'} else {$Res140 = '2'}
                            }
		                $Str140 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag140 + ';' + $Desc140 + ';' + $Res140 + ';' + $Using:CurntDateForm)
                        $Str140

                        #9.3.3 (L1) Ensure 'Windows Firewall: Public: Outbound connections' is set to 'Allow (default)' (Scored) W2K12 W2K16
                        $Tag141 = '9.3.3'
                        $Count9++
		                $Desc141 = 'Ensure Windows Firewall: Public: Outbound connections is set to Allow (default) (Scored)'
                        $Lvl141 = 'L1'
		                $PubDefOutbAct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name DefaultOutboundAction -ErrorAction 'silentlycontinue'
                        if (!$PubDefOutbAct){
                            $Res141 = '2'}
                        Else{
                        $PolRes141 = $PubDefOutbAct | Select-Object -ExpandProperty DefaultOutboundAction
                        if ($PolRes141 -eq '0'){
                            $Res141 = '1'} else {$Res141 = '2'}
                            }
		                $Str141 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag141 + ';' + $Desc141 + ';' + $Res141 + ';' + $Using:CurntDateForm)
                        $Str141

                        #9.3.4 (L1) Ensure 'Windows Firewall: Public: Settings: Display a notification' is set to 'Yes' (Scored) W2K12
                        $Tag142 = '9.3.4'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count9++
		                $Desc142 = 'Ensure Windows Firewall: Public: Settings: Display a notification is set to Yes (Scored)'
                        $Lvl142 = 'L1'
		                $PubDisbNotf = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name DisableNotifications -ErrorAction 'silentlycontinue'
                        if (!$PubDisbNotf){
                            $Res142 = '2'}
                        Else{
                        $PolRes142 = $PubDisbNotf | Select-Object -ExpandProperty DisableNotifications
                        if ($PolRes142 -eq '1'){
                            $Res142 = '1'} else {$Res142 = '2'}
                            }
		                $Str142 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag142 + ';' + $Desc142 + ';' + $Res142 + ';' + $Using:CurntDateForm)
                        $Str142
                        }

                        #9.3.4 (L1) Ensure 'Windows Firewall: Public: Settings: Display a notification' is set to 'No' (Scored) W2K16
                        $Tag402 = '9.3.4'
						if ($OSVersion -eq 'W2K16'){
                        $Count9++
		                $Desc402 = 'Ensure Windows Firewall: Public: Settings: Display a notification is set to No (Scored)'
                        $Lvl402 = 'L1'
		                $PubDisbNotf = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name DisableNotifications -ErrorAction 'silentlycontinue'
                        if (!$PubDisbNotf){
                            $Res402 = '2'}
                        Else{
                        $PolRes402 = $PubDisbNotf | Select-Object -ExpandProperty DisableNotifications
                        if ($PolRes402 -eq '1'){
                            $Res402 = '1'} else {$Res402 = '2'}
                            }
		                $Str402 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag402 + ';' + $Desc402 + ';' + $Res402 + ';' + $Using:CurntDateForm)
                        $Str402
						}

                        #9.3.5 (L1) Ensure 'Windows Firewall: Public: Settings: Apply local firewall rules' is set to 'No' (Scored) W2K12 W2K16
                        $Tag143 = '9.3.5'
                        $Count9++
		                $Desc143 = 'Ensure Windows Firewall: Public: Settings: Apply local firewall rules is set to No (Scored)'
                        $Lvl143 = 'L1'
		                $PubAllwLocPolMerg = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name AllowLocalPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$PubAllwLocPolMerg){
                            $Res143 = '2'}
                        Else{
                        $PolRes143 = $PubAllwLocPolMerg | Select-Object -ExpandProperty AllowLocalPolicyMerge
                        if ($PolRes143 -eq '1'){
                            $Res143 = '1'} else {$Res143 = '2'}
                            }
		                $Str143 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag143 + ';' + $Desc143 + ';' + $Res143 + ';' + $Using:CurntDateForm)
                        $Str143

                        #9.3.6 (L1) Ensure 'Windows Firewall: Public: Settings: Apply local connection security rules' is set to 'No' (Scored) W2K12 W2K16
                        $Tag144 = '9.3.6'
                        $Count9++
		                $Desc144 = 'Ensure Windows Firewall: Public: Settings: Apply local connection security rules is set to No (Scored)'
                        $Lvl144 = 'L1'
		                $PubAllwLocIPSecPol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile' -Name AllowLocalIPsecPolicyMerge -ErrorAction 'silentlycontinue'
                        if (!$PubAllwLocIPSecPol){
                            $Res144 = '2'}
                        Else{
                        $PolRes144 = $PubAllwLocIPSecPol | Select-Object -ExpandProperty AllowLocalIPsecPolicyMerge
                        if ($PolRes144 -eq '1'){
                            $Res144 = '1'} else {$Res144 = '2'}
                            }
		                $Str144 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag144 + ';' + $Desc144 + ';' + $Res144 + ';' + $Using:CurntDateForm)
                        $Str144

                        #9.3.7 (L1) Ensure 'Windows Firewall: Public: Logging: Name' is set to '%SYSTEMROOT%\System32\logfiles\firewall\publicfw.log' (Scored) W2K12 W2K16
                        $Tag145 = '9.3.7'
                        $Count9++
		                $Desc145 = 'Ensure Windows Firewall: Public: Logging: Name is set to %SYSTEMROOT%\System32\logfiles\firewall\publicfw.log (Scored)'
                        $Lvl145 = 'L1'
		                $PubLogFilePath = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging' -Name LogFilePath -ErrorAction 'silentlycontinue'
                        if (!$PubLogFilePath){
                            $Res145 = '2'}
                        Else{
                        $PolRes145 = $PubLogFilePath | Select-Object -ExpandProperty LogFilePath
                        if ($PolRes145 -like '%systemroot%\system32\logfiles\firewall\publicfw.log'){
                            $Res145 = '1'} else {$Res145 = '2'}
                            }
		                $Str145 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag145 + ';' + $Desc145 + ';' + $Res145 + ';' + $Using:CurntDateForm)
                        $Str145

                        #9.3.8 (L1) Ensure 'Windows Firewall: Public: Logging: Size limit (KB)' is set to '16,384 KB or greater' (Scored) W2K12 W2K16
                        $Tag146 = '9.3.8'
                        $Count9++
		                $Desc146 = 'Ensure Windows Firewall: Public: Logging: Size limit (KB) is set to 16384 KB or greater (Scored)'
                        $Lvl146 = 'L1'
		                $PubLogFileSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging' -Name LogFileSize -ErrorAction 'silentlycontinue'
                        if (!$PubLogFileSize){
                            $Res146 = '2'}
                        Else{
                        $PubLogFlSz = $PubLogFileSize | Select-Object -ExpandProperty LogFileSize
                        $PolRes146 = $PubLogFlSz -as [int]
		                if ($PolRes146 -ge '16384'){
                            $Res146 = '1'} else {$Res146 = '2'}
                            }
		                $Str146 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag146 + ';' + $Desc146 + ';' + $Res146 + ';' + $Using:CurntDateForm)
                        $Str146

                        #9.3.9 (L1) Ensure 'Windows Firewall: Public: Logging: Log dropped packets' is set to 'Yes' (Scored) W2K12 W2K16
                        $Tag147 = '9.3.9'
                        $Count9++
		                $Desc147 = 'Ensure Windows Firewall: Public: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl147 = 'L1'
		                $PubLogDrpdFls = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging' -Name LogDroppedPackets -ErrorAction 'silentlycontinue'
                        if (!$PubLogDrpdFls){
                            $Res147 = '2'}
                        Else{
                        $PolRes147 = $PubLogDrpdFls | Select-Object -ExpandProperty LogDroppedPackets
                        if ($PolRes147 -eq '1'){
                            $Res147 = '1'} else {$Res147 = '2'}
                            }
		                $Str147 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag147 + ';' + $Desc147 + ';' + $Res147 + ';' + $Using:CurntDateForm)
                        $Str147

                        #9.3.10 (L1) Ensure 'Windows Firewall: Public: Logging: Log successful connections' is set to 'Yes' (Scored) W2K12 W2K16
                        $Tag148 = '9.3.10'
                        $Count9++
		                $Desc148 = 'Ensure Windows Firewall: Public: Logging: Log dropped packets is set to Yes (Scored)'
                        $Lvl148 = 'L1'
		                $PubLogSuccCnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\WindowsFirewall\PublicProfile\Logging' -Name LogSuccessfulConnections -ErrorAction 'silentlycontinue'
                        if (!$PubLogSuccCnct){
                            $Res148 = '2'}
                        Else{
                        $PolRes148 = $PubLogSuccCnct | Select-Object -ExpandProperty LogSuccessfulConnections
                        if ($PolRes148 -eq '1'){
                            $Res148 = '1'} else {$Res148 = '2'}
                            }
		                $Str148 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag148 + ';' + $Desc148 + ';' + $Res148 + ';' + $Using:CurntDateForm)
                        $Str148

                        #===============================================================================================================================================
                        #10 Network List Manager Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #11 Wireless Network (IEEE 802.11) Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #12 Public Key Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #13 Software Restriction Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #14 Network Access Protection NAP Client Configuration
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #15 Application Control Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #16 IP Security Policies
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===============================================================================================================================================
                        #17 Advanced Audit Policy Configuration
                        #This section contains recommendations for configuring the Windows audit facilities.
                        #===============================================================================================================================================
                        
                        $CapNum17 = '17.'
                        $Cap17 = 'Advanced Audit Policy Configuration'
                        $Count17 = 0
                        
                        #===============================================================================================================================================
                        #17.1 Account Logon
                        #This section contains recommendations for configuring the Account Logon audit policy.
                        #===============================================================================================================================================

                        #17.1.1 (L1) Ensure 'Audit Credential Validation' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag149 = '17.1.1'
                        $Count17++
		                $Desc149 = 'Ensure Audit Credential Validation is set to Success and Failure (Scored)'
                        $Lvl149 = 'L1'
		                $AudtPol149 = $auditpol | Where-Object "Subcategory" -eq "Credential Validation" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol149 -eq 'Success and Failure'){
                            $Res149 = '1'} else {$Res149 = '2'}
		                $Str149 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag149 + ';' + $Desc149 + ';' + $Res149 + ';' + $Using:CurntDateForm)
                        $Str149

                        #===============================================================================================================================================
                        #17.2 Account Management
                        #   This section contains recommendations for configuring the Account Management audit policy.
                        #===============================================================================================================================================

                        #17.2.1 (L1) Ensure 'Audit Application Group Management' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag150 = '17.2.1'
                        $Count17++
		                $Desc150 = 'Ensure Audit Application Group Management is set to Success and Failure (Scored)'
                        $Lvl150 = 'L1'
		                $AudtPol150 = $auditpol | Where-Object "Subcategory" -eq "Application Group Management" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol150 -eq 'Success and Failure'){
                            $Res150 = '1'} else {$Res150 = '2'}
		                $Str150 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag150 + ';' + $Desc150 + ';' + $Res150 + ';' + $Using:CurntDateForm)
                        $Str150

                        #17.2.2 (L1) Ensure 'Audit Computer Account Management' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag151 = '17.2.2'
                        $Count17++
		                $Desc151 = 'Ensure Audit Computer Account Management is set to Success and Failure (Scored)'
                        $Lvl151 = 'L1'
		                $AudtPol151 = $auditpol | Where-Object "Subcategory" -eq "Computer Account Management" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol151 -eq 'Success and Failure'){
                            $Res151 = '1'} else {$Res151 = '2'}
		                $Str151 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag151 + ';' + $Desc151 + ';' + $Res151 + ';' + $Using:CurntDateForm)
                        $Str151

                        #===============================================================================================================================================
                        #17.2.3 (L1) Ensure 'Audit Distribution Group Management' is set to 'Success and Failure' (DC only) (Scored) - 152 W2K12 W2K16
                        $Tag152 = '17.2.3'
                        if ($SrvType -eq 'DC'){
                            $Count17++
		                    $Desc152 = 'Ensure Audit Distribution Group Management is set to Success and Failure (DC only) (Scored)'
                            $Lvl152 = 'L1'
		                    $AudtPol152 = $auditpol | Where-Object "Subcategory" -eq "Distribution Group Management" | Select-Object -ExpandProperty 'Inclusion Setting'
                            if ($AudtPol152 -eq 'Success and Failure'){
                                $Res152 = '1'} else {$Res152 = '2'}
		                    $Str152 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag152 + ';' + $Desc152 + ';' + $Res152 + ';' + $Using:CurntDateForm)
                            $Str152
                            }

                        #===============================================================================================================================================

                        #17.2.4 (L1) Ensure 'Audit Other Account Management Events' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag153 = '17.2.4'
                        $Count17++
		                $Desc153 = 'Ensure Audit Other Account Management Events is set to Success and Failure (Scored)'
                        $Lvl153 = 'L1'
		                $AudtPol153 = $auditpol | Where-Object "Subcategory" -eq "Other Account Management Events" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol153 -eq 'Success and Failure'){
                            $Res153 = '1'} else {$Res153 = '2'}
		                $Str153 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag153 + ';' + $Desc153 + ';' + $Res153 + ';' + $Using:CurntDateForm)
                        $Str153

                        #17.2.5 (L1) Ensure 'Audit Security Group Management' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag154 = '17.2.5'
                        $Count17++
		                $Desc154 = 'Ensure Audit Security Group Management is set to Success and Failure (Scored)'
                        $Lvl154 = 'L1'
		                $AudtPol154 = $auditpol | Where-Object "Subcategory" -eq "Security Group Management" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol154 -eq 'Success and Failure'){
                            $Res154 = '1'} else {$Res154 = '2'}
		                $Str154 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag154 + ';' + $Desc154 + ';' + $Res154 + ';' + $Using:CurntDateForm)
                        $Str154

                        #17.2.6 (L1) Ensure 'Audit User Account Management' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag155 = '17.2.6'
                        $Count17++
		                $Desc155 = 'Ensure Audit User Account Management is set to Success and Failure (Scored)'
                        $Lvl155 = 'L1'
		                $AudtPol155 = $auditpol | Where-Object "Subcategory" -eq "User Account Management" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol155 -eq 'Success and Failure'){
                            $Res155 = '1'} else {$Res155 = '2'}
		                $Str155 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag155 + ';' + $Desc155 + ';' + $Res155 + ';' + $Using:CurntDateForm)
                        $Str155

                        #================================================================================================================================================
                        #17.3 Detailed Tracking
                        #   This section contains recommendations for configuring the Detailed Tracking audit policy.
                        #================================================================================================================================================

                        #17.3.1 (L1) Ensure 'Audit Process Creation' is set to 'Success' (Scored) W2K12
                        $Tag156 = '17.3.1'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc156 = 'Ensure Audit Process Creation is set to Success (Scored)'
                        $Lvl156 = 'L1'
		                $AudtPol156 = $auditpol | Where-Object "Subcategory" -eq "Process Creation" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol156 -eq 'Success'){
                            $Res156 = '1'} else {$Res156 = '2'}
		                $Str156 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag156 + ';' + $Desc156 + ';' + $Res156 + ';' + $Using:CurntDateForm)
                        $Str156
                        }

                        #17.3.1 (L1) Ensure 'Audit PNP Activity' is set to 'Success' (Scored) W2K16
                        $Tag403 = '17.3.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc403 = 'Ensure Audit PNP Activity is set to Success (Scored)'
                        $Lvl403 = 'L1'
		                $AudtPol403 = $auditpol | Where-Object "Subcategory" -eq "PNP Activity" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol403 -eq 'Success'){
                            $Res403 = '1'} else {$Res403 = '2'}
		                $Str403 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag403 + ';' + $Desc403 + ';' + $Res403 + ';' + $Using:CurntDateForm)
                        $Str403
						}
                        
                        #17.3.2 (L1) Ensure 'Audit Process Creation' is set to 'Success' (Scored) W2K16
                        $Tag404 = '17.3.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc404 = 'Ensure Audit Process Creation is set to Success (Scored)'
                        $Lvl404 = 'L1'
		                $AudtPol404 = $auditpol | Where-Object "Subcategory" -eq "Process Creation" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol404 -eq 'Success'){
                            $Res404 = '1'} else {$Res404 = '2'}
		                $Str404 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag404 + ';' + $Desc404 + ';' + $Res404 + ';' + $Using:CurntDateForm)
                        $Str404
                        }

                        #================================================================================================================================================
                        #17.4 DS Access
                        #   This section contains recommendations for configuring the Directory Services Access audit policy.
                        #================================================================================================================================================
                        #17.4.1 (L1) Ensure 'Audit Directory Service Access' is set to 'Success and Failure' (DC only) (Scored) - 157 W2K12 W2K16
                        $Tag157 = '17.4.1'
                        if ($SrvType -eq 'DC'){
                            $Count17++
		                    $Desc157 = 'Ensure Audit Directory Service Access is set to Success and Failure (DC only) (Scored)'
                            $Lvl157 = 'L1'
		                    $AudtPol157 = $auditpol | Where-Object "Subcategory" -eq "Directory Service Access" | Select-Object -ExpandProperty 'Inclusion Setting'
                            if ($AudtPol157 -eq 'Success and Failure'){
                                $Res157 = '1'} else {$Res157 = '2'}
		                    $Str157 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag157 + ';' + $Desc157 + ';' + $Res157 + ';' + $Using:CurntDateForm)
                            $Str157
                            }

                        #================================================================================================================================================
                        #17.4.2 (L1) Ensure 'Audit Directory Service Changes' is set to 'Success and Failure' (DC only) (Scored) - 158 W2K12 W2K16
                        $Tag158 = '17.4.2'
                        if ($SrvType -eq 'DC'){
                            $Count17++
		                    $Desc158 = 'Ensure Audit Directory Service Changes is set to Success and Failure (DC only) (Scored)'
                            $Lvl158 = 'L1'
		                    $AudtPol158 = $auditpol | Where-Object "Subcategory" -eq "Directory Service Changes" | Select-Object -ExpandProperty 'Inclusion Setting'
                            if ($AudtPol158 -eq 'Success and Failure'){
                                $Res158 = '1'} else {$Res158 = '2'}
		                    $Str158 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag158 + ';' + $Desc158 + ';' + $Res158 + ';' + $Using:CurntDateForm)
                            $Str158
                            }
                        
                        #================================================================================================================================================
                        #17.5 Logon/Logoff
                        #   This section contains recommendations for configuring the Logon/Logoff audit policy.
                        #================================================================================================================================================

                        #17.5.1 (L1) Ensure 'Audit Account Lockout' is set to 'Success' (Scored) W2K12
                        if ($OSVersion -eq 'W2K12R2'){
                        $Tag159 = '17.5.1'
                        $Count17++
		                $Desc159 = 'Ensure Audit Account Lockout is set to Success (Scored)'
                        $Lvl159 = 'L1'
		                $AudtPol159 = $auditpol | Where-Object "Subcategory" -eq "Account Lockout" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol159 -eq 'Success'){
                            $Res159 = '1'} else {$Res159 = '2'}
		                $Str159 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag159 + ';' + $Desc159 + ';' + $Res159 + ';' + $Using:CurntDateForm)
                        $Str159
                        }

                        #17.5.1 (L1) Ensure 'Audit Account Lockout' is set to 'Success and Failure' (Scored) W2K16
                        $Tag405 = '17.5.1'
                        if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc405 = 'Ensure Audit Account Lockout is set to Success and Failure (Scored)'
                        $Lvl405 = 'L1'
		                $AudtPol405 = $auditpol | Where-Object "Subcategory" -eq "Account Lockout" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol405 -eq 'Success and Failure'){
                            $Res405 = '1'} else {$Res405 = '2'}
		                $Str405 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag405 + ';' + $Desc405 + ';' + $Res405 + ';' + $Using:CurntDateForm)
                        $Str405
                        }

                        #17.5.2 (L1) Ensure 'Audit Logoff' is set to 'Success' (Scored) W2K12
                        $Tag160 = '17.5.2'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc160 = 'Ensure Audit Logoff is set to Success (Scored)'
                        $Lvl160 = 'L1'
		                $AudtPol160 = $auditpol | Where-Object "Subcategory" -eq "Logoff" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol160 -eq 'Success'){
                            $Res160 = '1'} else {$Res160 = '2'}
		                $Str160 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag160 + ';' + $Desc160 + ';' + $Res160 + ';' + $Using:CurntDateForm)
                        $Str160
                        }

                        #17.5.2 (L1) Ensure 'Audit Group Membership' is set to 'Success' (Scored) W2K16
                        $Tag406 = '17.5.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc406 = 'Ensure Audit Group Membership is set to Success (Scored)'
                        $Lvl406 = 'L1'
		                $AudtPol406 = $auditpol | Where-Object "Subcategory" -eq "Group Membership" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol406 -eq 'Success'){
                            $Res406 = '1'} else {$Res406 = '2'}
		                $Str406 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag406 + ';' + $Desc406 + ';' + $Res406 + ';' + $Using:CurntDateForm)
                        $Str406
                        }

                        #17.5.3 (L1) Ensure 'Audit Logoff' is set to 'Success' (Scored) W2K16
                        $Tag407 = '17.5.3'
                        if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc407 = 'Ensure Audit Logoff is set to Success (Scored)'
                        $Lvl407 = 'L1'
		                $AudtPol407 = $auditpol | Where-Object "Subcategory" -eq "Logoff" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol407 -eq 'Success'){
                            $Res407 = '1'} else {$Res407 = '2'}
		                $Str407 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag407 + ';' + $Desc407 + ';' + $Res407 + ';' + $Using:CurntDateForm)
                        $Str407
                        }

                        #17.5.3 (L1) Ensure 'Audit Logon' is set to 'Success and Failure' (Scored) W2K12
                        $Tag161 = '17.5.3'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc161 = 'Ensure Audit Logon is set to Success and Failure (Scored)'
                        $Lvl161 = 'L1'
		                $AudtPol161 = $auditpol | Where-Object "Subcategory" -eq "Logon" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol161 -eq 'Success and Failure'){
                            $Res161 = '1'} else {$Res161 = '2'}
		                $Str161 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag161 + ';' + $Desc161 + ';' + $Res161 + ';' + $Using:CurntDateForm)
                        $Str161
                        }

                        #17.5.4 (L1) Ensure 'Audit Logon' is set to 'Success and Failure' (Scored) W2K16
                        $Tag408 = '17.5.4'
                        if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc408 = 'Ensure Audit Logon is set to Success and Failure (Scored)'
                        $Lvl408 = 'L1'
		                $AudtPol408 = $auditpol | Where-Object "Subcategory" -eq "Logon" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol408 -eq 'Success and Failure'){
                            $Res408 = '1'} else {$Res408 = '2'}
		                $Str408 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag408 + ';' + $Desc408 + ';' + $Res408 + ';' + $Using:CurntDateForm)
                        $Str408
                        }

                        #17.5.4 (L1) Ensure 'Audit Other Logon/Logoff Events' is set to 'Success and Failure' (Scored) W2K12
                        $Tag162 = '17.5.4'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc162 = 'Ensure Audit Other Logon/Logoff Events is set to Success and Failure (Scored)'
                        $Lvl162 = 'L1'
		                $AudtPol162 = $auditpol | Where-Object "Subcategory" -eq "Other Logon/Logoff Events" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol162 -eq 'Success and Failure'){
                            $Res162 = '1'} else {$Res162 = '2'}
		                $Str162 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag162 + ';' + $Desc162 + ';' + $Res162 + ';' + $Using:CurntDateForm)
                        $Str162
                        }

                        #17.5.5 (L1) Ensure 'Audit Other Logon/Logoff Events' is set to 'Success and Failure' (Scored) W2K16
                        $Tag409 = '17.5.5'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc409 = 'Ensure Audit Other Logon/Logoff Events is set to Success and Failure (Scored)'
                        $Lvl409 = 'L1'
		                $AudtPol409 = $auditpol | Where-Object "Subcategory" -eq "Other Logon/Logoff Events" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol409 -eq 'Success and Failure'){
                            $Res409 = '1'} else {$Res409 = '2'}
		                $Str409 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag409 + ';' + $Desc409 + ';' + $Res409 + ';' + $Using:CurntDateForm)
                        $Str409
                        }

                        #17.5.5 (L1) Ensure 'Audit Special Logon' is set to 'Success' (Scored) W2K12
                        $Tag163 = '17.5.5'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc163 = 'Ensure Audit Special Logon is set to Success (Scored)'
                        $Lvl163 = 'L1'
		                $AudtPol163 = $auditpol | Where-Object "Subcategory" -eq "Special Logon" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol163 -eq 'Success'){
                            $Res163 = '1'} else {$Res163 = '2'}
		                $Str163 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag163 + ';' + $Desc163 + ';' + $Res163 + ';' + $Using:CurntDateForm)
                        $Str163
                        }

                        #17.5.6 (L1) Ensure 'Audit Special Logon' is set to 'Success' (Scored) W2K16
                        $Tag410 = '17.5.6'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc410 = 'Ensure Audit Special Logon is set to Success (Scored)'
                        $Lvl410 = 'L1'
		                $AudtPol410 = $auditpol | Where-Object "Subcategory" -eq "Special Logon" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol410 -eq 'Success'){
                            $Res410 = '1'} else {$Res410 = '2'}
		                $Str410 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag410 + ';' + $Desc410 + ';' + $Res410 + ';' + $Using:CurntDateForm)
                        $Str410
						}

                        #=======================================================================================================================================
                        #17.6 Object Access
                        #   This section contains recommendations for configuring the Object Access audit policy.
                        #=======================================================================================================================================

                        #17.6.1 (L1) Ensure 'Audit Removable Storage' is set to 'Success and Failure' (Scored) W2K12
                        $Tag164 = '17.6.1'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count17++
		                $Desc164 = 'Ensure Audit Removable Storage is set to Success and Failure (Scored)'
                        $Lvl164 = 'L1'
		                $AudtPol164 = $auditpol | Where-Object "Subcategory" -eq "Removable Storage" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol164 -eq 'Success and Failure'){
                            $Res164 = '1'} else {$Res164 = '2'}
		                $Str164 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag164 + ';' + $Desc164 + ';' + $Res164 + ';' + $Using:CurntDateForm)
                        $Str164
                        }

                        #17.6.1 (L1) Ensure 'Audit Other Object Access Events' is set to 'Success and Failure' (Scored) W2K16
                        $Tag411 = '17.6.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc411 = 'Ensure Audit Other Object Access Events is set to Success and Failure'
                        $Lvl411 = 'L1'
		                $AudtPol411 = $auditpol | Where-Object "Subcategory" -eq "Other Object Access Events" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol411 -eq 'Success and Failure'){
                            $Res411 = '1'} else {$Res411 = '2'}
		                $Str411 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag411 + ';' + $Desc411 + ';' + $Res411 + ';' + $Using:CurntDateForm)
                        $Str411
						}

                        #17.6.2 (L1) Ensure 'Audit Removable Storage' is set to 'Success and Failure' (Scored) W2K16
                        $Tag412 = '17.6.2'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc412 = 'Ensure Audit Removable Storage is set to Success and Failure (Scored)'
                        $Lvl412 = 'L1'
		                $AudtPol412 = $auditpol | Where-Object "Subcategory" -eq "Removable Storage" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol412 -eq 'Success and Failure'){
                            $Res412 = '1'} else {$Res412 = '2'}
		                $Str412 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag412 + ';' + $Desc412 + ';' + $Res412 + ';' + $Using:CurntDateForm)
                        $Str412
						}

                        #=======================================================================================================================================
                        #17.7 Policy Change
                        #   This section contains recommendations for configuring the Policy Change audit policy.
                        #=======================================================================================================================================

                        #17.7.1 (L1) Ensure 'Audit Audit Policy Change' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag165 = '17.7.1'
                        $Count17++
		                $Desc165 = 'Ensure Audit Audit Policy Change is set to Success and Failure (Scored)'
                        $Lvl165 = 'L1'
		                $AudtPol165 = $auditpol | Where-Object "Subcategory" -eq "Removable Storage" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol165 -eq 'Success and Failure'){
                            $Res165 = '1'} else {$Res165 = '2'}
		                $Str165 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag165 + ';' + $Desc165 + ';' + $Res165 + ';' + $Using:CurntDateForm)
                        $Str165

                        #17.7.2 (L1) Ensure 'Audit Authentication Policy Change' is set to 'Success' (Scored) W2K12 W2K16
                        $Tag166 = '17.7.2'
                        $Count17++
		                $Desc166 = 'Ensure Audit Authentication Policy Change is set to Success (Scored)'
                        $Lvl166 = 'L1'
		                $AudtPol166 = $auditpol | Where-Object "Subcategory" -eq "Authentication Policy Change" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol166 -eq 'Success'){
                            $Res166 = '1'} else {$Res166 = '2'}
		                $Str166 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag166 + ';' + $Desc166 + ';' + $Res166 + ';' + $Using:CurntDateForm)
                        $Str166

                        #17.7.3 (L1) Ensure 'Audit Authorization Policy Change' is set to 'Success' (Scored) W2K16
                        $Tag413 = '17.7.3'
						if ($OSVersion -eq 'W2K16'){
                        $Count17++
		                $Desc413 = 'Ensure Audit Authorization Policy Change is set to Success (Scored)'
                        $Lvl413 = 'L1'
		                $AudtPol413 = $auditpol | Where-Object "Subcategory" -eq "Authorization Policy Change" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol413 -eq 'Success'){
                            $Res413 = '1'} else {$Res413 = '2'}
		                $Str413 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag413 + ';' + $Desc413 + ';' + $Res413 + ';' + $Using:CurntDateForm)
                        $Str413
						}

                        #=========================================================================================================================================
                        #17.8 Privilege Use
                        #   This section contains recommendations for configuring the Privilege Use audit policy.
                        #=========================================================================================================================================

                        #17.8.1 (L1) Ensure 'Audit Sensitive Privilege Use' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag167 = '17.8.1'
                        $Count17++
		                $Desc167 = 'Ensure Audit Sensitive Privilege Use is set to Success and Failure (Scored)'
                        $Lvl167 = 'L1'
		                $AudtPol167 = $auditpol | Where-Object "Subcategory" -eq "Sensitive Privilege Use" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol167 -eq 'Success and Failure'){
                            $Res167 = '1'} else {$Res167 = '2'}
		                $Str167 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag167 + ';' + $Desc167 + ';' + $Res167 + ';' + $Using:CurntDateForm)
                        $Str167

                        #==========================================================================================================================================
                        #17.9 System
                        #   This section contains recommendations for configuring the System audit policy.
                        #==========================================================================================================================================

                        #17.9.1 (L1) Ensure 'Audit IPsec Driver' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag168 = '17.9.1'
                        $Count17++
		                $Desc168 = 'Ensure Audit IPsec Driver is set to Success and Failure (Scored)'
                        $Lvl168 = 'L1'
		                $AudtPol168 = $auditpol | Where-Object "Subcategory" -eq "IPsec Driver" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol168 -eq 'Success and Failure'){
                            $Res168 = '1'} else {$Res168 = '2'}
		                $Str168 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag168 + ';' + $Desc168 + ';' + $Res168 + ';' + $Using:CurntDateForm)
                        $Str168

                        #17.9.2 (L1) Ensure 'Audit Other System Events' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag169 = '17.9.2'
                        $Count17++
		                $Desc169 = 'Ensure Audit Other System Events is set to Success and Failure (Scored)'
                        $Lvl169 = 'L1'
		                $AudtPol169 = $auditpol | Where-Object "Subcategory" -eq "Other System Events" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol169 -eq 'Success and Failure'){
                            $Res169 = '1'} else {$Res169 = '2'}
		                $Str169 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag169 + ';' + $Desc169 + ';' + $Res169 + ';' + $Using:CurntDateForm)
                        $Str169

                        #17.9.3 (L1) Ensure 'Audit Security State Change' is set to 'Success' (Scored) W2K12 W2K16
                        $Tag170 = '17.9.3'
                        $Count17++
		                $Desc170 = 'Ensure Audit Security State Change is set to Success (Scored)'
                        $Lvl170 = 'L1'
		                $AudtPol170 = $auditpol | Where-Object "Subcategory" -eq "Security State Change" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol170 -eq 'Success'){
                            $Res170 = '1'} else {$Res170 = '2'}
		                $Str170 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag170 + ';' + $Desc170 + ';' + $Res170 + ';' + $Using:CurntDateForm)
                        $Str170

                        #17.9.4 (L1) Ensure 'Audit Security System Extension' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag171 = '17.9.4'
                        $Count17++
		                $Desc171 = 'Ensure Audit Security System Extension is set to Success and Failure (Scored)'
                        $Lvl171 = 'L1'
		                $AudtPol171 = $auditpol | Where-Object "Subcategory" -eq "Security System Extension" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol171 -eq 'Success and Failure'){
                            $Res171 = '1'} else {$Res171 = '2'}
		                $Str171 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag171 + ';' + $Desc171 + ';' + $Res171 + ';' + $Using:CurntDateForm)
                        $Str171

                        #17.9.5 (L1) Ensure 'Audit System Integrity' is set to 'Success and Failure' (Scored) W2K12 W2K16
                        $Tag172 = '17.9.5'
                        $Count17++
		                $Desc172 = 'Ensure Audit System Integrity is set to Success and Failure (Scored)'
                        $Lvl172 = 'L1'
		                $AudtPol172 = $auditpol | Where-Object "Subcategory" -eq "System Integrity" | Select-Object -ExpandProperty 'Inclusion Setting'
                        if ($AudtPol172 -eq 'Success and Failure'){
                            $Res172 = '1'} else {$Res172 = '2'}
		                $Str172 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag172 + ';' + $Desc172 + ';' + $Res172 + ';' + $Using:CurntDateForm)
                        $Str172

                        #=======================================================================================================================================
                        #18 Administrative Templates (Computer)
                        #   This section contains recommendations for computer-based administrative templates.
                        #=======================================================================================================================================
                        
                        $CapNum18 = '18.'
                        $Cap18 = 'Administrative Templates (Computer)'
                        $Count18 = 0
                        
                        #=======================================================================================================================================
                        #18.1 Control Panel
                        #   This section contains recommendations for Control Panel settings.
                        #=======================================================================================================================================
                        #18.1.1 Personalization
                        #  This section contains recommendations for Control Panel personalization settings.
                        #=======================================================================================================================================
                        
                        #18.1.1.1 (L1) Ensure 'Prevent enabling lock screen camera' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag173 = '18.1.1.1'
		                $Count18++
		                $Desc173 = 'Ensure Prevent enabling lock screen camera is set to Enabled (Scored)'
                        $Lvl173 = 'L1'
                        $NoLckScrnCam = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Personalization' -Name NoLockScreenCamera -ErrorAction 'silentlycontinue'
                        if (!$NoLckScrnCam){
                            $Res173 = '2'}
                        Else{
                        $PolRes173 = $NoLckScrnCam | Select-Object -ExpandProperty NoLockScreenCamera
                        if ($PolRes173 -eq '1'){
                            $Res173 = '1'} else {$Res173 = '2'}
                            }
		                $Str173 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag173 + ';' + $Desc173 + ';' + $Res173 + ';' + $Using:CurntDateForm)
                        $Str173

                        #18.1.1.2 (L1) Ensure 'Prevent enabling lock screen slide show' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag174 = '18.1.1.2'
                        $Count18++
		                $Desc174 = 'Ensure Prevent enabling lock screen slide show is set to Enabled (Scored)'
                        $Lvl174 = 'L1'
		                $NoLckScrnSldSw = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Personalization' -Name NoLockScreenSlideshow -ErrorAction 'silentlycontinue'
                        if (!$NoLckScrnSldSw){
                            $Res174 = '2'}
                        Else{
                        $PolRes174 = $NoLckScrnSldSw | Select-Object -ExpandProperty NoLockScreenSlideshow
                        if ($PolRes174 -eq '1'){
                            $Res174 = '1'} else {$Res174 = '2'}
                            }
		                $Str174 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag174 + ';' + $Desc174 + ';' + $Res174 + ';' + $Using:CurntDateForm)
                        $Str174

                        #==============================================================================================================================================================
                        #18.1.2.1 Handwriting personalization
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Globalization.admx/adml that is included with the Microsoft Windows 8.0 & Server 2012
                        #   (non-R2) Administrative Templates (or newer).
                        #==============================================================================================================================================================
                        
                        #18.1.2.2 (L1) Ensure 'Allow input personalization' is set to 'Disabled' (Scored) W2K16
                        $Tag414 = '18.1.2.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc414 = 'Ensure Allow input personalization is set to Disabled (Scored)'
                        $Lvl414 = 'L1'
		                $NoLckScrnSldSw = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\InputPersonalization' -Name AllowInputPersonalization -ErrorAction 'silentlycontinue'
                        if (!$NoLckScrnSldSw){
                            $Res414 = '2'}
                        Else{
                        $PolRes414 = $NoLckScrnSldSw | Select-Object -ExpandProperty AllowInputPersonalization
                        if ($PolRes414 -eq '0'){
                            $Res414 = '1'} else {$Res414 = '2'}
                            }
		                $Str414 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag414 + ';' + $Desc414 + ';' + $Res414 + ';' + $Using:CurntDateForm)
                        $Str414
                        }

                        #18.1.3 (L2) Ensure 'Allow Online Tips' is set to 'Disabled' (Scored) W2K16
                        $Tag415 = '18.1.3'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc415 = 'Ensure Allow Online Tips is set to Disabled (Scored)'
                        $Lvl415 = 'L1'
		                $NoLckScrnSldSw = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name AllowOnlineTips -ErrorAction 'silentlycontinue'
                        if (!$NoLckScrnSldSw){
                            $Res415 = '2'}
                        Else{
                        $PolRes415 = $NoLckScrnSldSw | Select-Object -ExpandProperty AllowOnlineTips
                        if ($PolRes415 -eq '0'){
                            $Res415 = '1'} else {$Res415 = '2'}
                            }
		                $Str415 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag415 + ';' + $Desc415 + ';' + $Res415 + ';' + $Using:CurntDateForm)
                        $Str415
                        }

                        #==============================================================================================================================================================
                        #18.2 LAPS
                        #   This section contains recommendations for configuring Microsoft Local Administrator Password Solution (LAPS).
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "AdmPwd.admx/adml" that is included with LAPS.
                        #==============================================================================================================================================================
                        #18.2.1 (L1) Ensure LAPS AdmPwd GPO Extension / CSE is installed (MS only) (Scored) W2K12 W2K16
                        #   In May 2015, Microsoft released the Local Administrator Password Solution (LAPS) tool, which is free and supported software that allows an organization to 
                        #   automatically set randomized and unique local Administrator account passwords on domain-attached workstations and member servers. The passwords are stored
                        #   in a confidential attribute of the domain computer account and can be retrieved from Active Directory by approved Sysadmins when needed.
                        $Tag318 = '18.2.1'
                        if ($SrvType -eq 'MS'){
                            $Count18++
		                    $Desc318 = 'Ensure LAPS AdmPwd GPO Extension CSE is installed (MS only) (Scored)'
                            $Lvl318 = 'L1'
		                    $LAPSDllName = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\GPExtensions\{D76B9641-3288-4f75-942D-087DE603E3EA}' -Name DllName -ErrorAction 'silentlycontinue'
                            if (!$LAPSDllName){
                                $Res318 = '2'}
                            Else{
                            $PolRes318 = $LAPSDllName | Select-Object -ExpandProperty DllName
                            if ($PolRes318 -eq 'C:\Program Files\LAPS\CSE\AdmPwd.dll'){
                                $Res318 = '1'} else {$Res318 = '2'}
                                }
		                    $Str318 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag318 + ';' + $Desc318 + ';' + $Res318 + ';' + $Using:CurntDateForm)
                            $Str318
                            }

                        #==============================================================================================================================================================
                        #18.2.2 (L1) Ensure 'Do not allow password expiration time longer than required by policy' is set to 'Enabled' (MS only) (Scored) - 175 W2K12 W2K16
                        $Tag175 = '18.2.2'
                        if ($SrvType -eq 'MS'){
						$Count18++
		                $Desc175 = 'Ensure Do not allow password expiration time longer than required by policy is set to Enabled (MS only) (Scored)'
                        $Lvl175 = 'L1'
		                $LAPSPswExpPrtcEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft Services\AdmPwd' -Name PwdExpirationProtectionEnabled -ErrorAction 'silentlycontinue'
                        if (!$LAPSPswExpPrtcEnb){
                            $Res175 = '2'}
                        Else{
                        $PolRes175 = $LAPSPswExpPrtcEnb | Select-Object -ExpandProperty PwdExpirationProtectionEnabled
                        if ($PolRes175 -eq '1'){
                            $Res175 = '1'} else {$Res175 = '2'}
                            }
		                $Str175 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag175 + ';' + $Desc175 + ';' + $Res175 + ';' + $Using:CurntDateForm)
                        $Str175
						}

                        #==============================================================================================================================================================
                        #18.2.3 (L1) Ensure 'Enable Local Admin Password Management' is set to 'Enabled' (MS only) (Scored) - 176 W2K12 W2K16
                        $Tag176 = '18.2.3'
                        if ($SrvType -eq 'MS'){
						$Count18++
		                $Desc176 = 'Ensure Enable Local Admin Password Management is set to Enabled (MS only) (Scored)'
                        $Lvl176 = 'L1'
		                $LAPSLclAdmPsw = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft Services\AdmPwd' -Name AdmPwdEnabled -ErrorAction 'silentlycontinue'
                        if (!$LAPSLclAdmPsw){
                            $Res176 = '2'}
                        Else{
                        $PolRes176 = $LAPSLclAdmPsw | Select-Object -ExpandProperty AdmPwdEnabled
                        if ($PolRes176 -eq '1'){
                            $Res176 = '1'} else {$Res176 = '2'}
                            }
		                $Str176 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag176 + ';' + $Desc176 + ';' + $Res176 + ';' + $Using:CurntDateForm)
                        $Str176
						}

                        #==============================================================================================================================================================
                        #18.2.4 (L1) Ensure 'Password Settings: Password Complexity' is set to 'Enabled: Large letters + small letters + numbers + special characters' (MS only) (Scored) - 177 W2K12 W2K16
                        $Tag177 = '18.2.4'
                        if ($SrvType -eq 'MS'){
						$Count18++
		                $Desc177 = 'Ensure Password Settings: Password Complexity is set to Enabled: Large letters + small letters + numbers + special characters (MS only) (Scored)'
                        $Lvl177 = 'L1'
		                $LAPSPswCmplx = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft Services\AdmPwd' -Name PasswordComplexity -ErrorAction 'silentlycontinue'
                        if (!$LAPSPswCmplx){
                            $Res177 = '2'}
                        Else{
                        $PolRes177 = $LAPSPswCmplx | Select-Object -ExpandProperty PasswordComplexity
                        if ($PolRes177 -eq '4'){
                            $Res177 = '1'} else {$Res177 = '2'}
                            }
		                $Str177 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag177 + ';' + $Desc177 + ';' + $Res177 + ';' + $Using:CurntDateForm)
                        $Str177
						}

                        #==============================================================================================================================================================
                        #18.2.5 (L1) Ensure 'Password Settings: Password Length' is set to 'Enabled: 15 or more' (MS only) (Scored) - 178 W2K12 W2K16
                        $Tag178 = '18.2.5'
                        if ($SrvType -eq 'MS'){
						$Count18++
		                $Desc178 = 'Ensure Password Settings: Password Length is set to Enabled: 15 or more (MS only) (Scored)'
                        $Lvl178 = 'L1'
		                $LAPSPswLngth = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft Services\AdmPwd' -Name PasswordLength -ErrorAction 'silentlycontinue'
                        if (!$LAPSPswLngth){
                            $Res178 = '2'}
                        Else{
                        $LAPSPassLngth = $LAPSPswLngth | Select-Object -ExpandProperty PasswordLength
                        $PolRes178 = $LAPSPassLngth -as [int]
						if ($PolRes178 -ge '15'){
                            $Res178 = '1'} else {$Res178 = '2'}
                            }
		                $Str178 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag178 + ';' + $Desc178 + ';' + $Res178 + ';' + $Using:CurntDateForm)
                        $Str178
						}
                                                
                        #==============================================================================================================================================================
                        #18.2.6 (L1) Ensure 'Password Settings: Password Age (Days)' is set to 'Enabled: 30 or fewer' (MS only) (Scored) - 179 W2K12 W2K16
                        $Tag179 = '18.2.6'
                        if ($SrvType -eq 'MS'){
						$Count18++
		                $Desc179 = 'Ensure Password Settings: Password Age (Days) is set to Enabled: 30 or fewer (MS only) (Scored)'
                        $Lvl179 = 'L1'
		                $LAPSPswAgeDays = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft Services\AdmPwd' -Name PasswordAgeDays -ErrorAction 'silentlycontinue'
                        if (!$LAPSPswAgeDays){
                            $Res179 = '2'}
                        Else{
                        $LAPSPassAgeDays = $LAPSPswAgeDays | Select-Object -ExpandProperty PasswordAgeDays
                        $PolRes179 = $LAPSPassAgeDays-as [int]
						if ($PolRes179 -le '30'){
                            $Res179 = '1'} else {$Res179 = '2'}
                            }
		                $Str179 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag179 + ';' + $Desc179 + ';' + $Res179 + ';' + $Using:CurntDateForm)
                        $Str179
						}

                        #==============================================================================================================================================================
                        #18.3 MSS (Legacy)
                        #   This section contains recommendations for the Microsoft Solutions for Security (MSS) settings.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "MSS-legacy.admx/adml" that is included with Microsoft 
                        #   Security Compliance Manager (SCM).
                        #==============================================================================================================================================================

                        #18.3.1 (L1) Ensure 'MSS: (AutoAdminLogon) Enable Automatic Logon (not recommended)' is set to 'Disabled' (Scored) W2K12
                        $Tag180 = '18.3.1'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc180 = 'Ensure MSS: (AutoAdminLogon) Enable Automatic Logon (not recommended) is set to Disabled (Scored)'
                        $Lvl180 = 'L1'
		                $AutoAdmLog = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon -ErrorAction 'silentlycontinue'
                        if (!$AutoAdmLog){
                            $Res180 = '2'}
                        Else{
                        $PolRes180 = $AutoAdmLog | Select-Object -ExpandProperty AutoAdminLogon
                        if ($PolRes180 -eq '0'){
                            $Res180 = '1'} else {$Res180 = '2'}
                            }
		                $Str180 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag180 + ';' + $Desc180 + ';' + $Res180 + ';' + $Using:CurntDateForm)
                        $Str180
                        }

                        #18.3.1 (L1) Ensure 'Apply UAC restrictions to local accounts on network logons' is set to 'Enabled' (MS only) (Scored) W2K16
                        $Tag416 = '18.3.1'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc416 = 'Ensure Apply UAC restrictions to local accounts on network logons is set to Enabled (MS only) (Scored)'
                        $Lvl416 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' -Name LocalAccountTokenFilterPolicy -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res416 = '2'}
                        Else{
                        $PolRes416 = $TknFiltLclAcc | Select-Object -ExpandProperty LocalAccountTokenFilterPolicy
                        if ($PolRes416 -eq '1'){
                            $Res416 = '1'} else {$Res416 = '2'}
                            }
		                $Str416 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag416 + ';' + $Desc416 + ';' + $Res416 + ';' + $Using:CurntDateForm)
                        $Str416
                        }

                        #18.3.2 (L1) Ensure 'Configure SMB v1 client driver' is set to 'Enabled: Disable driver' (Scored) W2K16
                        $Tag417 = '18.3.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc417 = 'Ensure Configure SMB v1 client driver is set to Enabled: Disable driver (Scored)'
                        $Lvl417 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\mrxsmb10' -Name Start -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res417 = '2'}
                        Else{
                        $PolRes417 = $TknFiltLclAcc | Select-Object -ExpandProperty Start
                        if ($PolRes417 -eq '4'){
                            $Res417 = '1'} else {$Res417 = '2'}
                            }
		                $Str417 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag417 + ';' + $Desc417 + ';' + $Res417 + ';' + $Using:CurntDateForm)
                        $Str417
                        }

                        #18.3.2 (L1) Ensure 'MSS: (DisableIPSourceRouting IPv6) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled' (Scored) W2K12
                        $Tag181 = '18.3.2'
                        if ($OSVersion -eq 'W2K12R2'){
		                $Count18++
		                $Desc181 = 'Ensure MSS: (DisableIPSourceRouting IPv6) IP source routing protection level (protects against packet spoofing) is set to Enabled: Highest protection source routing is completely disabled (Scored)'
                        $Lvl181 = 'L1'
		                $DisIPv6SrcRout = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip6\Parameters' -Name DisableIPSourceRouting -ErrorAction 'silentlycontinue'
                        if (!$DisIPSrcRout){
                            $Res181 = '2'}
                        Else{
                        $PolRes181 = $DisIPv6SrcRout | Select-Object -ExpandProperty DisableIPSourceRouting
                        if ($PolRes181 -eq '1'){
                            $Res181 = '1'} else {$Res181 = '2'}
                            }
		                $Str181 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag181 + ';' + $Desc181 + ';' + $Res181 + ';' + $Using:CurntDateForm)
                        $Str181
                        }

                        #18.3.3 (L1) Ensure 'Configure SMB v1 server' is set to 'Disabled' (Scored) W2K16
                        $Tag418 = '18.3.3'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc418 = 'Ensure Configure SMB v1 server is set to Disabled (Scored)'
                        $Lvl418 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters' -Name SMB1 -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res418 = '2'}
                        Else{
                        $PolRes418 = $TknFiltLclAcc | Select-Object -ExpandProperty SMB1
                        if ($PolRes418 -eq '0'){
                            $Res418 = '1'} else {$Res418 = '2'}
                            }
		                $Str418 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag418 + ';' + $Desc418 + ';' + $Res418 + ';' + $Using:CurntDateForm)
                        $Str418
                        }

                        #18.3.3 (L1) Ensure 'MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled' (Scored) W2K12
                        $Tag182 = '18.3.3'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc182 = 'Ensure MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) is set to Enabled: Highest protection source routing is completely disabled (Scored)'
                        $Lvl182 = 'L1'
		                $DisIPSrcRout = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name DisableIPSourceRouting -ErrorAction 'silentlycontinue'
                        if (!$DisIPSrcRout){
                            $Res182 = '2'}
                        Else{
                        $PolRes182 = $DisIPSrcRout | Select-Object -ExpandProperty DisableIPSourceRouting
                        if ($PolRes182 -eq '1'){
                            $Res182 = '1'} else {$Res182 = '2'}
                            }
		                $Str182 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag182 + ';' + $Desc182 + ';' + $Res182 + ';' + $Using:CurntDateForm)
                        $Str182
                        }

                        #18.3.4 (L1) Ensure 'MSS: (EnableICMPRedirect) Allow ICMP redirects to override OSPF generated routes' is set to 'Disabled' (Scored) W2K12
                        $Tag183 = '18.3.4'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc183 = 'Ensure MSS: (EnableICMPRedirect) Allow ICMP redirects to override OSPF generated routes is set to Disabled (Scored)'
                        $Lvl183 = 'L1'
		                $EnbICMPRed = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name EnableICMPRedirect -ErrorAction 'silentlycontinue'
                        if (!$EnbICMPRed){
                            $Res183 = '2'}
                        Else{
                        $PolRes183 = $EnbICMPRed | Select-Object -ExpandProperty EnableICMPRedirect
                        if ($PolRes183 -eq '0'){
                            $Res183 = '1'} else {$Res183 = '2'}
                            }
		                $Str183 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag183 + ';' + $Desc183 + ';' + $Res183 + ';' + $Using:CurntDateForm)
                        $Str183
                        }

                        #18.3.4 (L1) Ensure 'Enable Structured Exception Handling Overwrite Protection (SEHOP)' is set to 'Enabled' (Scored) W2K16
                        $Tag419 = '18.3.4'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc419 = 'Ensure Enable Structured Exception Handling Overwrite Protection (SEHOP) is set to Enabled (Scored)'
                        $Lvl419 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\Session Manager\kernel' -Name DisableExceptionChainValidation -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res419 = '2'}
                        Else{
                        $PolRes419 = $TknFiltLclAcc | Select-Object -ExpandProperty DisableExceptionChainValidation
                        if ($PolRes419 -eq '1'){
                            $Res419 = '1'} else {$Res419 = '2'}
                            }
		                $Str419 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag419 + ';' + $Desc419 + ';' + $Res419 + ';' + $Using:CurntDateForm)
                        $Str419
                        }

                        #18.3.5 (L2) Ensure 'MSS: (KeepAliveTime) How often keep-alive packets are sent in milliseconds' is set to 'Enabled: 300,000 or 5 minutes (recommended)' (Scored) W2K12
                        $Tag184 = '18.3.5'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc184 = 'Ensure MSS: (KeepAliveTime) How often keep-alive packets are sent in milliseconds is set to Enabled: 300000 or 5 minutes (recommended) (Scored)'
                        $Lvl184 = 'L1'
		                $KeepAlvTime = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name KeepAliveTime -ErrorAction 'silentlycontinue'
                        if (!$KeepAlvTime){
                            $Res184 = '2'}
                        Else{
                        $KeepAliveTime = $KeepAlvTime | Select-Object -ExpandProperty KeepAliveTime
                        $PolRes184 = $KeepAliveTime -as [int]
		                if ($PolRes184 -eq '300000'){
                            $Res184 = '1'} else {$Res184 = '2'}
                            }
		                $Str184 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag184 + ';' + $Desc184 + ';' + $Res184 + ';' + $Using:CurntDateForm)
                        $Str184
                        }

                        #18.3.5 (L1) Ensure 'Turn on Windows Defender protection against Potentially Unwanted Applications' is set to 'Enabled' (Scored) W2K16
                        $Tag420 = '18.3.5'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc420 = 'Ensure Turn on Windows Defender protection against Potentially Unwanted Applications is set to Enabled (Scored)'
                        $Lvl420 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\MpEngine' -Name MpEnablePus -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res420 = '2'}
                        Else{
                        $PolRes420 = $TknFiltLclAcc | Select-Object -ExpandProperty MpEnablePus
                        if ($PolRes420 -eq '1'){
                            $Res420 = '1'} else {$Res420 = '2'}
                            }
		                $Str420 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag420 + ';' + $Desc420 + ';' + $Res420 + ';' + $Using:CurntDateForm)
                        $Str420
                        }

                        #18.3.6 (L1) Ensure 'MSS: (NoNameReleaseOnDemand) Allow the computer to ignore NetBIOS name release requests except from WINS servers' is set to 'Enabled' (Scored) W2K12
                        $Tag185 = '18.3.6'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc185 = 'Ensure MSS: (NoNameReleaseOnDemand) Allow the computer to ignore NetBIOS name release requests except from WINS servers is set to Enabled (Scored)'
                        $Lvl185 = 'L1'
		                $NoNmRelondemd = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\NetBT\Parameters' -Name nonamereleaseondemand -ErrorAction 'silentlycontinue'
                        if (!$NoNmRelondemd){
                            $Res185 = '2'}
                        Else{
                        $PolRes185 = $NoNmRelondemd | Select-Object -ExpandProperty nonamereleaseondemand
                        if ($PolRes185 -eq '1'){
                            $Res185 = '1'} else {$Res185 = '2'}
                            }
		                $Str185 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag185 + ';' + $Desc185 + ';' + $Res185 + ';' + $Using:CurntDateForm)
                        $Str185
                        }

                        #18.3.6 (L1) Ensure 'WDigest Authentication' is set to 'Disabled' (Scored) W2K16
                        $Tag421 = '18.3.6'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc421 = 'Ensure WDigest Authentication is set to Disabled (Scored)'
                        $Lvl421 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest' -Name UseLogonCredential -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res421 = '2'}
                        Else{
                        $PolRes421 = $UseLgnCred | Select-Object -ExpandProperty UseLogonCredential
                        if ($PolRes421 -eq '0'){
                            $Res421 = '1'} else {$Res421 = '2'}
                            }
		                $Str421 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag421 + ';' + $Desc421 + ';' + $Res421 + ';' + $Using:CurntDateForm)
                        $Str421
                        }

                        #18.3.7 (L2) Ensure 'MSS: (PerformRouterDiscovery) Allow IRDP to detect and configure Default Gateway addresses (could lead to DoS)' is set to 'Disabled' (Scored) W2K12
                        $Tag186 = '18.3.7'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc186 = 'Ensure MSS: (PerformRouterDiscovery) Allow IRDP to detect and configure Default Gateway addresses (could lead to DoS) is set to Disabled (Scored)'
                        $Lvl186 = 'L1'
		                $PrfRoutDisc = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name PerformRouterDiscovery -ErrorAction 'silentlycontinue'
                        if (!$PrfRoutDisc){
                            $Res186 = '2'}
                        Else{
                        $PolRes186 = $PrfRoutDisc | Select-Object -ExpandProperty PerformRouterDiscovery
                        if ($PolRes186 -eq '0'){
                            $Res186 = '1'} else {$Res186 = '2'}
                            }
		                $Str186 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag186 + ';' + $Desc186 + ';' + $Res186 + ';' + $Using:CurntDateForm)
                        $Str186
                        }

                        #18.3.8 (L1) Ensure 'MSS: (SafeDllSearchMode) Enable Safe DLL search mode (recommended)' is set to 'Enabled' (Scored) W2K12
                        $Tag187 = '18.3.8'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc187 = 'Ensure MSS: (SafeDllSearchMode) Enable Safe DLL search mode (recommended) is set to Enabled (Scored)'
                        $Lvl187 = 'L1'
		                $SfdllSrchMod = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Session Manager' -Name SafeDllSearchMode -ErrorAction 'silentlycontinue'
                        if (!$SfdllSrchMod){
                            $Res187 = '2'}
                        Else{
                        $PolRes187 = $SfdllSrchMod | Select-Object -ExpandProperty SafeDllSearchMode
                        if ($PolRes187 -eq '1'){
                            $Res187 = '1'} else {$Res187 = '2'}
                            }
		                $Str187 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag187 + ';' + $Desc187 + ';' + $Res187 + ';' + $Using:CurntDateForm)
                        $Str187
                        }

                        #18.3.9 (L1) Ensure 'MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended)' is set to 'Enabled: 5 or fewer seconds' (Scored) W2K12
                        $Tag188 = '18.3.9'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc188 = 'Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored)'
                        $Lvl188 = 'L1'
		                $ScrSvrGrcPer = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name ScreenSaverGracePeriod -ErrorAction 'silentlycontinue'
                        if (!$ScrSvrGrcPer){
                            $Res188 = '2'}
                        Else{
                        $PolRes188 = $ScrSvrGrcPer | Select-Object -ExpandProperty ScreenSaverGracePeriod
                        if ($PolRes188 -eq '1'){
                            $Res188 = '1'} else {$Res188 = '2'}
                            }
		                $Str188 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag188 + ';' + $Desc188 + ';' + $Res188 + ';' + $Using:CurntDateForm)
                        $Str188
                        }

                        #18.3.10 (L2) Ensure 'MSS: (TcpMaxDataRetransmissions IPv6) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3' (Scored) W2K12
                        $Tag189 = '18.3.10'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc189 = 'Ensure MSS: (TcpMaxDataRetransmissions IPv6) How many times unacknowledged data is retransmitted is set to Enabled: 3 (Scored)'
		                $MaxDtv6ReTx = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\TCPIP6\Parameters' -Name tcpmaxdataretransmissions -ErrorAction 'silentlycontinue'
                        if (!$MaxDtv6ReTx){
                            $Res189 = '2'}
                        Else{
                        $PolRes189 = $MaxDtv6ReTx | Select-Object -ExpandProperty tcpmaxdataretransmissions
                        if ($PolRes189 -eq '1'){
                            $Res189 = '1'} else {$Res189 = '2'}
                            }
		                $Str189 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag189 + ';' + $Desc189 + ';' + $Res189 + ';' + $Using:CurntDateForm)
                        $Str189
                        }

                        #18.3.11 (L2) Ensure 'MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3' (Scored) W2K12
                        $Tag190 = '18.3.11'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc190 = 'Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored)'
                        $Lvl190 = 'L1'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name tcpmaxdataretransmissions -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res190 = '2'}
                        Else{
                        $PolRes190 = $MaxDataReTx | Select-Object -ExpandProperty tcpmaxdataretransmissions
                        if ($PolRes190 -eq '1'){
                            $Res190 = '1'} else {$Res190 = '2'}
                            }
		                $Str190 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag190 + ';' + $Desc190 + ';' + $Res190 + ';' + $Using:CurntDateForm)
                        $Str190
                        }

                        #18.3.12 (L1) Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored) W2K12
                        $Tag191 = '18.3.12'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc191 = 'Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored)'
                        $Lvl191 = 'L1'
		                $WarnLvl = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\Eventlog\Security' -Name WarningLevel -ErrorAction 'silentlycontinue'
                        if (!$WarnLvl){
                            $Res191 = '2'}
                        Else{
                        $PolRes191 = $WarnLvl | Select-Object -ExpandProperty WarningLevel
                        if ($PolRes191 -eq '1'){
                            $Res191 = '1'} else {$Res191 = '2'}
                            }
		                $Str191 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag191 + ';' + $Desc191 + ';' + $Res191 + ';' + $Using:CurntDateForm)
                        $Str191
                        }

                        #===================================================================================================================================================
                        #18.4 MSS (Legacy)
                        #   This section contains recommendations for the Microsoft Solutions for Security (MSS) settings.
                        #   This Group Policy section is provided by the Group Policy template MSS-legacy.admx/adml that is available from this TechNet blog post: 
                        #   The MSS settings – Microsoft Security Guidance blog
                        #===================================================================================================================================================

                        #18.4.1 (L1) Ensure 'MSS: (AutoAdminLogon) Enable Automatic Logon (not recommended)' is set to 'Disabled' (Scored) W2K16
                        $Tag422 = '18.4.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc422 = 'Ensure MSS: (AutoAdminLogon) Enable Automatic Logon (not recommended) is set to Disabled (Scored)'
                        $Lvl422 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name AutoAdminLogon -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res422 = '2'}
                        Else{
                        $PolRes422 = $UseLgnCred | Select-Object -ExpandProperty AutoAdminLogon
                        if ($PolRes422 -eq '0'){
                            $Res422 = '1'} else {$Res422 = '2'}
                            }
		                $Str422 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag422 + ';' + $Desc422 + ';' + $Res422 + ';' + $Using:CurntDateForm)
                        $Str422
						}

                        #18.4.2 (L1) Ensure 'MSS: (DisableIPSourceRouting IPv6) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled' (Scored) W2K16
                        $Tag423 = '18.4.2'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc423 = 'Ensure MSS: (DisableIPSourceRouting IPv6) IP source routing protection level (protects against packet spoofing) is set to Enabled: Highest protection, source routing is completely disabled (Scored)'
                        $Lvl423 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters' -Name DisableIPSourceRouting -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res423 = '2'}
                        Else{
                        $PolRes423 = $UseLgnCred | Select-Object -ExpandProperty DisableIPSourceRouting
                        if ($PolRes423 -eq '2'){
                            $Res423 = '1'} else {$Res423 = '2'}
                            }
		                $Str423 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag423 + ';' + $Desc423 + ';' + $Res423 + ';' + $Using:CurntDateForm)
                        $Str423
						}

                        #18.4.3 (L1) Ensure 'MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled' (Scored) W2K16
                        $Tag424 = '18.4.3'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc424 = 'Ensure MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) is set to Enabled: Highest protection, source routing is completely disabled (Scored)'
                        $Lvl424 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name DisableIPSourceRouting -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res424 = '2'}
                        Else{
                        $PolRes424 = $UseLgnCred | Select-Object -ExpandProperty DisableIPSourceRouting
                        if ($PolRes424 -eq '2'){
                            $Res424 = '1'} else {$Res424 = '2'}
                            }
		                $Str424 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag424 + ';' + $Desc424 + ';' + $Res424 + ';' + $Using:CurntDateForm)
                        $Str424
						}

                        #18.4.4 (L1) Ensure 'MSS: (EnableICMPRedirect) Allow ICMP redirects to override OSPF generated routes' is set to 'Disabled' (Scored) W2K16
                        $Tag425 = '18.4.4'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc425 = 'Ensure MSS: (EnableICMPRedirect) Allow ICMP redirects to override OSPF generated routes is set to Disabled (Scored)'
                        $Lvl425 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name EnableICMPRedirect -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res425 = '2'}
                        Else{
                        $PolRes425 = $UseLgnCred | Select-Object -ExpandProperty EnableICMPRedirect
                        if ($PolRes425 -eq '0'){
                            $Res425 = '1'} else {$Res425 = '2'}
                            }
		                $Str425 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag425 + ';' + $Desc425 + ';' + $Res425 + ';' + $Using:CurntDateForm)
                        $Str425
						}

                        #18.4.5 (L2) Ensure 'MSS: (KeepAliveTime) How often keep-alive packets are sent in milliseconds' is set to 'Enabled: 300,000 or 5 minutes (recommended)' (Scored) W2K16
                        $Tag426 = '18.4.5'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc426 = 'Ensure MSS: (KeepAliveTime) How often keep-alive packets are sent in milliseconds is set to Enabled: 300000 or 5 minutes (recommended) (Scored)'
                        $Lvl426 = 'L1'
		                $KeepAlvTime = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name KeepAliveTime -ErrorAction 'silentlycontinue'
                        if (!$KeepAlvTime){
                            $Res426 = '2'}
                        Else{
                        $KeepAliveTime = $KeepAlvTime | Select-Object -ExpandProperty KeepAliveTime
                        $PolRes426 = $KeepAliveTime -as [int]
		                if ($PolRes426 -eq '300000'){
                            $Res426 = '1'} else {$Res426 = '2'}
                            }
		                $Str426 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag426 + ';' + $Desc426 + ';' + $Res426 + ';' + $Using:CurntDateForm)
                        $Str426
                        }

                        #18.4.6 (L1) Ensure 'MSS: (NoNameReleaseOnDemand) Allow the computer to ignore NetBIOS name release requests except from WINS servers' is set to 'Enabled' (Scored) W2K16
                        $Tag427 = '18.4.6'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc427 = 'Ensure MSS: (NoNameReleaseOnDemand) Allow the computer to ignore NetBIOS name release requests except from WINS servers is set to Enabled (Scored)'
                        $Lvl427 = 'L1'
		                $NoNmRelondemd = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\NetBT\Parameters' -Name nonamereleaseondemand -ErrorAction 'silentlycontinue'
                        if (!$NoNmRelondemd){
                            $Res427 = '2'}
                        Else{
                        $PolRes427 = $NoNmRelondemd | Select-Object -ExpandProperty nonamereleaseondemand
                        if ($PolRes427 -eq '1'){
                            $Res427 = '1'} else {$Res427 = '2'}
                            }
		                $Str427 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag427 + ';' + $Desc427 + ';' + $Res427 + ';' + $Using:CurntDateForm)
                        $Str427
                        }

                        #18.4.7 (L2) Ensure 'MSS: (PerformRouterDiscovery) Allow IRDP to detect and configure Default Gateway addresses (could lead to DoS)' is set to 'Disabled' (Scored) W2K16
                        $Tag428 = '18.4.7'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc428 = 'Ensure MSS: (PerformRouterDiscovery) Allow IRDP to detect and configure Default Gateway addresses (could lead to DoS) is set to Disabled (Scored)'
                        $Lvl428 = 'L1'
		                $PrfRoutDisc = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name PerformRouterDiscovery -ErrorAction 'silentlycontinue'
                        if (!$PrfRoutDisc){
                            $Res428 = '2'}
                        Else{
                        $PolRes428 = $PrfRoutDisc | Select-Object -ExpandProperty PerformRouterDiscovery
                        if ($PolRes428 -eq '0'){
                            $Res428 = '1'} else {$Res428 = '2'}
                            }
		                $Str428 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag428 + ';' + $Desc428 + ';' + $Res428 + ';' + $Using:CurntDateForm)
                        $Str428
                        }

                        #18.4.8 (L1) Ensure 'MSS: (SafeDllSearchMode) Enable Safe DLL search mode (recommended)' is set to 'Enabled' (Scored) W2K16
                        $Tag429 = '18.4.8'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc429 = 'Ensure MSS: (SafeDllSearchMode) Enable Safe DLL search mode (recommended) is set to Enabled (Scored)'
                        $Lvl429 = 'L1'
		                $SfdllSrchMod = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Control\Session Manager' -Name SafeDllSearchMode -ErrorAction 'silentlycontinue'
                        if (!$SfdllSrchMod){
                            $Res429 = '2'}
                        Else{
                        $PolRes429 = $SfdllSrchMod | Select-Object -ExpandProperty SafeDllSearchMode
                        if ($PolRes429 -eq '1'){
                            $Res429 = '1'} else {$Res429 = '2'}
                            }
		                $Str429 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag429 + ';' + $Desc429 + ';' + $Res429 + ';' + $Using:CurntDateForm)
                        $Str429
                        }

                        #18.4.9 (L1) Ensure 'MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended)' is set to 'Enabled: 5 or fewer seconds' (Scored) W2K16
                        $Tag431 = '18.4.9'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc431 = 'Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored)'
                        $Lvl431 = 'L1'
		                $ScrSvrGrcPer = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name ScreenSaverGracePeriod -ErrorAction 'silentlycontinue'
                        if (!$ScrSvrGrcPer){
                            $Res431 = '2'}
                        Else{
                        $PolRes431 = $ScrSvrGrcPer | Select-Object -ExpandProperty ScreenSaverGracePeriod
                        if ($PolRes431 -eq '5'){
                            $Res431 = '1'} else {$Res431 = '2'}
                            }
		                $Str431 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag431 + ';' + $Desc431 + ';' + $Res431 + ';' + $Using:CurntDateForm)
                        $Str431
                        }

                        #18.4.10 (L2) Ensure 'MSS: (TcpMaxDataRetransmissions IPv6) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3' (Scored) W2K16
                        $Tag432 = '18.4.10'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc432 = 'Ensure MSS: (TcpMaxDataRetransmissions IPv6) How many times unacknowledged data is retransmitted is set to Enabled: 3 (Scored)'
		                $MaxDtv6ReTx = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\TCPIP6\Parameters' -Name tcpmaxdataretransmissions -ErrorAction 'silentlycontinue'
                        if (!$MaxDtv6ReTx){
                            $Res432 = '2'}
                        Else{
                        $PolRes432 = $MaxDtv6ReTx | Select-Object -ExpandProperty tcpmaxdataretransmissions
                        if ($PolRes432 -eq '1'){
                            $Res432 = '1'} else {$Res432 = '2'}
                            }
		                $Str432 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag432 + ';' + $Desc432 + ';' + $Res432 + ';' + $Using:CurntDateForm)
                        $Str432
                        }

                        #18.4.11 (L2) Ensure 'MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3' (Scored) W2K16
                        $Tag433 = '18.4.11'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc433 = 'Ensure MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) is set to Enabled: 5 or fewer seconds (Scored)'
                        $Lvl433 = 'L1'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\Tcpip\Parameters' -Name tcpmaxdataretransmissions -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res433 = '2'}
                        Else{
                        $PolRes433 = $MaxDataReTx | Select-Object -ExpandProperty tcpmaxdataretransmissions
                        if ($PolRes433 -eq '1'){
                            $Res433 = '1'} else {$Res433 = '2'}
                            }
		                $Str433 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag433 + ';' + $Desc433 + ';' + $Res433 + ';' + $Using:CurntDateForm)
                        $Str433
                        }

                        #18.4.12 (L1) Ensure 'MSS: (WarningLevel) Percentage threshold for the security event log at which the system will generate a warning' is set to 'Enabled: 90% or less' (Scored) W2K16
                        $Tag434 = '18.4.12'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc434 = 'Ensure MSS: (WarningLevel) Percentage threshold for the security event log at which the system will generate a warning is set to Enabled: 90% or less (Scored)'
                        $Lvl434 = 'L1'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\Eventlog\Security' -Name WarningLevel -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res434 = '2'}
                        Else{
                        $PolRes434 = $MaxDataReTx | Select-Object -ExpandProperty WarningLevel
                        if ($PolRes434 -eq '0x0000005a (90) (or less)'){
                            $Res434 = '1'} else {$Res434 = '2'}
                            }
		                $Str434 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag434 + ';' + $Desc434 + ';' + $Res434 + ';' + $Using:CurntDateForm)
                        $Str434
                        }

                        #===================================================================================================================================================
                        #18.4.1 Background Intelligent Transfer Service (BITS)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.2 BranchCache
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.3 DirectAccess Client Experience Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.4 DNS Client
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.5 Hotspot Authentication
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.6 Lanman Server
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.7 Lanman Workstation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #===================================================================================================================================================
                        #18.4.8 Link-Layer Topology Discovery
                        #   This section contains recommendations for Link-Layer Topology Discovery settings.
                        #===================================================================================================================================================

                        #18.4.8.1 (L2) Ensure 'Turn on Mapper I/O (LLTDIO) driver' is set to 'Disabled' (Scored) W2K12
                        $Tag192 = '18.4.8.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc192 = 'Ensure Turn on Mapper I/O (LLTDIO) driver is set to Disabled (Scored)'
                        $Lvl192 = 'L2'
		                $AlwRsponDm = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\LLTD' -Name AllowRspndrOnDomain -ErrorAction 'silentlycontinue'
                        $AlwRsponPub = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\LLTD' -Name AllowRspndrOnPublicNet -ErrorAction 'silentlycontinue'
                        $EnbRspondr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\LLTD' -Name EnableRspndr -ErrorAction 'silentlycontinue'
                        $PrhRsponOnPrv = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\LLTD' -Name ProhibitRspndrOnPrivateNet -ErrorAction 'silentlycontinue'
                        if ((!$AlwRsponDm) -and (!$AlwRsponPub) -and (!$EnbRspondr) -and (!$PrhRsponOnPrv)) {
                            $Res192 = '1'}
                        Else{
                        $Pol1Res192 = $AlwRsponDm | Select-Object -ExpandProperty AllowRspndrOnDomain
                        $Pol2Res192 = $AlwRsponPub | Select-Object -ExpandProperty AllowRspndrOnPublicNet
                        $Pol3Res192 = $EnbRspondr | Select-Object -ExpandProperty EnableRspndr
                        $Pol4Res192 = $PrhRsponOnPrv | Select-Object -ExpandProperty ProhibitRspndrOnPrivateNet
                        if (($PolRes192 -eq '1') -or ($Pol2Res192 -eq '1') -or ($Pol3Res192 -eq '1') -or ($Pol4Res192 -eq '1')) {
                            $Res192 = '1'} else {$Res192 = '2'}
                            }
		                $Str192 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag192 + ';' + $Desc192 + ';' + $Res192 + ';' + $Using:CurntDateForm)
                        $Str192
                        }

                        #========================================================================================================================================================
                        #18.4.9 Microsoft Peer-to-Peer Networking Services
                        #This section contains recommendations for Microsoft Peer-to-Peer Networking Services settings.
                        #========================================================================================================================================================
                        #18.4.9.1 Peer Name Resolution Protocol
                        #This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================

                        #18.4.9.2 (L2) Ensure 'Turn off Microsoft Peer-to-Peer Networking Services' is set to 'Enabled' (Scored) W2K12
                        $Tag193 = '18.4.9.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc193 = 'Ensure Turn off Microsoft Peer-to-Peer Networking Services is set to Enabled (Scored)'
                        $Lvl193 = 'L2'
		                $Peernet = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft' -Name Peernet -ErrorAction 'silentlycontinue'
                        if (!$Peernet){
                            $Res193 = '2'}
                        Else{
                        $PolRes193 = $Peernet | Select-Object -ExpandProperty Peernet
                        if ($PolRes193 -eq '1'){
                            $Res193 = '1'} else {$Res193 = '2'}
                            }
		                $Str193 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag193 + ';' + $Desc193 + ';' + $Res193 + ';' + $Using:CurntDateForm)
                        $Str193
                        }

                        #========================================================================================================================================================
                        #18.4.10 Network Connections
                        #   This section contains recommendations for Network Connections settings.
                        #========================================================================================================================================================
                        #18.4.10.1 Windows Firewall
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================

                        #18.4.10.2 (L1) Ensure 'Prohibit installation and configuration of Network Bridge on your DNS domain network' is set to 'Enabled' (Scored)
                        $Tag194 = '18.4.10.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc194 = 'Ensure Prohibit installation and configuration of Network Bridge on your DNS domain network is set to Enabled (Scored)'
                        $Lvl194 = 'L1'
		                $NCAllwNtBrdg = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Network Connections' -Name NC_AllowNetBridge_NLA -ErrorAction 'silentlycontinue'
                        if (!$NCAllwNtBrdg){
                            $Res194 = '2'}
                        Else{
                        $PolRes194 = $NCAllwNtBrdg | Select-Object -ExpandProperty NC_AllowNetBridge_NLA
                        if ($PolRes194 -eq '1'){
                            $Res194 = '1'} else {$Res194 = '2'}
                            }
		                $Str194 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag194 + ';' + $Desc194 + ';' + $Res194 + ';' + $Using:CurntDateForm)
                        $Str194
                        }

                        #18.4.10.3 (L1) Ensure 'Require domain users to elevate when setting a network's location' is set to 'Enabled' (Scored)
                        $Tag195 = '18.4.10.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc195 = 'Ensure Require domain users to elevate when setting a networks location is set to Enabled (Scored)'
                        $Lvl195 = 'L1'
		                $NCStdDomUsrStLoc = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Network Connections' -Name NC_StdDomainUserSetLocation -ErrorAction 'silentlycontinue'
                        if (!$NCStdDomUsrStLoc){
                            $Res195 = '2'}
                        Else{
                        $PolRes195 = $NCStdDomUsrStLoc | Select-Object -ExpandProperty NC_StdDomainUserSetLocation
                        if ($PolRes195 -eq '1'){
                            $Res195 = '1'} else {$Res195 = '2'}
                            }
		                $Str195 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag195 + ';' + $Desc195 + ';' + $Res195 + ';' + $Using:CurntDateForm)
                        $Str195
                        }

                        #========================================================================================================================================================
                        #18.4.11 Network Connectivity Status Indicator
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.12 Network Isolation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.13 Network Provider
                        #   This section contains recommendations for Network Provider settings.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "NetworkProvider.admx/adml" that is included with 
                        #   MS15-011 / KB3000483 and the Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================

                        #18.4.13.1 (L1) Ensure 'Hardened UNC Paths' is set to 'Enabled, with "Require Mutual Authentication" and "Require Integrity" set for all NETLOGON and SYSVOL shares' (Scored)
                        $Tag196 = '18.4.13.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc196 = 'Ensure Hardened UNC Paths is set to Enabled with Require Mutual Authentication and Require Integrity set for all NETLOGON and SYSVOL shares (Scored)'
                        $Lvl196 = 'L1'
		                $NetLogonUNC = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\NetworkProvider\HardenedPaths' -Name \\*\NETLOGON -ErrorAction 'silentlycontinue'
                        $SysvolUNC = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\NetworkProvider\HardenedPaths' -Name \\*\SYSVOL -ErrorAction 'silentlycontinue'
                        if ((!$NetLogonUNC) -and (!$SysvolUNC)){
                            $Res196 = '2'}
                        Else{
                        $Pol1Res196 = $NetLogonUNC | Select-Object -ExpandProperty \\*\NETLOGON
                        $Pol2Res196 = $SysvolUNC | Select-Object -ExpandProperty \\*\SYSVOL
                        if (($Pol1Res196 -eq 'RequireMutualAuthentication=1, RequireIntegrity=1') -and ($Pol2Res196 -eq 'RequireMutualAuthentication=1, RequireIntegrity=1')){
                            $Res196 = '1'} else {$Res196 = '2'}
                            }
		                $Str196 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag196 + ';' + $Desc196 + ';' + $Res196 + ';' + $Using:CurntDateForm)
                        $Str196
                        }

                        #========================================================================================================================================================                
                        #18.4.14 Offline Files
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.15 QoS Packet Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.16 SNMP
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.17 SSL Configuration Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.18 TCPIP Settings
                        #   This section contains TCP/IP configuration settings.
                        #========================================================================================================================================================
                        #18.4.18.1 IPv6 Transition Technologies
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.4.18.2 Parameters
                        #   This section contains TCP/IP parameter configuration settings.
                        #========================================================================================================================================================

                        #18.4.18.2.1 (L2) Disable IPv6 (Ensure TCPIP6 Parameter 'DisabledComponents' is set to '0xff (255)') (Scored)
                        $Tag197 = '18.4.18.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc197 = 'Disable IPv6 (Ensure TCPIP6 Parameter DisabledComponents is set to 0xff (255)) (Scored)'
                        $Lvl197 = 'L1'
		                $DisIPv6Comp = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\TCPIP6\Parameters' -Name DisabledComponents -ErrorAction 'silentlycontinue'
                        if (!$DisIPv6Comp){
                            $Res197 = '2'}
                        Else{
                        $PolRes197 = $DisIPv6Comp | Select-Object -ExpandProperty DisabledComponents
                        if ($PolRes197 -eq '255'){
                            $Res197 = '1'} else {$Res197 = '2'}
                            }
		                $Str197 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag197 + ';' + $Desc197 + ';' + $Res197 + ';' + $Using:CurntDateForm)
                        $Str197
                        }

                        #========================================================================================================================================================
                        #18.4.19 Windows Connect Now
                        #   This section contains recommendations for Windows Connect Now settings.
                        #========================================================================================================================================================

                        #18.4.19.1 (L2) Ensure 'Configuration of wireless settings using Windows Connect Now' is set to 'Disabled' (Scored)
                        $Tag198 = '18.4.19.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc198 = 'Ensure Configuration of wireless settings using Windows Connect Now is set to Disabled (Scored)'
                        $Lvl198 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name EnableRegistrars -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableUPnPRegistrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableInBand802DOT11Registrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey4 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableFlashConfigRegistrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey5 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableWPDRegistrar -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3) -or (!$RegistrarsKey4) -or (!$RegistrarsKey5)) {
                            $Res198 = '2'}
                        Else{
                        $PolRes198a = $RegistrarsKey1 | Select-Object -ExpandProperty EnableRegistrars
                        $PolRes198b = $RegistrarsKey2 | Select-Object -ExpandProperty DisableUPnPRegistrar
                        $PolRes198c = $RegistrarsKey3 | Select-Object -ExpandProperty DisableInBand802DOT11Registrar
                        $PolRes198d = $RegistrarsKey4 | Select-Object -ExpandProperty DisableFlashConfigRegistrar
                        $PolRes198e = $RegistrarsKey5 | Select-Object -ExpandProperty DisableWPDRegistrar
        
                        if (($PolRes198a -eq '0') -and ($PolRes198b -eq '0') -and ($PolRes198c -eq '0') -and ($PolRes198d -eq '0') -and ($PolRes198e -eq '0')){
                            $Res198 = '1'} else {$Res198 = '2'}
                            }
		                $Str198 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag198 + ';' + $Desc198 + ';' + $Res198 + ';' + $Using:CurntDateForm)
                        $Str198
                        }

                        #18.4.19.2 (L2) Ensure 'Prohibit access of the Windows Connect Now wizards' is set to 'Enabled' (Scored)
                        $Tag199 = '18.4.19.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc199 = 'Ensure Prohibit access of the Windows Connect Now wizards is set to Enabled (Scored)'
                        $Lvl199 = 'L1'
		                $DisableWcnUi = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN' -Name DisableWcnUi -ErrorAction 'silentlycontinue'
                        if (!$DisableWcnUi){
                            $Res199 = '2'}
                        Else{
                        $PolRes199 = $DisableWcnUi | Select-Object -ExpandProperty DisableWcnUi
                        if ($PolRes199 -eq '1'){
                            $Res199 = '1'} else {$Res199 = '2'}
                            }
		                $Str199 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag199 + ';' + $Desc199 + ';' + $Res199 + ';' + $Using:CurntDateForm)
                        $Str199
                        }

                        #========================================================================================================================================================
                        #18.4.20 Windows Connection Manager
                        #   This section contains recommendations for Windows Connection Manager settings.
                        #========================================================================================================================================================

                        #18.4.20.1 (L1) Ensure 'Minimize the number of simultaneous connections to the Internet or a Windows Domain' is set to 'Enabled' (Scored)
                        $Tag200 = '18.4.20.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc200 = 'Ensure Prohibit access of the Windows Connect Now wizards is set to Enabled (Scored)'
                        $Lvl200 = 'L1'
		                $fMinXConnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WcmSvc\GroupPolicy' -Name fMinimizeConnections -ErrorAction 'silentlycontinue'
                        if (!$fMinXConnct){
                            $Res200 = '2'}
                        Else{
                        $PolRes200 = $fMinXConnct | Select-Object -ExpandProperty fMinimizeConnections
                        if ($PolRes200 -eq '1'){
                            $Res200 = '1'} else {$Res200 = '2'}
                            }
		                $Str200 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag200 + ';' + $Desc200 + ';' + $Res200 + ';' + $Using:CurntDateForm)
                        $Str200
                        }

                        #18.4.20.2 (L2) Ensure 'Prohibit connection to non-domain networks when connected to domain authenticated network' is set to 'Enabled' (MS only) (Scored)
                        $Tag201 = '18.4.20.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc201 = 'Ensure Prohibit connection to non-domain networks when connected to domain authenticated network is set to Enabled (Scored)'
                        $Lvl201 = 'L1'
		                $fBckNonDom = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WcmSvc\GroupPolicy' -Name fBlockNonDomain -ErrorAction 'silentlycontinue'
                        if (!$fBckNonDom){
                            $Res201 = '2'}
                        Else{
                        $PolRes201 = $fBckNonDom | Select-Object -ExpandProperty fBlockNonDomain
                        if ($PolRes201 -eq '1'){
                            $Res201 = '1'} else {$Res201 = '2'}
                            }
		                $Str201 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag201 + ';' + $Desc201 + ';' + $Res201 + ';' + $Using:CurntDateForm)
                        $Str201
                        }

                        #========================================================================================================================================================
                        #18.5 Network
                        #   This section contains recommendations for network settings.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the Microsoft
                        #   Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.1 Background Intelligent Transfer Service (BITS)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Bits.admx/adml that is included with all versions of the Microsoft Windows
                        #   Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.2 BranchCache
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PeerToPeerCaching.admx/adml that is included with the Microsoft Windows 7
                        #   & Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.3 DirectAccess Client Experience Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template nca.admx/adml that is included with the Microsoft 8.0 & Server 2012 (non-R2)
                        #   Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.4 DNS Client
                        #   This section contains recommendations related to DNS Client.
                        #   This Group Policy section is provided by the Group Policy template DnsClient.admx/adml that is included with all versions of the Microsoft Windows
                        #   Administrative Templates.
                        #========================================================================================================================================================

                        #18.5.4.1 (L1) Set 'NetBIOS node type' to 'P-node' (Ensure NetBT Parameter 'NodeType' is set to '0x2 (2)') (MS Only) (Scored) W2K16
                        $Tag435 = '18.5.4.1'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc435 = 'Set NetBIOS node type to P-node (Ensure NetBT Parameter NodeType is set to 0x2 (2)) (MS Only) (Scored)'
                        $Lvl435 = 'L1'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Services\NetBT\Parameters' -Name NodeType -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res435 = '2'}
                        Else{
                        $PolRes435 = $MaxDataReTx | Select-Object -ExpandProperty NodeType
                        if ($PolRes435 -eq '2'){
                            $Res435 = '1'} else {$Res435 = '2'}
                            }
		                $Str435 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag435 + ';' + $Desc435 + ';' + $Res435 + ';' + $Using:CurntDateForm)
                        $Str435
                        }

                        #18.5.4.2 (L1) Ensure 'Turn off multicast name resolution' is set to 'Enabled' (MS Only) (Scored) W2K16
                        $Tag436 = '18.5.4.2'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc436 = 'Ensure Turn off multicast name resolution is set to Enabled (MS Only) (Scored)'
                        $Lvl436 = 'L1'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\DNSClient' -Name EnableMulticast -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res436 = '2'}
                        Else{
                        $PolRes436 = $MaxDataReTx | Select-Object -ExpandProperty EnableMulticast
                        if ($PolRes436 -eq '1'){
                            $Res436 = '1'} else {$Res436 = '2'}
                            }
		                $Str436 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag436 + ';' + $Desc436 + ';' + $Res436 + ';' + $Using:CurntDateForm)
                        $Str436
                        }


                        #========================================================================================================================================================
                        #18.5.5 Fonts
                        #   This section contains recommendations related to Fonts. 
                        #   This Group Policy section is provided by the Group Policy template GroupPolicy.admx/adml that is included with the Microsoft Windows 10 Release 1607
                        #   & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.5.5.1 (L2) Ensure 'Enable Font Providers' is set to 'Disabled' (Scored) W2K16
                        $Tag437 = '18.5.5.1'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc437 = 'Ensure Enable Font Providers is set to Disabled (Scored)'
                        $Lvl437 = 'L2'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name EnableFontProviders -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res437 = '2'}
                        Else{
                        $PolRes437 = $MaxDataReTx | Select-Object -ExpandProperty EnableFontProviders
                        if ($PolRes437 -eq '0'){
                            $Res437 = '1'} else {$Res437 = '2'}
                            }
		                $Str437 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag437 + ';' + $Desc437 + ';' + $Res437 + ';' + $Using:CurntDateForm)
                        $Str437
                        }


                        #========================================================================================================================================================
                        #18.5.6 Hotspot Authentication
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template hotspotauth.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.7 Lanman Server
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template LanmanServer.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.8 Lanman Workstation
                        #   This section contains recommendations related to Lanman Workstation.
                        #   This Group Policy section is provided by the Group Policy template LanmanWorkstation.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.5.8.1 (L1) Ensure 'Enable insecure guest logons' is set to 'Disabled' (Scored) W2K16
                        $Tag438 = '18.5.8.1'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc438 = 'Ensure Enable insecure guest logons is set to Disabled (Scored)'
                        $Lvl438 = 'L2'
		                $MaxDataReTx = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LanmanWorkstation' -Name AllowInsecureGuestAuth -ErrorAction 'silentlycontinue'
                        if (!$MaxDataReTx){
                            $Res438 = '2'}
                        Else{
                        $PolRes438 = $MaxDataReTx | Select-Object -ExpandProperty AllowInsecureGuestAuth
                        if ($PolRes438 -eq '0'){
                            $Res438 = '1'} else {$Res438 = '2'}
                            }
		                $Str438 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag438 + ';' + $Desc438 + ';' + $Res438 + ';' + $Using:CurntDateForm)
                        $Str438
                        }


                        #========================================================================================================================================================
                        #18.5.9 Link-Layer Topology Discovery
                        #   This section contains recommendations for Link-Layer Topology Discovery settings.
                        #   This Group Policy section is provided by the Group Policy template LinkLayerTopologyDiscovery.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.5.9.1 (L2) Ensure 'Turn on Mapper I/O (LLTDIO) driver' is set to 'Disabled' (Scored) W2K16
                        $Tag439 = '18.5.9.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc439 = 'Ensure Turn on Mapper I/O (LLTDIO) driver is set to Disabled (Scored)'
                        $Lvl439 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name AllowLLTDIOOnDomain -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name AllowLLTDIOOnPublicNet -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name EnableLLTDIO -ErrorAction 'silentlycontinue'
                        $RegistrarsKey4 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name ProhibitLLTDIOOnPrivateNet -ErrorAction 'silentlycontinue'
						
                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3) -or (!$RegistrarsKey4)) {
                            $Res439 = '2'}
                        Else{
                        $PolRes439a = $RegistrarsKey1 | Select-Object -ExpandProperty AllowLLTDIOOnDomain
                        $PolRes439b = $RegistrarsKey2 | Select-Object -ExpandProperty AllowLLTDIOOnPublicNet
                        $PolRes439c = $RegistrarsKey3 | Select-Object -ExpandProperty EnableLLTDIO
                        $PolRes439d = $RegistrarsKey4 | Select-Object -ExpandProperty ProhibitLLTDIOOnPrivateNet
        
                        if (($PolRes439a -eq '0') -and ($PolRes439b -eq '0') -and ($PolRes439c -eq '0') -and ($PolRes439d -eq '0')){
                            $Res439 = '1'} else {$Res439 = '2'}
                            }
		                $Str439 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag439 + ';' + $Desc439 + ';' + $Res439 + ';' + $Using:CurntDateForm)
                        $Str439
						}

                        #18.5.9.2 (L2) Ensure 'Turn on Responder (RSPNDR) driver' is set to 'Disabled' (Scored) W2K16
                        $Tag440 = '18.5.9.2'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc440 = 'Ensure Turn on Responder (RSPNDR) driver is set to Disabled (Scored)'
                        $Lvl440 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name AllowRspndrOnDomain -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name AllowRspndrOnPublicNet -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name EnableRspndr -ErrorAction 'silentlycontinue'
                        $RegistrarsKey4 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LLTD' -Name ProhibitRspndrOnPrivateNet -ErrorAction 'silentlycontinue'
						
                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3) -or (!$RegistrarsKey4)) {
                            $Res440 = '2'}
                        Else{
                        $PolRes440a = $RegistrarsKey1 | Select-Object -ExpandProperty AllowRspndrOnDomain
                        $PolRes440b = $RegistrarsKey2 | Select-Object -ExpandProperty AllowRspndrOnPublicNet
                        $PolRes440c = $RegistrarsKey3 | Select-Object -ExpandProperty EnableRspndr
                        $PolRes440d = $RegistrarsKey4 | Select-Object -ExpandProperty ProhibitRspndrOnPrivateNet
        
                        if (($PolRes440a -eq '0') -and ($PolRes440b -eq '0') -and ($PolRes440c -eq '0') -and ($PolRes440d -eq '0')){
                            $Res440 = '1'} else {$Res440 = '2'}
                            }
		                $Str440 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag440 + ';' + $Desc440 + ';' + $Res440 + ';' + $Using:CurntDateForm)
                        $Str440
						}


                        #========================================================================================================================================================
                        #18.5.10 Microsoft Peer-to-Peer Networking Services
                        #   This section contains recommendations for Microsoft Peer-to-Peer Networking Services settings.
                        #   This Group Policy section is provided by the Group Policy template P2P-pnrp.admx/adml that is included with all versions of the Microsoft Windows
                        #   Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.10.1 Peer Name Resolution Protocol
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template P2P-pnrp.admx/adml that is included with all versions of the Microsoft Windows
                        #   Administrative Templates.
                        #========================================================================================================================================================


                        #18.5.10.2 (L2) Ensure 'Turn off Microsoft Peer-to-Peer Networking Services' is set to 'Enabled' (Scored) W2K16
                        $Tag441 = '18.5.10.2'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc441 = 'Ensure Turn off Microsoft Peer-to-Peer Networking Services is set to Enabled (Scored)'
                        $Lvl441 = 'L2'
		                $Peernet = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft' -Name Peernet -ErrorAction 'silentlycontinue'
                        if (!$Peernet){
                            $Res441 = '2'}
                        Else{
                        $PolRes441 = $Peernet | Select-Object -ExpandProperty Peernet
                        if ($PolRes441 -eq '1'){
                            $Res441 = '1'} else {$Res441 = '2'}
                            }
		                $Str441 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag441 + ';' + $Desc441 + ';' + $Res441 + ';' + $Using:CurntDateForm)
                        $Str441
						}


                        #========================================================================================================================================================
                        #18.5.11 Network Connections
                        #   This section contains recommendations for Network Connections settings.
                        #   This Group Policy section is provided by the Group Policy template NetworkConnections.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.11.1 Windows Defender Firewall (formerly Windows Firewall)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsFirewall.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named Windows Firewall but was renamed by Microsoft to Windows Defender Firewall starting with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.5.11.2 (L1) Ensure 'Prohibit installation and configuration of Network Bridge on your DNS domain network' is set to 'Enabled' (Scored) W2K16
                        $Tag442 = '18.5.11.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc442 = 'Ensure Prohibit installation and configuration of Network Bridge on your DNS domain network is set to Enabled (Scored)'
                        $Lvl442 = 'L1'
		                $NCAllwNtBrdg = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Network Connections' -Name NC_AllowNetBridge_NLA -ErrorAction 'silentlycontinue'
                        if (!$NCAllwNtBrdg){
                            $Res442 = '2'}
                        Else{
                        $PolRes442 = $NCAllwNtBrdg | Select-Object -ExpandProperty NC_AllowNetBridge_NLA
                        if ($PolRes442 -eq '1'){
                            $Res442 = '1'} else {$Res442 = '2'}
                            }
		                $Str442 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag442 + ';' + $Desc442 + ';' + $Res442 + ';' + $Using:CurntDateForm)
                        $Str442
                        }

                        #18.5.11.3 (L1) Ensure 'Prohibit use of Internet Connection Sharing on your DNS domain network' is set to 'Enabled' (Scored) W2K16
                        $Tag443 = '18.5.11.2'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc443 = 'Ensure Prohibit use of Internet Connection Sharing on your DNS domain network is set to Enabled (Scored)'
                        $Lvl443 = 'L1'
		                $NCAllwNtBrdg = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Network Connections' -Name NC_ShowSharedAccessUI -ErrorAction 'silentlycontinue'
                        if (!$NCAllwNtBrdg){
                            $Res443 = '2'}
                        Else{
                        $PolRes443 = $NCAllwNtBrdg | Select-Object -ExpandProperty NC_ShowSharedAccessUI
                        if ($PolRes443 -eq '1'){
                            $Res443 = '1'} else {$Res443 = '2'}
                            }
		                $Str443 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag443 + ';' + $Desc443 + ';' + $Res443 + ';' + $Using:CurntDateForm)
                        $Str443
						}

                        #18.5.11.4 (L1) Ensure 'Require domain users to elevate when setting a network's location' is set to 'Enabled' (Scored) W2K16
                        $Tag444 = '18.5.11.4'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc444 = 'Ensure Require domain users to elevate when setting a networks location is set to Enabled (Scored)'
                        $Lvl444 = 'L1'
		                $NCStdDomUsrStLoc = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Network Connections' -Name NC_StdDomainUserSetLocation -ErrorAction 'silentlycontinue'
                        if (!$NCStdDomUsrStLoc){
                            $Res444 = '2'}
                        Else{
                        $PolRes444 = $NCStdDomUsrStLoc | Select-Object -ExpandProperty NC_StdDomainUserSetLocation
                        if ($PolRes444 -eq '1'){
                            $Res444 = '1'} else {$Res444 = '2'}
                            }
		                $Str444 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag444 + ';' + $Desc444 + ';' + $Res444 + ';' + $Using:CurntDateForm)
                        $Str444
						}

                        #========================================================================================================================================================
                        #18.5.12 Network Connectivity Status Indicator
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template NCSI.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.13 Network Isolation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template NetworkIsolation.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.14 Network Provider
                        #   This section contains recommendations for Network Provider settings.
                        #   This Group Policy section is provided by the Group Policy template NetworkProvider.admx/adml that is included with the MS15-011 / MSKB 3000483
                        #   security update and the Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.5.14.1 (L1) Ensure 'Hardened UNC Paths' is set to 'Enabled, with "Require Mutual Authentication" and "Require Integrity" set for all NETLOGON and SYSVOL shares' (Scored) W2K16
                        $Tag445 = '18.5.14.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc445 = 'Ensure Hardened UNC Paths is set to Enabled with Require Mutual Authentication and Require Integrity set for all NETLOGON and SYSVOL shares (Scored)'
                        $Lvl445 = 'L1'
		                $NetLogonUNC = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\NetworkProvider\HardenedPaths' -Name \\*\NETLOGON -ErrorAction 'silentlycontinue'
                        $SysvolUNC = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\NetworkProvider\HardenedPaths' -Name \\*\SYSVOL -ErrorAction 'silentlycontinue'
                        if ((!$NetLogonUNC) -and (!$SysvolUNC)){
                            $Res445 = '2'}
                        Else{
                        $Pol1Res445 = $NetLogonUNC | Select-Object -ExpandProperty \\*\NETLOGON
                        $Pol2Res445 = $SysvolUNC | Select-Object -ExpandProperty \\*\SYSVOL
                        if (($Pol1Res445 -eq 'RequireMutualAuthentication=1, RequireIntegrity=1') -and ($Pol2Res445 -eq 'RequireMutualAuthentication=1, RequireIntegrity=1')){
                            $Res445 = '1'} else {$Res445 = '2'}
                            }
		                $Str445 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag445 + ';' + $Desc445 + ';' + $Res445 + ';' + $Using:CurntDateForm)
                        $Str445
						}

                        #========================================================================================================================================================
                        #18.5.15 Offline Files
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template OfflineFiles.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.16 QoS Packet Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template QOS.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.17 SNMP
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Snmp.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.18 SSL Configuration Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template CipherSuiteOrder.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.5.19 TCPIP Settings
                        #   This section contains TCP/IP configuration settings.
                        #   This Group Policy section is provided by the Group Policy template tcpip.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.19.1 IPv6 Transition Technologies
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template tcpip.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.5.19.2 Parameters
                        #   This section contains TCP/IP parameter configuration settings.
                        #   This Group Policy section is provided by the Group Policy template tcpip.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.5.19.2.1 (L2) Disable IPv6 (Ensure TCPIP6 Parameter 'DisabledComponents' is set to '0xff (255)') (Scored) W2K16
                        $Tag446 = '18.5.19.2.1'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc446 = 'Disable IPv6 (Ensure TCPIP6 Parameter DisabledComponents is set to 0xff (255)) (Scored)'
                        $Lvl446 = 'L2'
		                $DisIPv6Comp = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Services\TCPIP6\Parameters' -Name DisabledComponents -ErrorAction 'silentlycontinue'
                        if (!$DisIPv6Comp){
                            $Res446 = '2'}
                        Else{
                        $PolRes446 = $DisIPv6Comp | Select-Object -ExpandProperty DisabledComponents
                        if ($PolRes446 -eq '255'){
                            $Res446 = '1'} else {$Res446 = '2'}
                            }
		                $Str446 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag446 + ';' + $Desc446 + ';' + $Res446 + ';' + $Using:CurntDateForm)
                        $Str446
						}

                        #========================================================================================================================================================
                        #18.5.20 Windows Connect Now
                        #   This section contains recommendations for Windows Connect Now settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsConnectNow.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.5.20.1 (L2) Ensure 'Configuration of wireless settings using Windows Connect Now' is set to 'Disabled' (Scored) W2K16
                        $Tag447 = '18.5.20.1'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc447 = 'Ensure Configuration of wireless settings using Windows Connect Now is set to Disabled (Scored)'
                        $Lvl447 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name EnableRegistrars -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableUPnPRegistrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableInBand802DOT11Registrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey4 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableFlashConfigRegistrar -ErrorAction 'silentlycontinue'
                        $RegistrarsKey5 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN\Registrars' -Name DisableWPDRegistrar -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3) -or (!$RegistrarsKey4) -or (!$RegistrarsKey5)) {
                            $Res447 = '2'}
                        Else{
                        $PolRes447a = $RegistrarsKey1 | Select-Object -ExpandProperty EnableRegistrars
                        $PolRes447b = $RegistrarsKey2 | Select-Object -ExpandProperty DisableUPnPRegistrar
                        $PolRes447c = $RegistrarsKey3 | Select-Object -ExpandProperty DisableInBand802DOT11Registrar
                        $PolRes447d = $RegistrarsKey4 | Select-Object -ExpandProperty DisableFlashConfigRegistrar
                        $PolRes447e = $RegistrarsKey5 | Select-Object -ExpandProperty DisableWPDRegistrar
        
                        if (($PolRes447a -eq '0') -and ($PolRes447b -eq '0') -and ($PolRes447c -eq '0') -and ($PolRes447d -eq '0') -and ($PolRes447e -eq '0')){
                            $Res447 = '1'} else {$Res447 = '2'}
                            }
		                $Str447 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag447 + ';' + $Desc447 + ';' + $Res447 + ';' + $Using:CurntDateForm)
                        $Str447
                        }

                        #18.5.20.2 (L2) Ensure 'Prohibit access of the Windows Connect Now wizards' is set to 'Enabled' (Scored) W2K16
                        $Tag448 = '18.5.20.2'
                        if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc448 = 'Ensure Prohibit access of the Windows Connect Now wizards is set to Enabled (Scored)'
                        $Lvl448 = 'L2'
		                $DisableWcnUi = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WCN' -Name DisableWcnUi -ErrorAction 'silentlycontinue'
                        if (!$DisableWcnUi){
                            $Res448 = '2'}
                        Else{
                        $PolRes448 = $DisableWcnUi | Select-Object -ExpandProperty DisableWcnUi
                        if ($PolRes448 -eq '1'){
                            $Res448 = '1'} else {$Res448 = '2'}
                            }
		                $Str448 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag448 + ';' + $Desc448 + ';' + $Res448 + ';' + $Using:CurntDateForm)
                        $Str448
                        }

                        #========================================================================================================================================================
                        #18.5.21 Windows Connection Manager
                        #   This section contains recommendations for Windows Connection Manager settings.
                        #   This Group Policy section is provided by the Group Policy template WCM.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.5.21.1 (L1) Ensure 'Minimize the number of simultaneous connections to the Internet or a Windows Domain' is set to 'Enabled' (Scored)
                        $Tag449 = '18.5.21.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc449 = 'Ensure Prohibit access of the Windows Connect Now wizards is set to Enabled (Scored)'
                        $Lvl449 = 'L1'
		                $fMinXConnct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WcmSvc\GroupPolicy' -Name fMinimizeConnections -ErrorAction 'silentlycontinue'
                        if (!$fMinXConnct){
                            $Res449 = '2'}
                        Else{
                        $PolRes449 = $fMinXConnct | Select-Object -ExpandProperty fMinimizeConnections
                        if ($PolRes449 -eq '1'){
                            $Res449 = '1'} else {$Res449 = '2'}
                            }
		                $Str449 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag449 + ';' + $Desc449 + ';' + $Res449 + ';' + $Using:CurntDateForm)
                        $Str449
                        }

                        #18.5.21.2 (L2) Ensure 'Prohibit connection to non-domain networks when connected to domain authenticated network' is set to 'Enabled' (MS only) (Scored) W2K16
                        $Tag450 = '18.5.21.2'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc450 = 'Ensure Prohibit connection to non-domain networks when connected to domain authenticated network is set to Enabled (MS only) (Scored)'
                        $Lvl450 = 'L2'
		                $fBckNonDom = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WcmSvc\GroupPolicy' -Name fBlockNonDomain -ErrorAction 'silentlycontinue'
                        if (!$fBckNonDom){
                            $Res450 = '2'}
                        Else{
                        $PolRes450 = $fBckNonDom | Select-Object -ExpandProperty fBlockNonDomain
                        if ($PolRes450 -eq '1'){
                            $Res450 = '1'} else {$Res450 = '2'}
                            }
		                $Str450 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag450 + ';' + $Desc450 + ';' + $Res450 + ';' + $Using:CurntDateForm)
                        $Str450
						}

                        #========================================================================================================================================================
                        #18.6 Printers
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.6.1 (L1) Ensure 'Apply UAC restrictions to local accounts on network logons' is set to 'Enabled' (MS only) (Scored) W2K12
                        $Tag202 = '18.6.1'
                        if ($OSVersion -eq 'W2K12R2'){
                        $Count18++
		                $Desc202 = 'Ensure Apply UAC restrictions to local accounts on network logons is set to Enabled (MS only) (Scored)'
                        $Lvl202 = 'L1'
		                $TknFiltLclAcc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' -Name LocalAccountTokenFilterPolicy -ErrorAction 'silentlycontinue'
                        if (!$TknFiltLclAcc){
                            $Res202 = '2'}
                        Else{
                        $PolRes202 = $TknFiltLclAcc | Select-Object -ExpandProperty LocalAccountTokenFilterPolicy
                        if ($PolRes202 -eq '1'){
                            $Res202 = '1'} else {$Res202 = '2'}
                            }
		                $Str202 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag202 + ';' + $Desc202 + ';' + $Res202 + ';' + $Using:CurntDateForm)
                        $Str202
                        }

                        #18.6.2 (L1) Ensure 'WDigest Authentication' is set to 'Disabled' (Scored)
                        $Tag203 = '18.6.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc203 = 'Ensure WDigest Authentication is set to Disabled (Scored)'
                        $Lvl203 = 'L1'
		                $UseLgnCred = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest' -Name UseLogonCredential -ErrorAction 'silentlycontinue'
                        if (!$UseLgnCred){
                            $Res203 = '2'}
                        Else{
                        $PolRes203 = $UseLgnCred | Select-Object -ExpandProperty UseLogonCredential
                        if ($PolRes203 -eq '0'){
                            $Res203 = '1'} else {$Res203 = '2'}
                            }
		                $Str203 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag203 + ';' + $Desc203 + ';' + $Res203 + ';' + $Using:CurntDateForm)
                        $Str203
                        }

                        #========================================================================================================================================================
                        #18.7 Start Menu and Taskbar
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with the Microsoft Windows 8.1 &
                        #   Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8 System
                        #   This section contains recommendations for System settings.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.1 Access-Denied Assistance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template srm-fci.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.2 App-V
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template appv.admx/adml that is included with the Microsoft Windows 10 Release 1607 &
                        #   Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.3 Audit Process Creation
                        #   This section contains settings related to auditing of process creation events.
                        #   This Group Policy section is provided by the Group Policy template AuditSettings.admx/adml that is included with the Microsoft Windows 8.1 &
                        #   Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.3.1 (L1) Ensure 'Include command line in process creation events' is set to 'Disabled' (Scored) W2K16
                        $Tag451 = '18.8.3.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc451 = 'Ensure Include command line in process creation events is set to Disabled (Scored)'
                        $Lvl451 = 'L1'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit' -Name ProcessCreationIncludeCmdLine_Enabled -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res451 = '2'}
                        Else{
                        $PolRes451 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty ProcessCreationIncludeCmdLine_Enabled
                        if ($PolRes451 -eq '0'){
                            $Res451 = '1'} else {$Res451 = '2'}
                            }
		                $Str451 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag451 + ';' + $Desc451 + ';' + $Res451 + ';' + $Using:CurntDateForm)
                        $Str451
						}

                        
                        #========================================================================================================================================================
                        #18.7 Start Menu and Taskbar
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8 System
                        #   This section contains recommendations for System settings.
                        #========================================================================================================================================================
                        #18.8.1 Access-Denied Assistance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.2 Audit Process Creation
                        #   This section contains settings related to auditing of process creation events.
                        #========================================================================================================================================================

                        #18.8.2.1 (L1) Ensure 'Include command line in process creation events' is set to 'Disabled' (Scored)
                        $Tag204 = '18.8.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc204 = 'Ensure Include command line in process creation events is set to Disabled (Scored)'
                        $Lvl204 = 'L1'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit' -Name ProcessCreationIncludeCmdLine_Enabled -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res204 = '2'}
                        Else{
                        $PolRes204 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty ProcessCreationIncludeCmdLine_Enabled
                        if ($PolRes204 -eq '0'){
                            $Res204 = '1'} else {$Res204 = '2'}
                            }
		                $Str204 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag204 + ';' + $Desc204 + ';' + $Res204 + ';' + $Using:CurntDateForm)
                        $Str204
                        }

                        #========================================================================================================================================================
                        #18.8.4 Credentials Delegation
                        #   This section contains settings related to Credential Delegation.
                        #   This Group Policy section is provided by the Group Policy template CredSsp.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.4.1 (L1) Ensure 'Remote host allows delegation of non-exportable credentials' is set to 'Enabled' (Scored) W2K16
                        $Tag452 = '18.8.4.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc452 = 'Ensure Remote host allows delegation of non-exportable credentials is set to Enabled (Scored)'
                        $Lvl452 = 'L1'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation' -Name AllowProtectedCreds -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res452 = '2'}
                        Else{
                        $PolRes452 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty AllowProtectedCreds
                        if ($PolRes452 -eq '1'){
                            $Res452 = '1'} else {$Res452 = '2'}
                            }
		                $Str452 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag452 + ';' + $Desc452 + ';' + $Res452 + ';' + $Using:CurntDateForm)
                        $Str452
						}

                        #========================================================================================================================================================
                        #18.8.3 Credentials Delegation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.4 Device Guard
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "deviceguard.admx/adml" that is included with the Microsoft 
                        #   Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.5 Device Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.5 Device Guard
                        #   This section contains Device Guard settings.
                        #   This Group Policy section is provided by the Group Policy template DeviceGuard.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.5.1 (NG) Ensure 'Turn On Virtualization Based Security' is set to 'Enabled' (MS Only) (Scored) W2K16
                        $Tag453 = '18.8.5.1'
                        if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
						$Count18++
		                $Desc453 = 'Ensure Turn On Virtualization Based Security is set to Enabled (MS Only) (Scored)'
                        $Lvl453 = '(NG)'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DeviceGuard' -Name EnableVirtualizationBasedSecurity -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res453 = '2'}
                        Else{
                        $PolRes453 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty EnableVirtualizationBasedSecurity
                        if ($PolRes453 -eq '1'){
                            $Res453 = '1'} else {$Res453 = '2'}
                            }
		                $Str453 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag453 + ';' + $Desc453 + ';' + $Res453 + ';' + $Using:CurntDateForm)
                        $Str453
                        }

                        #18.8.5.2 (NG) Ensure 'Turn On Virtualization Based Security: Select Platform Security Level' is set to 'Secure Boot and DMA Protection' (MS Only) (Scored) W2K16
                        $Tag454 = '18.8.5.2'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc454 = 'Ensure Turn On Virtualization Based Security: Select Platform Security Level is set to Secure Boot and DMA Protection (MS Only) (Scored)'
                        $Lvl454 = '(NG)'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DeviceGuard' -Name RequirePlatformSecurityFeatures -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res454 = '2'}
                        Else{
                        $PolRes454 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty RequirePlatformSecurityFeatures
                        if ($PolRes454 -eq 'Secure Boot and DMA Protection'){
                            $Res454 = '1'} else {$Res454 = '2'}
                            }
		                $Str454 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag454 + ';' + $Desc454 + ';' + $Res454 + ';' + $Using:CurntDateForm)
                        $Str454
						}

                        #18.8.5.3 (NG) Ensure 'Turn On Virtualization Based Security: Virtualization Based Protection of Code Integrity' is set to 'Enabled with UEFI lock' (MS Only) (Scored) W2K16
                        $Tag455 = '18.8.5.3'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc455 = 'Ensure Turn On Virtualization Based Security: Virtualization Based Protection of Code Integrity is set to Enabled with UEFI lock (MS Only) (Scored)'
                        $Lvl455 = '(NG)'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DeviceGuard' -Name HypervisorEnforcedCodeIntegrity -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res455 = '2'}
                        Else{
                        $PolRes455 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty HypervisorEnforcedCodeIntegrity
                        if ($PolRes455 -eq 'Enabled with UEFI lock'){
                            $Res455 = '1'} else {$Res455 = '2'}
                            }
		                $Str455 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag455 + ';' + $Desc455 + ';' + $Res455 + ';' + $Using:CurntDateForm)
                        $Str455
						}		

                        #18.8.5.4 (NG) Ensure 'Turn On Virtualization Based Security: Require UEFI Memory Attributes Table' is set to 'True (checked)' (MS Only) (Scored) W2K16
                        $Tag456 = '18.8.5.4'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc456 = 'Ensure Turn On Virtualization Based Security: Require UEFI Memory Attributes Table is set to True (checked) (MS Only) (Scored)'
                        $Lvl456 = '(NG)'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DeviceGuard' -Name HVCIMATRequired -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res456 = '2'}
                        Else{
                        $PolRes456 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty HVCIMATRequired
                        if ($PolRes456 -eq 'True (checked)'){
                            $Res456 = '1'} else {$Res456 = '2'}
                            }
		                $Str456 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag456 + ';' + $Desc456 + ';' + $Res456 + ';' + $Using:CurntDateForm)
                        $Str456
						}

                        #18.8.5.5 (NG) Ensure 'Turn On Virtualization Based Security: Credential Guard Configuration' is set to 'Enabled with UEFI lock' (MS Only) (Scored) W2K16
                        $Tag457 = '18.8.5.5'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc457 = 'Ensure Turn On Virtualization Based Security: Credential Guard Configuration is set to Enabled with UEFI lock (MS Only) (Scored) (Scored)'
                        $Lvl457 = '(NG)'
		                $CreatPrcsCmdEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DeviceGuard' -Name LsaCfgFlags -ErrorAction 'silentlycontinue'
                        if (!$CreatPrcsCmdEnb){
                            $Res457 = '2'}
                        Else{
                        $PolRes457 = $CreatPrcsCmdEnb | Select-Object -ExpandProperty LsaCfgFlags
                        if ($PolRes457 -eq 'Enabled with UEFI lock'){
                            $Res457 = '1'} else {$Res457 = '2'}
                            }
		                $Str457 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag457 + ';' + $Desc457 + ';' + $Res457 + ';' + $Using:CurntDateForm)
                        $Str457
						}				
                        
                        #========================================================================================================================================================
                        #18.8.6 Device Health Attestation Service
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TPM.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.6 Device Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "DeviceRedirection.admx/adml" that is included with 
                        #   the Microsoft Windows 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.7 Disk NV Cache
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.7 Device Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeviceInstallation.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.8 Device Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeviceRedirection.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.8 Disk Quotas
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.9 Distributed COM
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.9 Disk NV Cache
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DiskNVCache.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.10 Driver Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.10 Disk Quotas
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DiskQuota.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.11 Early Launch Antimalware
                        #   This section contains recommendations for configuring boot-start driver initialization settings.
                        #========================================================================================================================================================

                        #18.8.11.1 (L1) Ensure 'Boot-Start Driver Initialization Policy' is set to 'Enabled: Good, unknown and bad but critical' (Scored)
                        $Tag205 = '18.8.11.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc205 = 'Ensure Boot-Start Driver Initialization Policy is set to Enabled: Good unknown and bad but critical (Scored)'
                        $Lvl205 = 'L1'
		                $DriverLoadPolicy = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Policies\EarlyLaunch' -Name DriverLoadPolicy -ErrorAction 'silentlycontinue'
                        if (!$DriverLoadPolicy){
                            $Res205 = '2'}
                        Else{
                        $PolRes205 = $DriverLoadPolicy | Select-Object -ExpandProperty DriverLoadPolicy
                        if ($PolRes205 -eq '3'){
                            $Res205 = '1'} else {$Res205 = '2'}
                            }
		                $Str205 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag205 + ';' + $Desc205 + ';' + $Res205 + ';' + $Using:CurntDateForm)
                        $Str205
                        }

                        #========================================================================================================================================================
                        #18.8.11 Display
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Display.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer)
                        #========================================================================================================================================================
                        #18.8.12 Distributed COM
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DCOM.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.13 Driver Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeviceInstallation.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.14 Early Launch Antimalware
                        #   This section contains recommendations for configuring boot-start driver initialization settings.
                        #   This Group Policy section is provided by the Group Policy template EarlyLaunchAM.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.14.1 (L1) Ensure 'Boot-Start Driver Initialization Policy' is set to 'Enabled: Good, unknown and bad but critical' (Scored) W2K16
                        $Tag458 = '18.8.14.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc458 = 'Ensure Boot-Start Driver Initialization Policy is set to Enabled: Good unknown and bad but critical (Scored)'
                        $Lvl458 = 'L1'
		                $DriverLoadPolicy = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Policies\EarlyLaunch' -Name DriverLoadPolicy -ErrorAction 'silentlycontinue'
                        if (!$DriverLoadPolicy){
                            $Res458 = '2'}
                        Else{
                        $PolRes458 = $DriverLoadPolicy | Select-Object -ExpandProperty DriverLoadPolicy
                        if ($PolRes458 -eq '3'){
                            $Res458 = '1'} else {$Res458 = '2'}
                            }
		                $Str458 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag458 + ';' + $Desc458 + ';' + $Res458 + ';' + $Using:CurntDateForm)
                        $Str458
						}

                        #========================================================================================================================================================
                        #18.8.3 Credentials Delegation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.4 Device Guard
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "deviceguard.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.5 Device Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.6 Device Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "DeviceRedirection.admx/adml" that is included with 
                        #   the Microsoft Windows 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.7 Disk NV Cache
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.8 Disk Quotas
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.9 Distributed COM
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.10 Driver Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.11 Early Launch Antimalware
                        #   This section contains recommendations for configuring boot-start driver initialization settings.
                        #========================================================================================================================================================

                        #18.8.11.1 (L1) Ensure 'Boot-Start Driver Initialization Policy' is set to 'Enabled: Good, unknown and bad but critical' (Scored)
                        $Tag206 = '18.8.11.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc206 = 'Ensure Boot-Start Driver Initialization Policy is set to Enabled: Good unknown and bad but critical (Scored)'
                        $Lvl206 = 'L1'
		                $DriverLoadPolicy = Get-ItemProperty -Path 'HKLM:System\CurrentControlSet\Policies\EarlyLaunch' -Name DriverLoadPolicy -ErrorAction 'silentlycontinue'
                        if (!$DriverLoadPolicy){
                            $Res206 = '2'}
                        Else{
                        $PolRes206 = $DriverLoadPolicy | Select-Object -ExpandProperty DriverLoadPolicy
                        if ($PolRes206 -eq '3'){
                            $Res206 = '1'} else {$Res206 = '2'}
                            }
		                $Str206 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag206 + ';' + $Desc206 + ';' + $Res206 + ';' + $Using:CurntDateForm)
                        $Str206
                        }

                        #========================================================================================================================================================
                        #18.8.12 Enhanced Storage Access
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "EnhancedStorage.admx/adml" that is included with the 
                        #   Microsoft Windows 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.13 File Classification Infrastructure
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.14 File Share Shadow Copy Agent
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "FileServerVSSAgent.admx/adml" that is included with
                        #   the Microsoft Windows 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.15 File Share Shadow Copy Provider
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.15 Enhanced Storage Access
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EnhancedStorage.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.16 File Classification Infrastructure
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template srm-fci.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.17 File Share Shadow Copy Agent
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FileServerVSSAgent.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.18 File Share Shadow Copy Provider
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy templates FileServerVSSProvider.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.16 Filesystem
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.17 Folder Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.18 Group Policy
                        #   This section contains recommendations for configuring group policy-related settings.
                        #========================================================================================================================================================
                        #18.8.18.1 Logging and tracing
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        
                        #18.8.18.2 (L1) Ensure 'Configure registry policy processing: Do not apply during periodic background processing' is set to 'Enabled: FALSE' (Scored)
                        $Tag207 = '18.8.18.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc207 = 'Ensure Configure registry policy processing: Do not apply during periodic background processing is set to Enabled: FALSE (Scored)'
                        $Lvl207 = 'L1'
		                $NoBckgrndPol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Group Policy\{35378EAC-683F-11D2-A89A-00C04FBBCFA2}' -Name NoBackgroundPolicy -ErrorAction 'silentlycontinue'
                        if (!$NoBckgrndPol){
                            $Res207 = '2'}
                        Else{
                        $PolRes207 = $NoBckgrndPol | Select-Object -ExpandProperty NoBackgroundPolicy
                        if ($PolRes207 -eq '1'){
                            $Res207 = '1'} else {$Res207 = '2'}
                            }
		                $Str207 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag207 + ';' + $Desc207 + ';' + $Res207 + ';' + $Using:CurntDateForm)
                        $Str207
                        }

                        #18.8.18.3 (L1) Ensure 'Configure registry policy processing: Process even if the Group Policy objects have not changed' is set to 'Enabled: TRUE' (Scored)
                        $Tag208 = '18.8.18.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc208 = 'Ensure Configure registry policy processing: Do not apply during periodic background processing is set to Enabled: FALSE (Scored)'
                        $Lvl208 = 'L1'
		                $NoGPOLstChng = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Group Policy\{35378EAC-683F-11D2-A89A-00C04FBBCFA2}' -Name NoGPOListChanges -ErrorAction 'silentlycontinue'
                        if (!$NoGPOLstChng){
                            $Res208 = '2'}
                        Else{
                        $PolRes208 = $NoGPOLstChng | Select-Object -ExpandProperty NoGPOListChanges
                        if ($PolRes208 -eq '1'){
                            $Res208 = '1'} else {$Res208 = '2'}
                            }
		                $Str208 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag208 + ';' + $Desc208 + ';' + $Res208 + ';' + $Using:CurntDateForm)
                        $Str208
                        }

                        #18.8.18.4 (L1) Ensure 'Turn off background refresh of Group Policy' is set to 'Disabled' (Scored)
                        $Tag209 = '18.8.18.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc209 = 'Ensure Turn off background refresh of Group Policy is set to Disabled (Scored)'
                        $Lvl209 = 'L1'
		                $NoGPOLstChng = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DisableBkGndGroupPolicy -ErrorAction 'silentlycontinue'
                        if (!$NoGPOLstChng){
                            $Res209 = '2'}
                        Else{
                        $PolRes209 = $NoGPOLstChng | Select-Object -ExpandProperty DisableBkGndGroupPolicy
                        if ($PolRes209 -eq '0'){
                            $Res209 = '1'} else {$Res209 = '2'}
                            }
		                $Str209 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag209 + ';' + $Desc209 + ';' + $Res209 + ';' + $Using:CurntDateForm)
                        $Str209
                        }

                        #========================================================================================================================================================
                        #18.8.19 Internet Communication Management
                        #   This section contains recommendations related to Internet Communication Management.
                        #========================================================================================================================================================
                        #18.8.19.1 Internet Communication settings
                        #   This section contains recommendations related to Internet Communication settings.
                        #========================================================================================================================================================

                        #18.8.19.1.1 (L2) Ensure 'Turn off access to the Store' is set to 'Enabled' (Scored)
                        $Tag210 = '18.8.19.1.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc210 = 'Ensure Turn off access to the Store is set to Enabled (Scored)'
                        $Lvl210 = 'L2'
		                $NoUseStrOpnwith = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Explorer' -Name NoUseStoreOpenWith -ErrorAction 'silentlycontinue'
                        if (!$NoUseStrOpnwith){
                            $Res210 = '2'}
                        Else{
                        $PolRes210 = $NoUseStrOpnwith | Select-Object -ExpandProperty NoUseStoreOpenWith
                        if ($PolRes210 -eq '1'){
                            $Res210 = '1'} else {$Res210 = '2'}
                            }
		                $Str210 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag210 + ';' + $Desc210 + ';' + $Res210 + ';' + $Using:CurntDateForm)
                        $Str210
                        }

                        #18.8.19.1.2 (L2) Ensure 'Turn off downloading of print drivers over HTTP' is set to 'Enabled' (Scored)
                        $Tag211 = '18.8.19.1.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc211 = 'Ensure Turn off downloading of print drivers over HTTP is set to Enabled (Scored)'
                        $Lvl211 = 'L2'
		                $DisWebPnpDwnld = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Printers' -Name DisableWebPnPDownload -ErrorAction 'silentlycontinue'
                        if (!$DisWebPnpDwnld){
                            $Res211 = '2'}
                        Else{
                        $PolRes211 = $DisWebPnpDwnld | Select-Object -ExpandProperty DisableWebPnPDownload
                        if ($PolRes211 -eq '1'){
                            $Res211 = '1'} else {$Res211 = '2'}
                            }
		                $Str211 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag211 + ';' + $Desc211 + ';' + $Res211 + ';' + $Using:CurntDateForm)
                        $Str211
                        }

                        #18.8.19.1.3 (L2) Ensure 'Turn off handwriting personalization data sharing' is set to 'Enabled' (Scored)
                        $Tag212 = '18.8.19.1.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc212 = 'Ensure Turn off handwriting personalization data sharing is set to Enabled (Scored)'
                        $Lvl212 = 'L2'
		                $PrvHndWrtDataShr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\TabletPC' -Name PreventHandwritingDataSharing -ErrorAction 'silentlycontinue'
                        if (!$PrvHndWrtDataShr){
                            $Res212 = '2'}
                        Else{
                        $PolRes212 = $PrvHndWrtDataShr | Select-Object -ExpandProperty PreventHandwritingDataSharing
                        if ($PolRes212 -eq '1'){
                            $Res212 = '1'} else {$Res212 = '2'}
                            }
		                $Str212 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag212 + ';' + $Desc212 + ';' + $Res212 + ';' + $Using:CurntDateForm)
                        $Str212
                        }

                        #18.8.19.1.4 (L2) Ensure 'Turn off handwriting recognition error reporting' is set to 'Enabled' (Scored)
                        $Tag213 = '18.8.19.1.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc213 = 'Ensure Turn off handwriting recognition error reporting is set to Enabled (Scored)'
                        $Lvl213 = 'L2'
		                $PrvHndWrtErrRep = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\HandwritingErrorReports' -Name PreventHandwritingErrorReports -ErrorAction 'silentlycontinue'
                        if (!$PrvHndWrtErrRep){
                            $Res213 = '2'}
                        Else{
                        $PolRes213 = $PrvHndWrtErrRep | Select-Object -ExpandProperty PreventHandwritingErrorReports
                        if ($PolRes213 -eq '1'){
                            $Res213 = '1'} else {$Res213 = '2'}
                            }
		                $Str213 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag213 + ';' + $Desc213 + ';' + $Res213 + ';' + $Using:CurntDateForm)
                        $Str213
                        }

                        #18.8.19.1.5 (L2) Ensure 'Turn off Internet Connection Wizard if URL connection is referring to Microsoft.com' is set to 'Enabled' (Scored)
                        $Tag214 = '18.8.19.1.5'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc214 = 'Ensure Turn off Internet Connection Wizard if URL connection is referring to Microsoft.com is set to Enabled (Scored)'
                        $Lvl214 = 'L2'
		                $ExitOnMSICW = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Internet Connection Wizard' -Name ExitOnMSICW -ErrorAction 'silentlycontinue'
                        if (!$ExitOnMSICW){
                            $Res214 = '2'}
                        Else{
                        $PolRes214 = $ExitOnMSICW | Select-Object -ExpandProperty ExitOnMSICW
                        if ($PolRes214 -eq '1'){
                            $Res214 = '1'} else {$Res214 = '2'}
                            }
		                $Str214 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag214 + ';' + $Desc214 + ';' + $Res214 + ';' + $Using:CurntDateForm)
                        $Str214
                        }

                        #18.8.19.1.6 (L2) Ensure 'Turn off Internet download for Web publishing and online ordering wizards' is set to 'Enabled' (Scored)
                        $Tag215 = '18.8.19.1.6'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc215 = 'Ensure Turn off Internet download for Web publishing and online ordering wizards is set to Enabled (Scored)'
                        $Lvl215 = 'L2'
		                $NoWebServices = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoWebServices -ErrorAction 'silentlycontinue'
                        if (!$NoWebServices){
                            $Res215 = '2'}
                        Else{
                        $PolRes215 = $NoWebServices | Select-Object -ExpandProperty NoWebServices
                        if ($PolRes215 -eq '1'){
                            $Res215 = '1'} else {$Res215 = '2'}
                            }
		                $Str215 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag215 + ';' + $Desc215 + ';' + $Res215 + ';' + $Using:CurntDateForm)
                        $Str215
                        }

                        #18.8.19.1.7 (L2) Ensure 'Turn off printing over HTTP' is set to 'Enabled' (Scored)
                        $Tag216 = '18.8.19.1.7'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc216 = 'Ensure Turn off printing over HTTP is set to Enabled (Scored)'
                        $Lvl216 = 'L2'
		                $DisbHTTPPrt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Printers' -Name DisableHTTPPrinting -ErrorAction 'silentlycontinue'
                        if (!$DisbHTTPPrt){
                            $Res216 = '2'}
                        Else{
                        $PolRes216 = $DisbHTTPPrt | Select-Object -ExpandProperty DisableHTTPPrinting
                        if ($PolRes216 -eq '1'){
                            $Res216 = '1'} else {$Res216 = '2'}
                            }
		                $Str216 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag216 + ';' + $Desc216 + ';' + $Res216 + ';' + $Using:CurntDateForm)
                        $Str216
                        }

                        #18.8.19.1.8 (L2) Ensure 'Turn off Registration if URL connection is referring to Microsoft.com' is set to 'Enabled' (Scored)
                        $Tag217 = '18.8.19.1.8'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc217 = 'Ensure Turn off Registration if URL connection is referring to Microsoft.com is set to Enabled (Scored)'
                        $Lvl217 = 'L2'
		                $NoRegistration = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Registration Wizard Control' -Name NoRegistration -ErrorAction 'silentlycontinue'
                        if (!$NoRegistration){
                            $Res217 = '2'}
                        Else{
                        $PolRes217 = $NoRegistration | Select-Object -ExpandProperty NoRegistration
                        if ($PolRes217 -eq '1'){
                            $Res217 = '1'} else {$Res217 = '2'}
                            }
		                $Str217 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag217 + ';' + $Desc217 + ';' + $Res217 + ';' + $Using:CurntDateForm)
                        $Str217
                        }

                        #18.8.19.1.9 (L2) Ensure 'Turn off Search Companion content file updates' is set to 'Enabled' (Scored)
                        $Tag218 = '18.8.19.1.9'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc218 = 'Ensure Turn off Search Companion content file updates is set to Enabled (Scored)'
                        $Lvl218 = 'L2'
		                $DisCntntFlUpdt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\SearchCompanion' -Name DisableContentFileUpdates -ErrorAction 'silentlycontinue'
                        if (!$DisCntntFlUpdt){
                            $Res218 = '2'}
                        Else{
                        $PolRes218 = $DisCntntFlUpdt | Select-Object -ExpandProperty DisableContentFileUpdates
                        if ($PolRes218 -eq '1'){
                            $Res218 = '1'} else {$Res218 = '2'}
                            }
		                $Str218 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag218 + ';' + $Desc218 + ';' + $Res218 + ';' + $Using:CurntDateForm)
                        $Str218
                        }

                        #18.8.19.1.10 (L2) Ensure 'Turn off the "Order Prints" picture task' is set to 'Enabled' (Scored)
                        $Tag219 = '18.8.19.1.10'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc219 = 'Ensure Turn off the Order Prints picture task is set to Enabled (Scored)'
                        $Lvl219 = 'L2'
		                $NoOnlnPrtWiz = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoOnlinePrintsWizard -ErrorAction 'silentlycontinue'
                        if (!$NoOnlnPrtWiz){
                            $Res219 = '2'}
                        Else{
                        $PolRes219 = $NoOnlnPrtWiz | Select-Object -ExpandProperty NoOnlinePrintsWizard
                        if ($PolRes219 -eq '1'){
                            $Res219 = '1'} else {$Res219 = '2'}
                            }
		                $Str219 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag219 + ';' + $Desc219 + ';' + $Res219 + ';' + $Using:CurntDateForm)
                        $Str219
                        }

                        #18.8.19.1.11 (L2) Ensure 'Turn off the "Publish to Web" task for files and folders' is set to 'Enabled' (Scored)
                        $Tag220 = '18.8.19.1.11'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc220 = 'Ensure Turn off the Publish to Web task for files and folders is set to Enabled (Scored)'
                        $Lvl220 = 'L2'
		                $NoPublWiz = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoPublishingWizard -ErrorAction 'silentlycontinue'
                        if (!$NoPublWiz){
                            $Res220 = '2'}
                        Else{
                        $PolRes220 = $NoPublWiz | Select-Object -ExpandProperty NoPublishingWizard
                        if ($PolRes220 -eq '1'){
                            $Res220 = '1'} else {$Res220 = '2'}
                            }
		                $Str220 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag220 + ';' + $Desc220 + ';' + $Res220 + ';' + $Using:CurntDateForm)
                        $Str220
                        }

                        #18.8.19.1.12 (L2) Ensure 'Turn off the Windows Messenger Customer Experience Improvement Program' is set to 'Enabled' (Scored)
                        $Tag221 = '18.8.19.1.12'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc221 = 'Ensure Turn off the Windows Messenger Customer Experience Improvement Program is set to Enabled (Scored)'
                        $Lvl221 = 'L2'
		                $CEIP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Messenger\Client' -Name CEIP -ErrorAction 'silentlycontinue'
                        if (!$CEIP){
                            $Res221 = '2'}
                        Else{
                        $PolRes221 = $CEIP | Select-Object -ExpandProperty CEIP
                        if ($PolRes221 -eq '1'){
                            $Res221 = '1'} else {$Res221 = '2'}
                            }
		                $Str221 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag221 + ';' + $Desc221 + ';' + $Res221 + ';' + $Using:CurntDateForm)
		                $Str221
                        }
                        
                        #18.8.19.1.13 (L2) Ensure 'Turn off Windows Customer Experience Improvement Program' is set to 'Enabled' (Scored)
                        $Tag222 = '18.8.19.1.13'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc222 = 'Ensure Turn off Windows Customer Experience Improvement Program is set to Enabled (Scored)'
                        $Lvl222 = 'L2'
		                $CEIPEnable = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\SQMClient\Windows' -Name CEIPEnable -ErrorAction 'silentlycontinue'
                        if (!$CEIPEnable){
                            $Res222 = '2'}
                        Else{
                        $PolRes222 = $CEIPEnable | Select-Object -ExpandProperty CEIPEnable
                        if ($PolRes222 -eq '1'){
                            $Res222 = '1'} else {$Res222 = '2'}
                            }
		                $Str222 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag222 + ';' + $Desc222 + ';' + $Res222 + ';' + $Using:CurntDateForm)
		                $Str222
                        }

                        #18.8.19.1.14 (L2) Ensure 'Turn off Windows Error Reporting' is set to 'Enabled' (Scored)
                        $Tag223 = '18.8.19.1.13'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc223 = 'Ensure Turn off Windows Error Reporting is set to Enabled (Scored)'
                        $Lvl223 = 'L2'
		                $Disabled = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Windows Error Reporting' -Name Disabled -ErrorAction 'silentlycontinue'
                        if (!$Disabled){
                            $Res223 = '2'}
                        Else{
                        $PolRes223 = $Disabled | Select-Object -ExpandProperty Disabled
                        if ($PolRes223 -eq '1'){
                            $Res223 = '1'} else {$Res223 = '2'}
                            }
		                $Str223 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag223 + ';' + $Desc223 + ';' + $Res223 + ';' + $Using:CurntDateForm)
		                $Str223
                        }
                        
                        #========================================================================================================================================================
                        #18.8.19 Filesystem (formerly NTFS Filesystem)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FileSys.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named NTFS Filesystem but was renamed by Microsoft to Filesystem starting with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.20 Folder Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FolderRedirection.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.21 Group Policy
                        #   This section contains recommendations for configuring group policy-related settings.
                        #   This Group Policy section is provided by the Group Policy template GroupPolicy.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.21.1 Logging and tracing
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template GroupPolicyPreferences.admx/adml that is included with the
                        #   Microsoft Windows Server 2008 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.21.2 (L1) Ensure 'Configure registry policy processing: Do not apply during periodic background processing' is set to 'Enabled: FALSE' (Scored) W2K16
                        $Tag459 = '18.8.21.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc459 = 'Ensure Configure registry policy processing: Do not apply during periodic background processing is set to Enabled: FALSE (Scored)'
                        $Lvl459 = 'L1'
		                $NoBckgrndPol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Group Policy\{35378EAC-683F-11D2-A89A-00C04FBBCFA2}' -Name NoBackgroundPolicy -ErrorAction 'silentlycontinue'
                        if (!$NoBckgrndPol){
                            $Res459 = '2'}
                        Else{
                        $PolRes459 = $NoBckgrndPol | Select-Object -ExpandProperty NoBackgroundPolicy
                        if ($PolRes459 -eq '1'){
                            $Res459 = '1'} else {$Res459 = '2'}
                            }
		                $Str459 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag459 + ';' + $Desc459 + ';' + $Res459 + ';' + $Using:CurntDateForm)
                        $Str459
						}

                        #18.8.21.3 (L1) Ensure 'Configure registry policy processing: Process even if the Group Policy objects have not changed' is set to 'Enabled: TRUE' (Scored) (Scored) W2K16
                        $Tag460 = '18.8.21.3'
                        if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc460 = 'Ensure Configure registry policy processing: Do not apply during periodic background processing is set to Enabled: FALSE (Scored)'
                        $Lvl460 = 'L1'
		                $NoGPOLstChng = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Group Policy\{35378EAC-683F-11D2-A89A-00C04FBBCFA2}' -Name NoGPOListChanges -ErrorAction 'silentlycontinue'
                        if (!$NoGPOLstChng){
                            $Res460 = '2'}
                        Else{
                        $PolRes460 = $NoGPOLstChng | Select-Object -ExpandProperty NoGPOListChanges
                        if ($PolRes460 -eq '1'){
                            $Res460 = '1'} else {$Res460 = '2'}
                            }
		                $Str460 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag460 + ';' + $Desc460 + ';' + $Res460 + ';' + $Using:CurntDateForm)
                        $Str460
                        }

                        #18.8.21.4 (L1) Ensure 'Continue experiences on this device' is set to 'Disabled' (Scored) W2K16
                        $Tag461 = '18.8.21.4'
						if ($OSVersion -eq 'W2K16'){
                        $Count18++
		                $Desc461 = 'Ensure Continue experiences on this device is set to Disabled (Scored)'
                        $Lvl461 = 'L1'
		                $NoGPOLstChng = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name EnableCdp -ErrorAction 'silentlycontinue'
                        if (!$NoGPOLstChng){
                            $Res461 = '2'}
                        Else{
                        $PolRes461 = $NoGPOLstChng | Select-Object -ExpandProperty EnableCdp
                        if ($PolRes461 -eq '0'){
                            $Res461 = '1'} else {$Res461 = '2'}
                            }
		                $Str461 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag461 + ';' + $Desc461 + ';' + $Res461 + ';' + $Using:CurntDateForm)
                        $Str461
						}

                        #18.8.21.5 (L1) Ensure 'Turn off background refresh of Group Policy' is set to 'Disabled' (Scored) W2K16
                        $Tag462 = '18.8.21.5'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc462 = 'Ensure Turn off background refresh of Group Policy is set to Disabled (Scored)'
                        $Lvl462 = 'L1'
		                $NoGPOLstChng = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DisableBkGndGroupPolicy -ErrorAction 'silentlycontinue'
                        if (!$NoGPOLstChng){
                            $Res462 = '2'}
                        Else{
                        $PolRes462 = $NoGPOLstChng | Select-Object -ExpandProperty DisableBkGndGroupPolicy
                        if ($PolRes462 -eq '0'){
                            $Res462 = '1'} else {$Res462 = '2'}
                            }
		                $Str462 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag462 + ';' + $Desc462 + ';' + $Res462 + ';' + $Using:CurntDateForm)
                        $Str462
						}

                        #========================================================================================================================================================
                        #18.8.20 iSCSI
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.21 KDC
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.22 Kerberos
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.22 Internet Communication Management
                        #   This section contains recommendations related to Internet Communication Management.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.22.1 Internet Communication settings
                        #   This section contains recommendations related to Internet Communication settings.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.22.1.1 (L1) Ensure 'Turn off downloading of print drivers over HTTP' is set to 'Enabled' (Scored) W2K16
                        $Tag463 = '18.8.22.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc463 = 'Ensure Turn off downloading of print drivers over HTTP is set to Enabled (Scored)'
                        $Lvl463 = 'L1'
		                $DisWebPnpDwnld = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Printers' -Name DisableWebPnPDownload -ErrorAction 'silentlycontinue'
                        if (!$DisWebPnpDwnld){
                            $Res463 = '2'}
                        Else{
                        $PolRes463 = $DisWebPnpDwnld | Select-Object -ExpandProperty DisableWebPnPDownload
                        if ($PolRes463 -eq '1'){
                            $Res463 = '1'} else {$Res463 = '2'}
                            }
		                $Str463 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag463 + ';' + $Desc463 + ';' + $Res463 + ';' + $Using:CurntDateForm)
                        $Str463
						}

                        #18.8.22.1.2 (L2) Ensure 'Turn off handwriting personalization data sharing' is set to 'Enabled' (Scored) W2K16
                        $Tag464 = '18.8.22.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc464 = 'Ensure Turn off handwriting personalization data sharing is set to Enabled (Scored)'
                        $Lvl464 = 'L2'
		                $PrvHndWrtDataShr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\TabletPC' -Name PreventHandwritingDataSharing -ErrorAction 'silentlycontinue'
                        if (!$PrvHndWrtDataShr){
                            $Res464 = '2'}
                        Else{
                        $PolRes464 = $PrvHndWrtDataShr | Select-Object -ExpandProperty PreventHandwritingDataSharing
                        if ($PolRes464 -eq '1'){
                            $Res464 = '1'} else {$Res464 = '2'}
                            }
		                $Str464 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag464 + ';' + $Desc464 + ';' + $Res464 + ';' + $Using:CurntDateForm)
                        $Str464
						}

                        #18.8.22.1.3 (L2) Ensure 'Turn off handwriting recognition error reporting' is set to 'Enabled' (Scored) W2K16
                        $Tag465 = '18.8.22.1.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc465 = 'Ensure Turn off handwriting recognition error reporting is set to Enabled (Scored)'
                        $Lvl465 = 'L2'
		                $PrvHndWrtErrRep = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\HandwritingErrorReports' -Name PreventHandwritingErrorReports -ErrorAction 'silentlycontinue'
                        if (!$PrvHndWrtErrRep){
                            $Res465 = '2'}
                        Else{
                        $PolRes465 = $PrvHndWrtErrRep | Select-Object -ExpandProperty PreventHandwritingErrorReports
                        if ($PolRes465 -eq '1'){
                            $Res465 = '1'} else {$Res465 = '2'}
                            }
		                $Str465 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag465 + ';' + $Desc465 + ';' + $Res465 + ';' + $Using:CurntDateForm)
                        $Str465
						}

                        #18.8.22.1.4 (L2) Ensure 'Turn off Internet Connection Wizard if URL connection is referring to Microsoft.com' is set to 'Enabled' (Scored) W2K16
                        $Tag466 = '18.8.22.1.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc466 = 'Ensure Turn off Internet Connection Wizard if URL connection is referring to Microsoft.com is set to Enabled (Scored)'
                        $Lvl466 = 'L2'
		                $ExitOnMSICW = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Internet Connection Wizard' -Name ExitOnMSICW -ErrorAction 'silentlycontinue'
                        if (!$ExitOnMSICW){
                            $Res466 = '2'}
                        Else{
                        $PolRes466 = $ExitOnMSICW | Select-Object -ExpandProperty ExitOnMSICW
                        if ($PolRes466 -eq '1'){
                            $Res466 = '1'} else {$Res466 = '2'}
                            }
		                $Str466 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag466 + ';' + $Desc466 + ';' + $Res466 + ';' + $Using:CurntDateForm)
                        $Str466
						}

                        #18.8.22.1.5 (L1) Ensure 'Turn off Internet download for Web publishing and online ordering wizards' is set to 'Enabled' (Scored) W2K16
                        $Tag467 = '18.8.22.1.5'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc467 = 'Ensure Turn off Internet download for Web publishing and online ordering wizards is set to Enabled (Scored)'
                        $Lvl467 = 'L1'
		                $NoWebServices = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoWebServices -ErrorAction 'silentlycontinue'
                        if (!$NoWebServices){
                            $Res467 = '2'}
                        Else{
                        $PolRes467 = $NoWebServices | Select-Object -ExpandProperty NoWebServices
                        if ($PolRes467 -eq '1'){
                            $Res467 = '1'} else {$Res467 = '2'}
                            }
		                $Str467 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag467 + ';' + $Desc467 + ';' + $Res467 + ';' + $Using:CurntDateForm)
                        $Str467
						}

                        #18.8.22.1.6 (L1) Ensure 'Turn off printing over HTTP' is set to 'Enabled' (Scored) W2K16
                        $Tag468 = '18.8.22.1.6'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc468 = 'Ensure Turn off printing over HTTP is set to Enabled (Scored)'
                        $Lvl468 = 'L1'
		                $DisbHTTPPrt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Printers' -Name DisableHTTPPrinting -ErrorAction 'silentlycontinue'
                        if (!$DisbHTTPPrt){
                            $Res468 = '2'}
                        Else{
                        $PolRes468 = $DisbHTTPPrt | Select-Object -ExpandProperty DisableHTTPPrinting
                        if ($PolRes468 -eq '1'){
                            $Res468 = '1'} else {$Res468 = '2'}
                            }
		                $Str468 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag468 + ';' + $Desc468 + ';' + $Res468 + ';' + $Using:CurntDateForm)
                        $Str468
						}

                        #18.8.22.1.7 (L2) Ensure 'Turn off Registration if URL connection is referring to Microsoft.com' is set to 'Enabled' (Scored) W2K16
                        $Tag469 = '18.8.22.1.7'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc469 = 'Ensure Turn off Registration if URL connection is referring to Microsoft.com is set to Enabled (Scored)'
                        $Lvl469 = 'L2'
		                $NoRegistration = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Registration Wizard Control' -Name NoRegistration -ErrorAction 'silentlycontinue'
                        if (!$NoRegistration){
                            $Res469 = '2'}
                        Else{
                        $PolRes469 = $NoRegistration | Select-Object -ExpandProperty NoRegistration
                        if ($PolRes469 -eq '1'){
                            $Res469 = '1'} else {$Res469 = '2'}
                            }
		                $Str469 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag469 + ';' + $Desc469 + ';' + $Res469 + ';' + $Using:CurntDateForm)
                        $Str469
						}

                        #18.8.22.1.8 (L2) Ensure 'Turn off Search Companion content file updates' is set to 'Enabled' (Scored) W2K16
                        $Tag470 = '18.8.22.1.8'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc470 = 'Ensure Turn off Search Companion content file updates is set to Enabled (Scored)'
                        $Lvl470 = 'L2'
		                $DisCntntFlUpdt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\SearchCompanion' -Name DisableContentFileUpdates -ErrorAction 'silentlycontinue'
                        if (!$DisCntntFlUpdt){
                            $Res470 = '2'}
                        Else{
                        $PolRes470 = $DisCntntFlUpdt | Select-Object -ExpandProperty DisableContentFileUpdates
                        if ($PolRes470 -eq '1'){
                            $Res470 = '1'} else {$Res470 = '2'}
                            }
		                $Str470 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag470 + ';' + $Desc470 + ';' + $Res470 + ';' + $Using:CurntDateForm)
                        $Str470
						}

                        #18.8.22.1.9 (L2) Ensure 'Turn off the "Order Prints" picture task' is set to 'Enabled' (Scored) W2K16
                        $Tag471 = '18.8.22.1.9'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc471 = 'Ensure Turn off the Order Prints picture task is set to Enabled (Scored)'
                        $Lvl471 = 'L2'
		                $NoOnlnPrtWiz = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoOnlinePrintsWizard -ErrorAction 'silentlycontinue'
                        if (!$NoOnlnPrtWiz){
                            $Res471 = '2'}
                        Else{
                        $PolRes471 = $NoOnlnPrtWiz | Select-Object -ExpandProperty NoOnlinePrintsWizard
                        if ($PolRes471 -eq '1'){
                            $Res471 = '1'} else {$Res471 = '2'}
                            }
		                $Str471 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag471 + ';' + $Desc471 + ';' + $Res471 + ';' + $Using:CurntDateForm)
                        $Str471
						} 

                        #18.8.22.1.10 (L2) Ensure 'Turn off the "Publish to Web" task for files and folders' is set to 'Enabled' (Scored) W2K16
                        $Tag472 = '18.8.22.1.10'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc472 = 'Ensure Turn off the Publish to Web task for files and folders is set to Enabled (Scored)'
                        $Lvl472 = 'L2'
		                $NoPublWiz = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoPublishingWizard -ErrorAction 'silentlycontinue'
                        if (!$NoPublWiz){
                            $Res472 = '2'}
                        Else{
                        $PolRes472 = $NoPublWiz | Select-Object -ExpandProperty NoPublishingWizard
                        if ($PolRes472 -eq '1'){
                            $Res472 = '1'} else {$Res472 = '2'}
                            }
		                $Str472 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag472 + ';' + $Desc472 + ';' + $Res472 + ';' + $Using:CurntDateForm)
                        $Str472
						} 

                        #18.8.22.1.11 (L2) Ensure 'Turn off the Windows Messenger Customer Experience Improvement Program' is set to 'Enabled' (Scored) W2K16
                        $Tag473 = '18.8.22.1.11'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc473 = 'Ensure Turn off the Windows Messenger Customer Experience Improvement Program is set to Enabled (Scored)'
                        $Lvl473 = 'L2'
		                $CEIP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Messenger\Client' -Name CEIP -ErrorAction 'silentlycontinue'
                        if (!$CEIP){
                            $Res473 = '2'}
                        Else{
                        $PolRes473 = $CEIP | Select-Object -ExpandProperty CEIP
                        if ($PolRes473 -eq '1'){
                            $Res473 = '1'} else {$Res473 = '2'}
                            }
		                $Str473 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag473 + ';' + $Desc473 + ';' + $Res473 + ';' + $Using:CurntDateForm)
		                $Str473
						}

                        #18.8.22.1.12 (L2) Ensure 'Turn off Windows Customer Experience Improvement Program' is set to 'Enabled' (Scored) W2K16
                        $Tag474 = '18.8.22.1.12'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc474 = 'Ensure Turn off Windows Customer Experience Improvement Program is set to Enabled (Scored)'
                        $Lvl474 = 'L2'
		                $CEIPEnable = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\SQMClient\Windows' -Name CEIPEnable -ErrorAction 'silentlycontinue'
                        if (!$CEIPEnable){
                            $Res474 = '2'}
                        Else{
                        $PolRes474 = $CEIPEnable | Select-Object -ExpandProperty CEIPEnable
                        if ($PolRes474 -eq '1'){
                            $Res474 = '1'} else {$Res474 = '2'}
                            }
		                $Str474 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag474 + ';' + $Desc474 + ';' + $Res474 + ';' + $Using:CurntDateForm)
		                $Str474
						}

                        #18.8.22.1.13 (L2) Ensure 'Turn off Windows Error Reporting' is set to 'Enabled' (Scored) W2K16
                        $Tag475 = '18.8.22.1.13'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc475 = 'Ensure Turn off Windows Error Reporting is set to Enabled (Scored)'
                        $Lvl475 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting' -Name Disabled -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\PCHealth\ErrorReporting' -Name DoReport -ErrorAction 'silentlycontinue'
                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res475 = '2'}
                        Else{
                        $PolRes475a = $RegistrarsKey1 | Select-Object -ExpandProperty Disabled
                        $PolRes475b = $RegistrarsKey2 | Select-Object -ExpandProperty DoReport       
                        if (($PolRes475a -eq '1') -and ($PolRes475b -eq '1')){
                            $Res475 = '1'} else {$Res475 = '2'}
                            }
		                $Str475 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag475 + ';' + $Desc475 + ';' + $Res475 + ';' + $Using:CurntDateForm)
                        $Str475
						}

                        #========================================================================================================================================================
                        #18.8.23 Locale Services
                        #   This section contains recommendations for Locale Services settings.
                        #========================================================================================================================================================

                        #18.8.23.1 (L2) Ensure 'Disallow copying of user input methods to the system account for sign-in' is set to 'Enabled' (Scored)
                        $Tag224 = '18.8.19.1.13'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc224 = 'Ensure Disallow copying of user input methods to the system account for sign-in is set to Enabled (Scored)'
                        $Lvl224 = 'L2'
		                $BlckUsrInpMetSign = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Control Panel\International' -Name BlockUserInputMethodsForSignIn -ErrorAction 'silentlycontinue'
                        if (!$BlckUsrInpMetSign){
                            $Res224 = '2'}
                        Else{
                        $PolRes224 = $BlckUsrInpMetSign | Select-Object -ExpandProperty BlockUserInputMethodsForSignIn
                        if ($PolRes224 -eq '1'){
                            $Res224 = '1'} else {$Res224 = '2'}
                            }
		                $Str224 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag224 + ';' + $Desc224 + ';' + $Res224 + ';' + $Using:CurntDateForm)
		                $Str224
                        }

                        #========================================================================================================================================================
                        #18.8.23 iSCSI
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template iSCSI.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.24 KDC
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template KDC.admx/adml that is included with the
                        #   Microsoft Windows Server 2008 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        
                        #========================================================================================================================================================
                        #18.8.24 Logon
                        #   This section contains recommendations related to the logon process and lock screen.
                        #========================================================================================================================================================

                        #18.8.24.1 (L1) Ensure 'Do not display network selection UI' is set to 'Enabled' (Scored)
                        $Tag225 = '18.8.24.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc225 = 'Ensure Do not display network selection UI is set to Enabled (Scored)'
                        $Lvl225 = 'L1'
		                $DntDspNetwSelUI = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DontDisplayNetworkSelectionUI -ErrorAction 'silentlycontinue'
                        if (!$DntDspNetwSelUI){
                            $Res225 = '2'}
                        Else{
                        $PolRes225 = $DntDspNetwSelUI | Select-Object -ExpandProperty DontDisplayNetworkSelectionUI
                        if ($PolRes225 -eq '1'){
                            $Res225 = '1'} else {$Res225 = '2'}
                            }
		                $Str225 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag225 + ';' + $Desc225 + ';' + $Res225 + ';' + $Using:CurntDateForm)
		                $Str225
                        }

                        #18.8.24.2 (L1) Ensure 'Do not enumerate connected users on domain-joined computers' is set to 'Enabled' (Scored)
                        $Tag226 = '18.8.24.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc226 = 'Ensure Do not enumerate connected users on domain-joined computers is set to Enabled (Scored)'
                        $Lvl226 = 'L1'
		                $DntEnumConnUsrs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DontEnumerateConnectedUsers -ErrorAction 'silentlycontinue'
                        if (!$DntEnumConnUsrs){
                            $Res226 = '2'}
                        Else{
                        $PolRes226 = $DntEnumConnUsrs | Select-Object -ExpandProperty DontEnumerateConnectedUsers
                        if ($PolRes226-eq '1'){
                            $Res226 = '1'} else {$Res226 = '2'}
                            }
		                $Str226 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag226 + ';' + $Desc226 + ';' + $Res226 + ';' + $Using:CurntDateForm)
		                $Str226
                        }

                        #18.8.24.3 (L1) Ensure 'Enumerate local users on domain-joined computers' is set to 'Disabled' (Scored)
                        $Tag227 = '18.8.24.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc227 = 'Ensure Enumerate local users on domain-joined computers is set to Disabled (Scored)'
                        $Lvl227 = 'L1'
		                $EnumLclUsrs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name EnumerateLocalUsers -ErrorAction 'silentlycontinue'
                        if (!$EnumLclUsrs){
                            $Res227 = '2'}
                        Else{
                        $PolRes227 = $EnumLclUsrs | Select-Object -ExpandProperty EnumerateLocalUsers
                        if ($PolRes227-eq '1'){
                            $Res227 = '1'} else {$Res227 = '2'}
                            }
		                $Str227 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag227 + ';' + $Desc227 + ';' + $Res227 + ';' + $Using:CurntDateForm)
		                $Str227
                        }

                        #18.8.24.4 (L1) Ensure 'Turn off app notifications on the lock screen' is set to 'Enabled' (Scored)
                        $Tag228 = '18.8.24.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc228 = 'Ensure Turn off app notifications on the lock screen is set to Enabled (Scored)'
                        $Lvl228 = 'L1'
		                $DsbLckScrAppNot = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DisableLockScreenAppNotifications -ErrorAction 'silentlycontinue'
                        if (!$DsbLckScrAppNot){
                            $Res228 = '2'}
                        Else{
                        $PolRes228 = $DsbLckScrAppNot | Select-Object -ExpandProperty DisableLockScreenAppNotifications
                        if ($PolRes228-eq '1'){
                            $Res228 = '1'} else {$Res228 = '2'}
                            }
		                $Str228 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag228 + ';' + $Desc228 + ';' + $Res228 + ';' + $Using:CurntDateForm)
		                $Str228
                        }

                        #18.8.24.5 (L1) Ensure 'Turn on convenience PIN sign-in' is set to 'Disabled' (Scored)
                        $Tag229 = '18.8.24.5'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc229 = 'Ensure Turn on convenience PIN sign-in is set to Disabled (Scored)'
                        $Lvl229 = 'L1'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name AllowDomainPINLogon -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res229 = '2'}
                        Else{
                        $PolRes229 = $AllwDomPINLgn | Select-Object -ExpandProperty AllowDomainPINLogon
                        if ($PolRes229-eq '1'){
                            $Res229 = '1'} else {$Res229 = '2'}
                            }
		                $Str229 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag229 + ';' + $Desc229 + ';' + $Res229 + ';' + $Using:CurntDateForm)
		                $Str229
                        }
                        
                        #========================================================================================================================================================
                        #18.8.25 Mitigation Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.25 Kerberos
                        #   This section contains recommendations for Kerberos settings.
                        #   This Group Policy section is provided by the Group Policy template Kerberos.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.25.1 (L2) Ensure 'Support device authentication using certificate' is set to 'Enabled: Automatic' (Scored) W2K16
                        $Tag476 = '18.8.25.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc476 = 'Ensure Support device authentication using certificate is set to Enabled: Automatic (Scored)'
                        $Lvl476 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\kerberos\parameters' -Name DevicePKInitBehavior -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\kerberos\parameters' -Name DevicePKInitEnabled -ErrorAction 'silentlycontinue'
                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res476 = '2'}
                        Else{
                        $PolRes476a = $RegistrarsKey1 | Select-Object -ExpandProperty DevicePKInitBehavior
                        $PolRes476b = $RegistrarsKey2 | Select-Object -ExpandProperty DevicePKInitEnabled       
                        if (($PolRes476a -eq '1') -and ($PolRes476b -eq '1')){
                            $Res476 = '1'} else {$Res476 = '2'}
                            }
		                $Str476 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag476 + ';' + $Desc476 + ';' + $Res476 + ';' + $Using:CurntDateForm)
                        $Str476
						}
                        
                        #========================================================================================================================================================
                        #18.8.26 Locale Services
                        #   This section contains recommendations for Locale Services settings.
                        #   This Group Policy section is provided by the Group Policy template Globalization.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.26.1 (L2) Ensure 'Disallow copying of user input methods to the system account for sign-in' is set to 'Enabled' (Scored) W2K16
                        $Tag477 = '18.8.26.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc477 = 'Ensure Disallow copying of user input methods to the system account for sign-in is set to Enabled (Scored)'
                        $Lvl477 = 'L2'
		                $BlckUsrInpMetSign = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Control Panel\International' -Name BlockUserInputMethodsForSignIn -ErrorAction 'silentlycontinue'
                        if (!$BlckUsrInpMetSign){
                            $Res477 = '2'}
                        Else{
                        $PolRes477 = $BlckUsrInpMetSign | Select-Object -ExpandProperty BlockUserInputMethodsForSignIn
                        if ($PolRes477 -eq '1'){
                            $Res477 = '1'} else {$Res477 = '2'}
                            }
		                $Str477 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag477 + ';' + $Desc477 + ';' + $Res477 + ';' + $Using:CurntDateForm)
		                $Str477
						}

                        #========================================================================================================================================================
                        #18.8.26 Net Logon
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.27 Logon
                        #   This section contains recommendations related to the logon process and lock screen.
                        #   This Group Policy section is provided by the Group Policy template Logon.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.27.1 (L1) Ensure 'Block user from showing account details on sign-in' is set to 'Enabled' (Scored) W2K16
                        $Tag478 = '18.8.27.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc478 = 'Ensure Block user from showing account details on sign-in is set to Enabled (Scored)'
                        $Lvl478 = 'L2'
		                $BlckUsrInpMetSign = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name BlockUserFromShowingAccountDetailsOnSignin -ErrorAction 'silentlycontinue'
                        if (!$BlckUsrInpMetSign){
                            $Res478 = '2'}
                        Else{
                        $PolRes478 = $BlckUsrInpMetSign | Select-Object -ExpandProperty BlockUserFromShowingAccountDetailsOnSignin
                        if ($PolRes478 -eq '1'){
                            $Res478 = '1'} else {$Res478 = '2'}
                            }
		                $Str478 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag478 + ';' + $Desc478 + ';' + $Res478 + ';' + $Using:CurntDateForm)
		                $Str478
						}

                        #18.8.27.2 (L1) Ensure 'Do not display network selection UI' is set to 'Enabled' (Scored) W2K16
                        $Tag479 = '18.8.27.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc479 = 'Ensure Do not display network selection UI is set to Enabled (Scored)'
                        $Lvl479 = 'L1'
		                $DntDspNetwSelUI = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DontDisplayNetworkSelectionUI -ErrorAction 'silentlycontinue'
                        if (!$DntDspNetwSelUI){
                            $Res479 = '2'}
                        Else{
                        $PolRes479 = $DntDspNetwSelUI | Select-Object -ExpandProperty DontDisplayNetworkSelectionUI
                        if ($PolRes479 -eq '1'){
                            $Res479 = '1'} else {$Res479 = '2'}
                            }
		                $Str479 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag479 + ';' + $Desc479 + ';' + $Res479 + ';' + $Using:CurntDateForm)
		                $Str479
						}

                        #18.8.27.3 (L1) Ensure 'Do not enumerate connected users on domain-joined computers' is set to 'Enabled' (Scored) W2K16
                        $Tag226 = '18.8.27.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc226 = 'Ensure Do not enumerate connected users on domain-joined computers is set to Enabled'
                        $Lvl226 = 'L1'
		                $DntEnumConnUsrs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DontEnumerateConnectedUsers -ErrorAction 'silentlycontinue'
                        if (!$DntEnumConnUsrs){
                            $Res226 = '2'}
                        Else{
                        $PolRes226 = $DntEnumConnUsrs | Select-Object -ExpandProperty DontEnumerateConnectedUsers
                        if ($PolRes226-eq '1'){
                            $Res226 = '1'} else {$Res226 = '2'}
                            }
		                $Str226 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag226 + ';' + $Desc226 + ';' + $Res226 + ';' + $Using:CurntDateForm)
		                $Str226
						}

                        #18.8.27.4 (L1) Ensure 'Enumerate local users on domain-joined computers' is set to 'Disabled' (MS only) (Scored) W2K16
                        $Tag480 = '18.8.27.4'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc480 = 'Ensure Enumerate local users on domain-joined computers is set to Disabled (MS only) (Scored)'
                        $Lvl480 = 'L1'
		                $EnumLclUsrs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name EnumerateLocalUsers -ErrorAction 'silentlycontinue'
                        if (!$EnumLclUsrs){
                            $Res480 = '2'}
                        Else{
                        $PolRes480 = $EnumLclUsrs | Select-Object -ExpandProperty EnumerateLocalUsers
                        if ($PolRes480-eq '1'){
                            $Res480 = '1'} else {$Res480 = '2'}
                            }
		                $Str480 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag480 + ';' + $Desc480 + ';' + $Res480 + ';' + $Using:CurntDateForm)
		                $Str480
						}

                        #18.8.27.5 (L1) Ensure 'Turn off app notifications on the lock screen' is set to 'Enabled' (Scored)
                        $Tag481 = '18.8.27.5'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc481 = 'Ensure Turn off app notifications on the lock screen is set to Enabled (Scored)'
                        $Lvl481 = 'L1'
		                $DsbLckScrAppNot = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name DisableLockScreenAppNotifications -ErrorAction 'silentlycontinue'
                        if (!$DsbLckScrAppNot){
                            $Res481 = '2'}
                        Else{
                        $PolRes481 = $DsbLckScrAppNot | Select-Object -ExpandProperty DisableLockScreenAppNotifications
                        if ($PolRes481-eq '1'){
                            $Res481 = '1'} else {$Res481 = '2'}
                            }
		                $Str481 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag481 + ';' + $Desc481 + ';' + $Res481 + ';' + $Using:CurntDateForm)
		                $Str481
						}

                        #18.8.27.6 (L1) Ensure 'Turn off picture password sign-in' is set to 'Enabled' (Scored) W2K16
                        $Tag482 = '18.8.27.6'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc482 = 'Ensure Turn off picture password sign-in is set to Enabled (Scored)'
                        $Lvl482 = 'L1'
		                $DsbLckScrAppNot = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name BlockDomainPicturePassword -ErrorAction 'silentlycontinue'
                        if (!$DsbLckScrAppNot){
                            $Res482 = '2'}
                        Else{
                        $PolRes482 = $DsbLckScrAppNot | Select-Object -ExpandProperty BlockDomainPicturePassword
                        if ($PolRes482-eq '1'){
                            $Res482 = '1'} else {$Res482 = '2'}
                            }
		                $Str482 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag482 + ';' + $Desc482 + ';' + $Res482 + ';' + $Using:CurntDateForm)
		                $Str482
						}

                        #18.8.27.7 (L1) Ensure 'Turn on convenience PIN sign-in' is set to 'Disabled' (Scored) W2K16
                        $Tag483 = '18.8.27.7'
                        if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc483 = 'Ensure Turn on convenience PIN sign-in is set to Disabled (Scored)'
                        $Lvl483 = 'L1'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name AllowDomainPINLogon -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res483 = '2'}
                        Else{
                        $PolRes483 = $AllwDomPINLgn | Select-Object -ExpandProperty AllowDomainPINLogon
                        if ($PolRes483-eq '0'){
                            $Res483 = '1'} else {$Res483 = '2'}
                            }
		                $Str483 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag483 + ';' + $Desc483 + ';' + $Res483 + ';' + $Using:CurntDateForm)
		                $Str483
                        }

                        #========================================================================================================================================================
                        #18.8.27 Performance Control Panel
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "PerfCenterCPL.admx/adml" 
                        #   that is included with the Microsoft Windows Vista, 2008, 7/2008R2 & 2012 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.28 Power Management
                        #   This section contains recommendations for Power Management settings.
                        #========================================================================================================================================================
                        #18.8.28 Mitigation Options
                        #   This section contains settings for Mitigation Options.
                        #   This Group Policy section is provided by the Group Policy template GroupPolicy.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.28.1 (L1) Ensure 'Untrusted Font Blocking' is set to 'Enabled: Block untrusted fonts and log events' (Scored) W2K16
                        $Tag484 = '18.8.28.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc484 = 'Ensure Untrusted Font Blocking is set to Enabled: Block untrusted fonts and log events (Scored)'
                        $Lvl484 = 'L1'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\MitigationOptions' -Name MitigationOptions_FontBocking -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res484 = '2'}
                        Else{
                        $PolRes484 = $AllwDomPINLgn | Select-Object -ExpandProperty MitigationOptions_FontBocking
                        if ($PolRes484-eq '1'){
                            $Res484 = '1'} else {$Res484 = '2'}
                            }
		                $Str484 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag484 + ';' + $Desc484 + ';' + $Res484 + ';' + $Using:CurntDateForm)
		                $Str484
						}

                        #========================================================================================================================================================
                        #18.8.28.1 Button Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.28.2 Hard Disk Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.28.3 Notification Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.28.4 Sleep Settings
                        #   This section contains recommendations related to Power Management Sleep mode.
                        #========================================================================================================================================================
                        
                        #18.8.28.4.1 (L2) Ensure 'Require a password when a computer wakes (on battery)' is set to 'Enabled' (Scored)
                        $Tag230 = '18.8.28.4.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc230 = 'Ensure Require a password when a computer wakes (on battery) is set to Enabled (Scored)'
                        $Lvl230 = 'L2'
		                $DCSettIndx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Power\PowerSettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51' -Name DCSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$DCSettIndx){
                            $Res230 = '2'}
                        Else{
                        $PolRes230 = $DCSettIndx | Select-Object -ExpandProperty DCSettingIndex
                        if ($PolRes230-eq '1'){
                            $Res230 = '1'} else {$Res230 = '2'}
                            }
		                $Str230 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag230 + ';' + $Desc230 + ';' + $Res230 + ';' + $Using:CurntDateForm)
		                $Str230
                        }
                        
                        #18.8.28.4.2 (L2) Ensure 'Require a password when a computer wakes (plugged in)' is set to 'Enabled' (Scored)
                        $Tag231 = '18.8.28.4.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc231 = 'Ensure Require a password when a computer wakes (plugged in) is set to Enabled (Scored)'
                        $Lvl231 = 'L2'
		                $ACSettIndx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Power\PowerSettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51' -Name ACSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$ACSettIndx){
                            $Res231 = '2'}
                        Else{
                        $PolRes231 = $ACSettIndx | Select-Object -ExpandProperty ACSettingIndex
                        if ($PolRes231-eq '1'){
                            $Res231 = '1'} else {$Res231 = '2'}
                            }
		                $Str231 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag231 + ';' + $Desc231 + ';' + $Res231 + ';' + $Using:CurntDateForm)
		                $Str231
                        }
                        
                        #========================================================================================================================================================
                        #18.8.29 Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.29 Net Logon
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Netlogon.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.30 Remote Assistance
                        #   This section contains recommendations related to Remote Assistance.
                        #========================================================================================================================================================

                        #18.8.30.1 (L1) Ensure 'Configure Offer Remote Assistance' is set to 'Disabled' (Scored)
                        $Tag232 = '18.8.30.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc232 = 'Ensure Configure Offer Remote Assistance is set to Disabled (Scored)'
                        $Lvl232 = 'L1'
		                $fAllwUnsol = Get-ItemProperty -Path 'HKLM:Software\policies\Microsoft\Windows NT\Terminal Services' -Name fAllowUnsolicited -ErrorAction 'silentlycontinue'
                        if (!$fAllwUnsol){
                            $Res232 = '2'}
                        Else{
                        $PolRes232 = $fAllwUnsol | Select-Object -ExpandProperty fAllowUnsolicited
                        if ($PolRes232-eq '0'){
                            $Res232 = '1'} else {$Res232 = '2'}
                            }
		                $Str232 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag232 + ';' + $Desc232 + ';' + $Res232 + ';' + $Using:CurntDateForm)
		                $Str232
                        }

                        #18.8.30.2 (L1) Ensure 'Configure Solicited Remote Assistance' is set to 'Disabled' (Scored)
                        $Tag233 = '18.8.30.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc233 = 'Ensure Configure Solicited Remote Assistance is set to Disabled (Scored)'
                        $Lvl233 = 'L1'
		                $fAllwToGetHlp = Get-ItemProperty -Path 'HKLM:Software\policies\Microsoft\Windows NT\Terminal Services' -Name fAllowToGetHelp -ErrorAction 'silentlycontinue'
                        if (!$fAllwToGetHlp){
                            $Res233 = '2'}
                        Else{
                        $PolRes233 = $fAllwToGetHlp | Select-Object -ExpandProperty fAllowToGetHelp
                        if ($PolRes233-eq '0'){
                            $Res233 = '1'} else {$Res233 = '2'}
                            }
		                $Str233 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag233 + ';' + $Desc233 + ';' + $Res233 + ';' + $Using:CurntDateForm)
		                $Str233
                        }
                        
                        #========================================================================================================================================================
                        #18.8.30 OS Policies
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template OSPolicy.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.31 Performance Control Panel
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PerfCenterCPL.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #========================================================================================================================================================
                        #18.8.31 Remote Procedure Call
                        #   This section contains recommendations related to Remote Procedure Call.
                        #========================================================================================================================================================

                        #18.8.31.1 (L1) Ensure 'Enable RPC Endpoint Mapper Client Authentication' is set to 'Enabled' (MS only) (Scored)
                        $Tag234 = '18.8.31.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc234 = 'Ensure Enable RPC Endpoint Mapper Client Authentication is set to Enabled (MS only) (Scored)'
                        $Lvl234 = 'L1'
		                $EnbAuthEpRes = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Rpc' -Name EnableAuthEpResolution -ErrorAction 'silentlycontinue'
                        if (!$EnbAuthEpRes){
                            $Res234 = '2'}
                        Else{
                        $PolRes234 = $EnbAuthEpRes | Select-Object -ExpandProperty EnableAuthEpResolution
                        if ($PolRes234-eq '1'){
                            $Res234 = '1'} else {$Res234 = '2'}
                            }
		                $Str234 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag234 + ';' + $Desc234 + ';' + $Res234 + ';' + $Using:CurntDateForm)
		                $Str234
                        }

                        #18.8.31.2 (L2) Ensure 'Restrict Unauthenticated RPC clients' is set to 'Enabled: Authenticated' (MS only) (Scored)
                        $Tag235 = '18.8.31.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc235 = 'Ensure Restrict Unauthenticated RPC clients is set to Enabled: Authenticated (MS only) (Scored)'
                        $Lvl235 = 'L1'
		                $RestrctRemClnt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Rpc' -Name RestrictRemoteClients -ErrorAction 'silentlycontinue'
                        if (!$RestrctRemClnt){
                            $Res235 = '2'}
                        Else{
                        $PolRes235 = $RestrctRemClnt | Select-Object -ExpandProperty RestrictRemoteClients
                        if ($PolRes235-eq '1'){
                            $Res235 = '1'} else {$Res235 = '2'}
                            }
		                $Str235 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag235 + ';' + $Desc235 + ';' + $Res235 + ';' + $Using:CurntDateForm)
		                $Str235
                        }
                        
                        #========================================================================================================================================================
                        #18.8.32 Removable Storage Access
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.32 PIN Complexity
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Passport.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.33 Power Management
                        #   This section contains recommendations for Power Management settings.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.33.1 Button Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.33.2 Energy Saver Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.33.3 Hard Disk Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.33.4 Notification Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.33.5 Power Throttling Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.33.6 Sleep Settings
                        #   This section contains recommendations related to Power Management Sleep mode.
                        #   This Group Policy section is provided by the Group Policy template Power.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.8.33.6.1 (L2) Ensure 'Allow network connectivity during connected-standby (on battery)' is set to 'Disabled' (Scored) W2K16
                        $Tag485 = '18.8.28.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc485 = 'Ensure Allow network connectivity during connected-standby (on battery) is set to Disabled (Scored)'
                        $Lvl485 = 'L2'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Power\PowerSettings\f15576e8-98b7-4186-b944-eafa664402d9' -Name DCSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res485 = '2'}
                        Else{
                        $PolRes485 = $AllwDomPINLgn | Select-Object -ExpandProperty DCSettingIndex
                        if ($PolRes485-eq '0'){
                            $Res485 = '1'} else {$Res485 = '2'}
                            }
		                $Str485 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag485 + ';' + $Desc485 + ';' + $Res485 + ';' + $Using:CurntDateForm)
		                $Str485
						}

                        #18.8.33.6.2 (L2) Ensure 'Allow network connectivity during connected-standby (plugged in)' is set to 'Disabled' (Scored) W2K16
                        $Tag486 = '18.8.33.6.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc486 = 'Ensure Allow network connectivity during connected-standby (plugged in) is set to Disabled (Scored)'
                        $Lvl486 = 'L2'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Power\PowerSettings\f15576e8-98b7-4186-b944-eafa664402d9' -Name ACSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res486 = '2'}
                        Else{
                        $PolRes486 = $AllwDomPINLgn | Select-Object -ExpandProperty ACSettingIndex
                        if ($PolRes486-eq '0'){
                            $Res486 = '1'} else {$Res486 = '2'}
                            }
		                $Str486 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag486 + ';' + $Desc486 + ';' + $Res486 + ';' + $Using:CurntDateForm)
		                $Str486
						}

                        #18.8.33.6.3 (L1) Ensure 'Require a password when a computer wakes (on battery)' is set to 'Enabled' (Scored) W2K16
                        $Tag487 = '18.8.33.6.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc487 = 'Ensure Require a password when a computer wakes (on battery) is set to Enabled (Scored)'
                        $Lvl487 = 'L1'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Power\PowerSettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51' -Name DCSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res487 = '2'}
                        Else{
                        $PolRes487 = $AllwDomPINLgn | Select-Object -ExpandProperty DCSettingIndex
                        if ($PolRes487-eq '1'){
                            $Res487 = '1'} else {$Res487 = '2'}
                            }
		                $Str487 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag487 + ';' + $Desc487 + ';' + $Res487 + ';' + $Using:CurntDateForm)
		                $Str487
						}

                        #18.8.33.6.4 (L1) Ensure 'Require a password when a computer wakes (plugged in)' is set to 'Enabled' (Scored) W2K16
                        $Tag488 = '18.8.33.6.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc488 = 'Ensure Require a password when a computer wakes (plugged in) is set to Enabled (Scored)'
                        $Lvl488 = 'L1'
		                $AllwDomPINLgn = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Power\PowerSettings\0e796bdb-100d-47d6-a2d5-f7d2daa51f51' -Name ACSettingIndex -ErrorAction 'silentlycontinue'
                        if (!$AllwDomPINLgn){
                            $Res488 = '2'}
                        Else{
                        $PolRes488 = $AllwDomPINLgn | Select-Object -ExpandProperty ACSettingIndex
                        if ($PolRes488-eq '1'){
                            $Res488 = '1'} else {$Res488 = '2'}
                            }
		                $Str488 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag488 + ';' + $Desc488 + ';' + $Res488 + ';' + $Using:CurntDateForm)
		                $Str488
						}

                        #========================================================================================================================================================
                        #18.8.33 Scripts
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.34 Server Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.34 Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ReAgent.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.35 Shutdown
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.35 Remote Assistance
                        #   This section contains recommendations related to Remote Assistance.
                        #   This Group Policy section is provided by the Group Policy template RemoteAssistance.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.35.1 (L1) Ensure 'Configure Offer Remote Assistance' is set to 'Disabled' (Scored) W2K16
                        $Tag489 = '18.8.35.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc489 = 'Ensure Configure Offer Remote Assistance is set to Disabled (Scored)'
                        $Lvl489 = 'L1'
		                $fAllwUnsol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fAllowUnsolicited -ErrorAction 'silentlycontinue'
                        if (!$fAllwUnsol){
                            $Res489 = '2'}
                        Else{
                        $PolRes489 = $fAllwUnsol | Select-Object -ExpandProperty fAllowUnsolicited
                        if ($PolRes489-eq '0'){
                            $Res489 = '1'} else {$Res489 = '2'}
                            }
		                $Str489 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag489 + ';' + $Desc489 + ';' + $Res489 + ';' + $Using:CurntDateForm)
		                $Str489
						}

                        #18.8.35.2 (L1) Ensure 'Configure Solicited Remote Assistance' is set to 'Disabled' (Scored) W2K16
                        $Tag490 = '18.8.35.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc490 = 'Ensure Configure Solicited Remote Assistance is set to Disabled (Scored)'
                        $Lvl490 = 'L1'
		                $fAllwUnsol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fAllowToGetHelp -ErrorAction 'silentlycontinue'
                        if (!$fAllwUnsol){
                            $Res490 = '2'}
                        Else{
                        $PolRes490 = $fAllwUnsol | Select-Object -ExpandProperty fAllowToGetHelp
                        if ($PolRes490-eq '0'){
                            $Res490 = '1'} else {$Res490 = '2'}
                            }
		                $Str490 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag490 + ';' + $Desc490 + ';' + $Res490 + ';' + $Using:CurntDateForm)
		                $Str490
						}

                        #========================================================================================================================================================
                        #18.8.36 Shutdown Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.36 Remote Procedure Call
                        #   This section contains recommendations related to Remote Procedure Call.
                        #   This Group Policy section is provided by the Group Policy template RPC.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.36.1 (L1) Ensure 'Enable RPC Endpoint Mapper Client Authentication' is set to 'Enabled' (MS only) (Scored) W2K16
                        $Tag234 = '18.8.36.1'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc234 = 'Ensure Enable RPC Endpoint Mapper Client Authentication is set to Enabled (MS only) (Scored)'
                        $Lvl234 = 'L1'
		                $EnbAuthEpRes = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Rpc' -Name EnableAuthEpResolution -ErrorAction 'silentlycontinue'
                        if (!$EnbAuthEpRes){
                            $Res234 = '2'}
                        Else{
                        $PolRes234 = $EnbAuthEpRes | Select-Object -ExpandProperty EnableAuthEpResolution
                        if ($PolRes234-eq '1'){
                            $Res234 = '1'} else {$Res234 = '2'}
                            }
		                $Str234 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag234 + ';' + $Desc234 + ';' + $Res234 + ';' + $Using:CurntDateForm)
		                $Str234
						}

                        #18.8.36.2 (L2) Ensure 'Restrict Unauthenticated RPC clients' is set to 'Enabled: Authenticated' (MS only) (Scored) W2K16
                        $Tag491 = '18.8.36.2'
						if (($OSVersion -eq 'W2K16') -and ($SrvType -eq 'MS')){
                        $Count18++
		                $Desc491 = 'Ensure Restrict Unauthenticated RPC clients is set to Enabled: Authenticated (MS only) (Scored)'
                        $Lvl491 = 'L1'
		                $RestrctRemClnt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Rpc' -Name RestrictRemoteClients -ErrorAction 'silentlycontinue'
                        if (!$RestrctRemClnt){
                            $Res491 = '2'}
                        Else{
                        $PolRes491 = $RestrctRemClnt | Select-Object -ExpandProperty RestrictRemoteClients
                        if ($PolRes491-eq '1'){
                            $Res491 = '1'} else {$Res491 = '2'}
                            }
		                $Str491 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag491 + ';' + $Desc491 + ';' + $Res491 + ';' + $Using:CurntDateForm)
		                $Str491
						}

                        #========================================================================================================================================================
                        #18.8.37 System Restore
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.37 Removable Storage Access
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template RemovableStorage.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.38 Troubleshooting and Diagnostics
                        #   This section contains recommendations related to Troubleshooting and Diagnostics.
                        #========================================================================================================================================================
                        #18.8.38 Scripts
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Scripts.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.38.1 Application Compatibility Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.2 Corrupted File Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.3 Disk Diagnostic
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.4 Fault Tolerant Heap
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.5 Microsoft Support Diagnostic Tool
                        #   This section contains recommendations related to the Microsoft Support Diagnostic Tool.
                        #========================================================================================================================================================

                        #18.8.38.5.1 (L2) Ensure 'Microsoft Support Diagnostic Tool: Turn on MSDT interactive communication with support provider' is set to 'Disabled' (Scored)
                        $Tag236 = '18.8.38.5.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc236 = 'Ensure Microsoft Support Diagnostic Tool: Turn on MSDT interactive communication with support provider is set to Disabled (Scored)'
                        $Lvl236 = 'L2'
		                $DsbqryRemSrv = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\ScriptedDiagnosticsProvider\Policy' -Name DisableQueryRemoteServer -ErrorAction 'silentlycontinue'
                        if (!$DsbqryRemSrv){
                            $Res236 = '2'}
                        Else{
                        $PolRes236 = $DsbqryRemSrv | Select-Object -ExpandProperty DisableQueryRemoteServer
                        if ($PolRes236-eq '0'){
                            $Res236 = '1'} else {$Res236 = '2'}
                            }
		                $Str236 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag236 + ';' + $Desc236 + ';' + $Res236 + ';' + $Using:CurntDateForm)
		                $Str236
                        }
                        
                        #========================================================================================================================================================
                        #18.8.38.6 MSI Corrupted File Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.7 Scheduled Maintenance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "sdiagschd.admx/adml" that is included with the 
                        #   Microsoft Windows 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.38.8 Scripted Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.9 Windows Boot Performance Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.10 Windows Memory Leak Diagnosis
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.38.11 Windows Performance PerfTrack
                        #   This section contains recommendations related to Windows Performance PerfTrack.
                        #========================================================================================================================================================

                        #18.8.38.11.1 (L2) Ensure 'Enable/Disable PerfTrack' is set to 'Disabled' (Scored)
                        $Tag237 = '18.8.38.11.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc237 = 'Ensure Enable/Disable PerfTrack is set to Disabled (Scored)'
                        $Lvl237 = 'L2'
		                $ScnExecEnb = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WDI\{9c5a40da-b965-4fc3-8781-88dd50a6299d}' -Name ScenarioExecutionEnabled -ErrorAction 'silentlycontinue'
                        if (!$ScnExecEnb){
                            $Res237 = '2'}
                        Else{
                        $PolRes237 = $ScnExecEnb | Select-Object -ExpandProperty ScenarioExecutionEnabled
                        if ($PolRes237-eq '0'){
                            $Res237 = '1'} else {$Res237 = '2'}
                            }
		                $Str237 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag237 + ';' + $Desc237 + ';' + $Res237 + ';' + $Using:CurntDateForm)
		                $Str237
                        }
                        
                        #========================================================================================================================================================
                        #18.8.39 Trusted Platform Module Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.39 Server Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ServerManager.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.40 User Profiles
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.40 Shutdown
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WinInit.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.41 Shutdown Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Winsrv.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.41 Windows File Protection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.8.42 Windows HotStart
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "HotStart.admx/adml" that is included with the Microsoft
                        #   Windows Vista, 2008, 7/2008R2 & 8/2012 Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.42 Storage Health
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template StorageHealth.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.43 Windows Time Service
                        #   This section contains recommendations related to the Windows Time Service.
                        #========================================================================================================================================================
                        #18.8.43 System Restore
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SystemRestore.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.43.1 Time Providers
                        #   This section contains recommendations related to Time Providers.
                        #========================================================================================================================================================
                                            
                        #18.8.43.1.1 (L2) Ensure 'Enable Windows NTP Client' is set to 'Enabled' (Scored)
                        $Tag238 = '18.8.43.1.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc238 = 'Ensure Enable Windows NTP Client is set to Enabled (Scored)'
                        $Lvl238 = 'L2'
		                $NTPCltEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\W32Time\TimeProviders\NtpClient' -Name Enabled -ErrorAction 'silentlycontinue'
                        if (!$NTPCltEnb){
                            $Res238 = '2'}
                        Else{
                        $PolRes238 = $NTPCltEnb | Select-Object -ExpandProperty Enabled
                        if ($PolRes238-eq '1'){
                            $Res238 = '1'} else {$Res238 = '2'}
                            }
		                $Str238 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag238 + ';' + $Desc238 + ';' + $Res238 + ';' + $Using:CurntDateForm)
		                $Str238
                        }

                        #18.8.43.1.2 (L2) Ensure 'Enable Windows NTP Server' is set to 'Disabled' (MS only) (Scored)
                        $Tag239 = '18.8.43.1.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc239 = 'Ensure Enable Windows NTP Server is set to Disabled (MS only) (Scored)'
                        $Lvl239 = 'L2'
		                $NTPSrvEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\W32Time\TimeProviders\NtpServer' -Name Enabled -ErrorAction 'silentlycontinue'
                        if (!$NTPSrvEnb){
                            $Res239 = '2'}
                        Else{
                        $PolRes239 = $NTPSrvEnb | Select-Object -ExpandProperty Enabled
                        if ($PolRes239-eq '0'){
                            $Res239 = '1'} else {$Res239 = '2'}
                            }
		                $Str239 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag239 + ';' + $Desc239 + ';' + $Res239 + ';' + $Using:CurntDateForm)
		                $Str239
                        }
                        
                        #========================================================================================================================================================
                        #18.8.44 Troubleshooting and Diagnostics
                        #   This section contains recommendations related to Troubleshooting and Diagnostics.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.1 Application Compatibility Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template pca.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.2 Corrupted File Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FileRecovery.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.3 Disk Diagnostic
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DiskDiagnostic.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.4 Fault Tolerant Heap
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template fthsvc.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.44.5 Microsoft Support Diagnostic Tool
                        #   This section contains recommendations related to the Microsoft Support Diagnostic Tool.
                        #   This Group Policy section is provided by the Group Policy template MSDT.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.44.5.1 (L2) Ensure 'Microsoft Support Diagnostic Tool: Turn on MSDT interactive communication with support provider' is set to 'Disabled' (Scored) W2K16
                        $Tag492 = '18.8.44.5.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc492 = 'Ensure Microsoft Support Diagnostic Tool: Turn on MSDT interactive communication with support provider is set to Disabled (Scored)'
                        $Lvl492 = 'L2'
		                $DsbqryRemSrv = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\ScriptedDiagnosticsProvider\Policy' -Name DisableQueryRemoteServer -ErrorAction 'silentlycontinue'
                        if (!$DsbqryRemSrv){
                            $Res492 = '2'}
                        Else{
                        $PolRes492 = $DsbqryRemSrv | Select-Object -ExpandProperty DisableQueryRemoteServer
                        if ($PolRes492-eq '0'){
                            $Res492 = '1'} else {$Res492 = '2'}
                            }
		                $Str492 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag492 + ';' + $Desc492 + ';' + $Res492 + ';' + $Using:CurntDateForm)
		                $Str492
						}
                        
                        #========================================================================================================================================================
                        #18.8.44.6 MSI Corrupted File Recovery
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Msi-FileRecovery.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.44.7 Scheduled Maintenance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template sdiagschd.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.44.8 Scripted Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template sdiageng.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.8.44.9 Windows Boot Performance Diagnostics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PerformanceDiagnostics.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.10 Windows Memory Leak Diagnosis
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template LeakDiagnostic.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.44.11 Windows Performance PerfTrack
                        #   This section contains recommendations related to Windows Performance PerfTrack.
                        #   This Group Policy section is provided by the Group Policy template PerformancePerftrack.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.8.44.11.1 (L2) Ensure 'Enable/Disable PerfTrack' is set to 'Disabled' (Scored) W2K16
                        $Tag493 = '18.8.44.11.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc493 = 'Ensure Enable/Disable PerfTrack is set to Disabled (Scored)'
                        $Lvl493 = 'L2'
		                $ScnExecEnb = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WDI\{9c5a40da-b965-4fc3-8781-88dd50a6299d}' -Name ScenarioExecutionEnabled -ErrorAction 'silentlycontinue'
                        if (!$ScnExecEnb){
                            $Res493 = '2'}
                        Else{
                        $PolRes493 = $ScnExecEnb | Select-Object -ExpandProperty ScenarioExecutionEnabled
                        if ($PolRes493-eq '0'){
                            $Res493 = '1'} else {$Res493 = '2'}
                            }
		                $Str493 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag493 + ';' + $Desc493 + ';' + $Res493 + ';' + $Using:CurntDateForm)
		                $Str493
						}
                        
                        #========================================================================================================================================================
                        #18.8.45 Trusted Platform Module Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TPM.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.46 User Profiles
                        #   This section contains recommendations related to User Profiles.
                        #   This Group Policy section is provided by the Group Policy template UserProfiles.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.46.1 (L2) Ensure 'Turn off the advertising ID' is set to 'Enabled' (Scored) W2K16
                        $Tag494 = '18.8.46.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc494 = 'Ensure Turn off the advertising ID is set to Enabled (Scored)'
                        $Lvl494 = 'L2'
		                $ScnExecEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\policies\Microsoft\Windows\AdvertisingInfo' -Name DisabledByGroupPolicy -ErrorAction 'silentlycontinue'
                        if (!$ScnExecEnb){
                            $Res494 = '2'}
                        Else{
                        $PolRes494 = $ScnExecEnb | Select-Object -ExpandProperty DisabledByGroupPolicy
                        if ($PolRes494-eq '1'){
                            $Res494 = '1'} else {$Res494 = '2'}
                            }
		                $Str494 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag494 + ';' + $Desc494 + ';' + $Res494 + ';' + $Using:CurntDateForm)
		                $Str494
						}
                        
                        #========================================================================================================================================================
                        #18.8.47 Windows File Protection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsFileProtection.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.48 Windows HotStart
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template HotStart.admx/adml that is only included with the Microsoft Windows Vista
                        #   through the Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.49 Windows Time Service
                        #   This section contains recommendations related to the Windows Time Service.
                        #   This Group Policy section is provided by the Group Policy template W32Time.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.8.49.1 Time Providers
                        #   This section contains recommendations related to Time Providers.
                        #   This Group Policy section is provided by the Group Policy template W32Time.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.8.49.1.1 (L2) Ensure 'Enable Windows NTP Client' is set to 'Enabled' (Scored) W2K16
                        $Tag495 = '18.8.49.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc495 = 'Ensure Enable Windows NTP Client is set to Enabled (Scored)'
                        $Lvl495 = 'L2'
		                $NTPCltEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\W32Time\TimeProviders\NtpClient' -Name Enabled -ErrorAction 'silentlycontinue'
                        if (!$NTPCltEnb){
                            $Res495 = '2'}
                        Else{
                        $PolRes495 = $NTPCltEnb | Select-Object -ExpandProperty Enabled
                        if ($PolRes495-eq '1'){
                            $Res495 = '1'} else {$Res495 = '2'}
                            }
		                $Str495 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag495 + ';' + $Desc495 + ';' + $Res495 + ';' + $Using:CurntDateForm)
		                $Str495
						}

                        #18.8.49.1.2 (L2) Ensure 'Enable Windows NTP Server' is set to 'Disabled' (MS only) (Scored) W2K16
                        $Tag496 = '18.8.49.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc496 = 'Ensure Enable Windows NTP Server is set to Disabled (MS only) (Scored)'
                        $Lvl496 = 'L2'
		                $NTPSrvEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\W32Time\TimeProviders\NtpServer' -Name Enabled -ErrorAction 'silentlycontinue'
                        if (!$NTPSrvEnb){
                            $Res496 = '2'}
                        Else{
                        $PolRes496 = $NTPSrvEnb | Select-Object -ExpandProperty Enabled
                        if ($PolRes496-eq '0'){
                            $Res496 = '1'} else {$Res496 = '2'}
                            }
		                $Str496 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag496 + ';' + $Desc496 + ';' + $Res496 + ';' + $Using:CurntDateForm)
		                $Str496
						}

                        #========================================================================================================================================================
                        #18.9 Windows Components
                        #   This section contains recommendations for Windows Component settings.
                        #========================================================================================================================================================
                        #18.9 Windows Components
                        #   This section contains recommendations for Windows Component settings.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.1 Active Directory Federation Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "adfs.admx/adml" that is included with the Microsoft 
                        #   Windows Vista, 2008, 7/2008R2 & 8/2012 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.1 Active Directory Federation Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template adfs.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.2 ActiveX Installer Service
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.2 ActiveX Installer Service
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ActiveXInstallService.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.3 Add features to Windows 8 / 8.1 / 10
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WindowsAnytimeUpgrade.admx/adml" that is included 
                        #   with the Microsoft Windows 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.3 Add features to Windows 8 / 8.1 / 10 (formerly Windows Anytime Upgrade)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsAnytimeUpgrade.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #   Note: This section was initially named Windows Anytime Upgrade but was renamed by Microsoft to Add features to Windows x starting with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.4 App Package Deployment
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.4 App Package Deployment
                        #   This section contains recommendations for App Package Deployment settings.
                        #   This Group Policy section is provided by the Group Policy template AppxPackageManager.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.4.1 (L2) Ensure 'Allow a Windows app to share application data between users' is set to 'Disabled' (Scored) W2K16
                        $Tag497 = '18.9.4.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc497 = 'Ensure Allow a Windows app to share application data between users is set to Disabled (Scored)'
                        $Lvl497 = 'L2'
		                $NTPSrvEnb = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppModel\StateManager' -Name AllowSharedLocalAppData -ErrorAction 'silentlycontinue'
                        if (!$NTPSrvEnb){
                            $Res497 = '2'}
                        Else{
                        $PolRes497 = $NTPSrvEnb | Select-Object -ExpandProperty AllowSharedLocalAppData
                        if ($PolRes497-eq '0'){
                            $Res497 = '1'} else {$Res497 = '2'}
                            }
		                $Str497 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag497 + ';' + $Desc497 + ';' + $Res497 + ';' + $Using:CurntDateForm)
		                $Str497
						}

                        #========================================================================================================================================================
                        #18.9.5 App Privacy
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.5 App Privacy
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template AppPrivacy.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1511 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.6 App runtime
                        #   This section contains recommendations for App runtime settings.
                        #========================================================================================================================================================
                        
                        #18.9.6.1 (L1) Ensure 'Allow Microsoft accounts to be optional' is set to 'Enabled' (Scored)
                        $Tag240 = '18.9.6.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc240 = 'Ensure Allow Microsoft accounts to be optional is set to Enabled (Scored)'
                        $Lvl240 = 'L2'
		                $MSAOptional = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name MSAOptional -ErrorAction 'silentlycontinue'
                        if (!$MSAOptional){
                            $Res240 = '2'}
                        Else{
                        $PolRes240 = $MSAOptional | Select-Object -ExpandProperty MSAOptional
                        if ($PolRes240-eq '1'){
                            $Res240 = '1'} else {$Res240 = '2'}
                            }
		                $Str240 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag240 + ';' + $Desc240 + ';' + $Res240 + ';' + $Using:CurntDateForm)
		                $Str240
                        }
                        
                        #========================================================================================================================================================
                        #18.9.6 App runtime
                        #   This section contains recommendations for App runtime settings.
                        #   This Group Policy section is provided by the Group Policy template AppXRuntime.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        
                        #18.9.6.1 (L1) Ensure 'Allow Microsoft accounts to be optional' is set to 'Enabled' (Scored) W2K16
                        $Tag498 = '18.9.6.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc498 = 'Ensure Allow Microsoft accounts to be optional is set to Enabled (Scored)'
                        $Lvl498 = 'L2'
		                $MSAOptional = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name MSAOptional -ErrorAction 'silentlycontinue'
                        if (!$MSAOptional){
                            $Res498 = '2'}
                        Else{
                        $PolRes498 = $MSAOptional | Select-Object -ExpandProperty MSAOptional
                        if ($PolRes498-eq '1'){
                            $Res498 = '1'} else {$Res498 = '2'}
                            }
		                $Str498 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag498 + ';' + $Desc498 + ';' + $Res498 + ';' + $Using:CurntDateForm)
		                $Str498
						}
                        
                        #========================================================================================================================================================
                        #18.9.7 Application Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template AppCompat.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.8 AutoPlay Policies
                        #   This section contains recommendations for AutoPlay policies.
                        #   This Group Policy section is provided by the Group Policy template AutoPlay.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #========================================================================================================================================================
                        #18.9.7 Application Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.8 AutoPlay Policies
                        #   This section contains recommendations for AutoPlay policies.
                        #========================================================================================================================================================
                        
                        #18.9.8.1 (L1) Ensure 'Disallow Autoplay for non-volume devices' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag241 = '18.9.8.1'
                        $Count18++
		                $Desc241 = 'Ensure Disallow Autoplay for non-volume devices is set to Enabled (Scored)'
                        $Lvl241 = 'L1'
		                $NoAuPlaynonVol = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Explorer' -Name NoAutoplayfornonVolume -ErrorAction 'silentlycontinue'
                        if (!$NoAuPlaynonVol){
                            $Res241 = '2'}
                        Else{
                        $PolRes241 = $NoAuPlaynonVol | Select-Object -ExpandProperty NoAutoplayfornonVolume
                        if ($PolRes241-eq '1'){
                            $Res241 = '1'} else {$Res241 = '2'}
                            }
		                $Str241 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag241 + ';' + $Desc241 + ';' + $Res241 + ';' + $Using:CurntDateForm)
		                $Str241

                        #18.9.8.2 (L1) Ensure 'Set the default behavior for AutoRun' is set to 'Enabled: Do not execute any autorun commands' (Scored) W2K12 W2K16
                        $Tag242 = '18.9.8.2'
                        $Count18++
		                $Desc242 = 'Ensure Set the default behavior for AutoRun is set to Enabled: Do not execute any autorun commands (Scored)'
                        $Lvl242 = 'L1'
		                $NoAutoruncmd = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoAutorun -ErrorAction 'silentlycontinue'
                        if (!$NoAutoruncmd){
                            $Res242 = '2'}
                        Else{
                        $PolRes242 = $NoAutoruncmd | Select-Object -ExpandProperty NoAutorun
                        if ($PolRes242-eq '1'){
                            $Res242 = '1'} else {$Res242 = '2'}
                            }
		                $Str242 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag242 + ';' + $Desc242 + ';' + $Res242 + ';' + $Using:CurntDateForm)
		                $Str242

                        #18.9.8.3 (L1) Ensure 'Turn off Autoplay' is set to 'Enabled: All drives' (Scored) W2K12 W2K16
                        $Tag243 = '18.9.8.3'
                        $Count18++
		                $Desc243 = 'Ensure Turn off Autoplay is set to Enabled: All drives (Scored)'
                        $Lvl243 = 'L1'
		                $NoDrvAutoRun = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name NoDriveTypeAutoRun -ErrorAction 'silentlycontinue'
                        if (!$NoDrvAutoRun){
                            $Res243 = '2'}
                        Else{
                        $PolRes243 = $NoDrvAutoRun | Select-Object -ExpandProperty NoDriveTypeAutoRun
                        if ($PolRes243-eq '255'){
                            $Res243 = '1'} else {$Res243 = '2'}
                            }
		                $Str243 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag243 + ';' + $Desc243 + ';' + $Res243 + ';' + $Using:CurntDateForm)
		                $Str243
                        
                        #========================================================================================================================================================
                        #18.9.9 Backup
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WindowsBackup.admx/adml" that is included with the
                        #   Microsoft Windows Vista, 2008, 7/2008R2, 8/2012 and 8.1/2012R2 Administrative Templates, or the Group Policy template "UserDataBackup.admx/adml" 
                        #   included with the Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.10 Biometrics
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.10.1 Facial Features
                        #   This section contains recommendations related to Facial Feature Biometrics.
                        #   This Group Policy section is provided by the Group Policy template Biometrics.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1511 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.10.1.1 (L1) Ensure 'Configure enhanced anti-spoofing' is set to 'Enabled' (Scored) W2K16
                        $Tag499 = '18.9.10.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc499 = 'Ensure Configure enhanced anti-spoofing is set to Enabled (Scored)'
                        $Lvl499 = 'L1'
		                $NoAuPlaynonVol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Biometrics\FacialFeatures' -Name EnhancedAntiSpoofing -ErrorAction 'silentlycontinue'
                        if (!$NoAuPlaynonVol){
                            $Res499 = '2'}
                        Else{
                        $PolRes499 = $NoAuPlaynonVol | Select-Object -ExpandProperty EnhancedAntiSpoofing
                        if ($PolRes499-eq '1'){
                            $Res499 = '1'} else {$Res499 = '2'}
                            }
		                $Str499 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag499 + ';' + $Desc499 + ';' + $Res499 + ';' + $Using:CurntDateForm)
		                $Str499
						}

                        #========================================================================================================================================================
                        #18.9.11 BitLocker Drive Encryption
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.12 Cloud Content
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.12 Camera
                        #   This section contains recommendations related to Camera.
                        #   This Group Policy section is provided by the Group Policy template Camera.admx/adml that is included with the Microsoft Windows 10 Release 1607 &
                        #   Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.12.1 (L2) Ensure 'Allow Use of Camera' is set to 'Disabled' (Scored) W2K16
                        $Tag500 = '18.9.12.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc500 = 'Ensure Allow Use of Camera is set to Disabled (Scored)'
                        $Lvl500 = 'L2'
		                $NoAuPlaynonVol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Camera' -Name AllowCamera -ErrorAction 'silentlycontinue'
                        if (!$NoAuPlaynonVol){
                            $Res500 = '2'}
                        Else{
                        $PolRes500 = $NoAuPlaynonVol | Select-Object -ExpandProperty AllowCamera
                        if ($PolRes500 -eq '0'){
                            $Res500 = '1'} else {$Res500 = '2'}
                            }
		                $Str500 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag500 + ';' + $Desc500 + ';' + $Res500 + ';' + $Using:CurntDateForm)
		                $Str500
						}
                        
                        #========================================================================================================================================================
                        #18.9.13 Cloud Content
                        #   This section contains recommendations related to Cloud Content.
                        #   This Group Policy section is provided by the Group Policy template CloudContent.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1511 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.13.1 (L1) Ensure 'Turn off Microsoft consumer experiences' is set to 'Enabled' (Scored) W2K16
                        $Tag501 = '18.9.13.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc501 = 'Ensure Turn off Microsoft consumer experiences is set to Enabled (Scored)'
                        $Lvl501 = 'L2'
		                $NoAuPlaynonVol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\CloudContent' -Name DisableWindowsConsumerFeatures -ErrorAction 'silentlycontinue'
                        if (!$NoAuPlaynonVol){
                            $Res501 = '2'}
                        Else{
                        $PolRes501 = $NoAuPlaynonVol | Select-Object -ExpandProperty DisableWindowsConsumerFeatures
                        if ($PolRes501-eq '1'){
                            $Res501 = '1'} else {$Res501 = '2'}
                            }
		                $Str501 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag501 + ';' + $Desc501 + ';' + $Res501 + ';' + $Using:CurntDateForm)
		                $Str501
						}

                        #========================================================================================================================================================
                        #18.9.13 Credential User Interface
                        #   This section contains recommendations related to the Credential User Interface.
                        #========================================================================================================================================================
                        
                        #18.9.13.1 (L1) Ensure 'Do not display the password reveal button' is set to 'Enabled' (Scored)
                        $Tag244 = '18.9.13.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc244 = 'Ensure Turn off Autoplay is set to Enabled: All drives (Scored)'
                        $Lvl244 = 'L1'
		                $DsbPassRevl = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\CredUI' -Name DisablePasswordReveal -ErrorAction 'silentlycontinue'
                        if (!$DsbPassRevl){
                            $Res244 = '2'}
                        Else{
                        $PolRes244 = $DsbPassRevl | Select-Object -ExpandProperty DisablePasswordReveal
                        if ($PolRes244-eq '1'){
                            $Res244 = '1'} else {$Res244 = '2'}
                            }
		                $Str244 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag244 + ';' + $Desc244 + ';' + $Res244 + ';' + $Using:CurntDateForm)
		                $Str244
                        }

                        #18.9.13.2 (L1) Ensure 'Enumerate administrator accounts on elevation' is set to 'Disabled' (Scored)
                        $Tag245 = '18.9.13.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc245 = 'Ensure Enumerate administrator accounts on elevation is set to Disabled (Scored)'
                        $Lvl245 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\CredUI' -Name EnumerateAdministrators -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res245 = '2'}
                        Else{
                        $PolRes245 = $EnumAdmins | Select-Object -ExpandProperty EnumerateAdministrators
                        if ($PolRes245-eq '0'){
                            $Res245 = '1'} else {$Res245 = '2'}
                            }
		                $Str245 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag245 + ';' + $Desc245 + ';' + $Res245 + ';' + $Using:CurntDateForm)
		                $Str245
                        }
                        
                        #========================================================================================================================================================
                        #18.9.14 Data Collection and Preview Builds
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.14 Connect
                        #   This section contains recommendations related to Connect.
                        #   This Group Policy section is provided by the Group Policy template WirelessDisplay.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.14.1 (L1) Ensure 'Require pin for pairing' is set to 'Enabled' (Scored) W2K16
                        $Tag502 = '18.9.14.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc502 = 'Ensure Require pin for pairing is set to Enabled (Scored)'
                        $Lvl502 = 'L2'
		                $NoAuPlaynonVol = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Connect' -Name RequirePinForPairing -ErrorAction 'silentlycontinue'
                        if (!$NoAuPlaynonVol){
                            $Res502 = '2'}
                        Else{
                        $PolRes502 = $NoAuPlaynonVol | Select-Object -ExpandProperty RequirePinForPairing
                        if ($PolRes502-eq '1'){
                            $Res502 = '1'} else {$Res502 = '2'}
                            }
		                $Str502 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag502 + ';' + $Desc502 + ';' + $Res502 + ';' + $Using:CurntDateForm)
		                $Str502
						}

                        #========================================================================================================================================================
                        #18.9.15 Delivery Optimization
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "DeliveryOptimization.admx/adml" that is included 
                        #   with the Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.15 Credential User Interface
                        #   This section contains recommendations related to the Credential User Interface.
                        #   This Group Policy section is provided by the Group Policy template CredUI.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.15.1 (L1) Ensure 'Do not display the password reveal button' is set to 'Enabled' (Scored) W2K16
                        $Tag503 = '18.9.15.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc503 = 'Ensure Do not display the password reveal button is set to Enabled (Scored)'
                        $Lvl503 = 'L1'
		                $DsbPassRevl = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\CredUI' -Name DisablePasswordReveal -ErrorAction 'silentlycontinue'
                        if (!$DsbPassRevl){
                            $Res503 = '2'}
                        Else{
                        $PolRes503 = $DsbPassRevl | Select-Object -ExpandProperty DisablePasswordReveal
                        if ($PolRes503-eq '1'){
                            $Res503 = '1'} else {$Res503 = '2'}
                            }
		                $Str503 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag503 + ';' + $Desc503 + ';' + $Res503 + ';' + $Using:CurntDateForm)
		                $Str503
						}

                        #18.9.15.2 (L1) Ensure 'Enumerate administrator accounts on elevation' is set to 'Disabled' (Scored) W2K16
                        $Tag504 = '18.9.15.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc504 = 'Ensure Enumerate administrator accounts on elevation is set to Disabled (Scored)'
                        $Lvl504 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\CredUI' -Name EnumerateAdministrators -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res504 = '2'}
                        Else{
                        $PolRes504 = $EnumAdmins | Select-Object -ExpandProperty EnumerateAdministrators
                        if ($PolRes504-eq '0') {
                            $Res504 = '1'} else {$Res504 = '2'}
                            }
		                $Str504 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag504 + ';' + $Desc504 + ';' + $Res504 + ';' + $Using:CurntDateForm)
		                $Str504
						}
                        
                        #========================================================================================================================================================
                        #18.9.16 Data Collection and Preview Builds
                        #   This section contains settings for Data Collection and Preview Builds.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.16.1 (L1) Ensure 'Allow Telemetry' is set to 'Enabled: 0 - Security [Enterprise Only]' or 'Enabled: 1 - Basic' (Scored) W2K16
                        $Tag505 = '18.9.16.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc505 = 'Ensure Allow Telemetry is set to Enabled: 0 - Security [Enterprise Only] or Enabled: 1 - Basic (Scored)'
                        $Lvl505 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DataCollection' -Name AllowTelemetry -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res505 = '2'}
                        Else{
                        $PolRes505 = $EnumAdmins | Select-Object -ExpandProperty AllowTelemetry
                        if (($PolRes505 -eq '0') -or ($PolRes505 -eq '1')){
                            $Res505 = '1'} else {$Res505 = '2'}
                            }
		                $Str505 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag505 + ';' + $Desc505 + ';' + $Res505 + ';' + $Using:CurntDateForm)
		                $Str505
						}

                        #18.9.16.2 (L2) Ensure 'Configure Authenticated Proxy usage for the Connected User Experience and Telemetry service' is set to 'Enabled: Disable Authenticated Proxy usage' (Scored) W2K16
                        $Tag506 = '18.9.16.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc506 = 'Ensure Configure Authenticated Proxy usage for the Connected User Experience and Telemetry service is set to Enabled: Disable Authenticated Proxy usage (Scored)'
                        $Lvl506 = 'L2'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DataCollection' -Name DisableEnterpriseAuthProxy -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res506 = '2'}
                        Else{
                        $PolRes506 = $EnumAdmins | Select-Object -ExpandProperty DisableEnterpriseAuthProxy
                        if ($PolRes506 -eq '1'){
                            $Res506 = '1'} else {$Res506 = '2'}
                            }
		                $Str506 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag506 + ';' + $Desc506 + ';' + $Res506 + ';' + $Using:CurntDateForm)
		                $Str506
						}

                        #18.9.16.3 (L1) Ensure 'Disable pre-release features or settings' is set to 'Disabled' (Scored) W2K16
                        $Tag507 = '18.9.16.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc507 = 'Ensure Disable pre-release features or settings is set to Disabled (Scored)'
                        $Lvl507 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PreviewBuilds' -Name EnableConfigFlighting -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res507 = '2'}
                        Else{
                        $PolRes507 = $EnumAdmins | Select-Object -ExpandProperty EnableConfigFlighting
                        if ($PolRes507 -eq '0'){
                            $Res507 = '1'} else {$Res507 = '2'}
                            }
		                $Str507 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag507 + ';' + $Desc507 + ';' + $Res507 + ';' + $Using:CurntDateForm)
		                $Str507
						}

                        #18.9.16.4 (L1) Ensure 'Do not show feedback notifications' is set to 'Enabled' (Scored) W2K16
                        $Tag508 = '18.9.16.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc508 = 'Ensure Do not show feedback notifications is set to Enabled (Scored)'
                        $Lvl508 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\DataCollection' -Name DoNotShowFeedbackNotifications -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res508 = '2'}
                        Else{
                        $PolRes508 = $EnumAdmins | Select-Object -ExpandProperty DoNotShowFeedbackNotifications
                        if ($PolRes508 -eq '1'){
                            $Res508 = '1'} else {$Res508 = '2'}
                            }
		                $Str508 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag508 + ';' + $Desc508 + ';' + $Res508 + ';' + $Using:CurntDateForm)
		                $Str508
						}

                        #18.9.16.5 (L1) Ensure 'Toggle user control over Insider builds' is set to 'Disabled' (Scored) W2K16
                        $Tag509 = '18.9.16.5'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc509 = 'Ensure Toggle user control over Insider builds is set to Disabled (Scored)'
                        $Lvl509 = 'L1'
		                $EnumAdmins = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PreviewBuilds' -Name AllowBuildPreview -ErrorAction 'silentlycontinue'
                        if (!$EnumAdmins){
                            $Res509 = '2'}
                        Else{
                        $PolRes509 = $EnumAdmins | Select-Object -ExpandProperty AllowBuildPreview
                        if ($PolRes509 -eq '0'){
                            $Res509 = '1'} else {$Res509 = '2'}
                            }
		                $Str509 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag509 + ';' + $Desc509 + ';' + $Res509 + ';' + $Using:CurntDateForm)
		                $Str509
						}

                        #========================================================================================================================================================
                        #18.9.16 Desktop Gadgets
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.17 Desktop Window Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.17 Delivery Optimization 
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeliveryOptimization.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.18 Device and Driver Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.18 Desktop Gadgets
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Sidebar.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.19 Device Registration (formerly Workplace Join)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WorkplaceJoin.admx/adml" that is included with the
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.19 Desktop Window Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DWM.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.20 Digital Locker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.20 Device and Driver Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeviceCompat.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.21 Edge UI
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.21 Device Registration (formerly Workplace Join)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WorkplaceJoin.admx/adml that is included with the Microsoft Windows 8.1 &
                        #   Server 2012 R2 Administrative Templates (or newer).
                        #   Note: This section was initially named Workplace Join but was renamed by Microsoft to Device Registration starting with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.22 Digital Locker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DigitalLocker.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.22 EMET
                        #   This section contains recommendations for configuring Microsoft Enhanced Mitigation Experience Toolkit (EMET).
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "EMET.admx/adml" that is included with Microsoft 
                        #   EMET.
                        #========================================================================================================================================================
                        
                        #18.9.22.1 (L1) Ensure 'EMET 5.5' or higher is installed (Scored)
                        $Tag246 = '18.9.22.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc246 = 'Ensure EMET 5.5 or higher is installed (Scored)'
                        $Lvl246 = 'L1'
		                $EMETVer = Get-WmiObject Win32_Product | Where-Object Name -like 'EMET*' | Select-Object -ExpandProperty 'Version'
                        if (!$EMETVer) {$Res246 = '2'} 
                        Else {
                            $PolRes246 = $EMETVer -as [int]
                            if ($PolRes246 -ge '5.5') 
			                {$Res246 = '1'} else {$Res246 = '2'}
                            }
		                $Str246 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag246 + ';' + $Desc246 + ';' + $Res246 + ';' + $Using:CurntDateForm)
		                $Str246
                        }

                        #18.9.22.2 (L1) Ensure 'Default Action and Mitigation Settings' is set to 'Enabled' (plus subsettings) (Scored)
                        $Tag247 = '18.9.22.2'
                        if ($OSVersion -eq 'W2K12R2') {
		                $Count18++
		                $Desc247 = 'Ensure Default Action and Mitigation Settings is set to Enabled (plus subsettings) (Scored)'
                        $Lvl247 = 'L1'
                        if (!$EMETVer) {$Res247 = '1'} 
                        Else {
                            $EMETKey1 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name AntiDetours -ErrorAction 'silentlycontinue'
                            $EMETKey2 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name BannedFunctions -ErrorAction 'silentlycontinue'
                            $EMETKey3 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name DeepHooks -ErrorAction 'silentlycontinue'
                            $EMETKey4 = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name ExploitAction -ErrorAction 'silentlycontinue'
            
                            if ((!$EMETKey1) -or (!$EMETKey2) -or (!$EMETKey3) -or (!$EMETKey4)) {
                                $Res247 = '1'}
                            Else{
                            $PolRes247a = $EMETKey1 | Select-Object -ExpandProperty AntiDetours
                            $PolRes247b = $EMETKey2 | Select-Object -ExpandProperty BannedFunctions
                            $PolRes247c = $EMETKey3 | Select-Object -ExpandProperty DeepHooks
                            $PolRes247d = $EMETKey4 | Select-Object -ExpandProperty ExploitAction
                    
                            if (($PolRes247a -eq '1') -and ($PolRes247b -eq '1') -and ($PolRes247c -eq '1') -and ($PolRes247d -eq '2'))
				                {$Res247 = '1'} else {$Res247 = '2'}
                                }
                            }
		                $Str247 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag247 + ';' + $Desc247 + ';' + $Res247 + ';' + $Using:CurntDateForm)
		                $Str247
                        }

                        #18.9.22.3 (L1) Ensure 'Default Protections for Internet Explorer' is set to 'Enabled' (Scored)
                        $Tag248= '18.9.22.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc248 = 'Ensure Default Protections for Internet Explorer is set to Enabled (Scored)'
                        $Lvl248 = 'L1'
		                $IExplorer = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\Defaults' -Name IE -ErrorAction 'silentlycontinue'
                        if (!$IExplorer){
                            $Res248 = '2'}
                        Else{
                        $PolRes248 = $IExplorer | Select-Object -ExpandProperty IE
                        if ($PolRes248-eq '1'){
                            $Res248 = '1'} else {$Res248 = '2'}
                            }
		                $Str248 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag248 + ';' + $Desc248 + ';' + $Res248 + ';' + $Using:CurntDateForm)
		                $Str248
                        }

                        #18.9.22.4 (L1) Ensure 'Default Protections for Popular Software' is set to 'Enabled' (Scored)
                        $Tag249= '18.9.22.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc249 = 'Ensure Default Protections for Popular Software is set to Enabled (Scored)'
                        $Lvl249 = 'L1'
		                $DefProtctPop = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET' -Name Defaults -ErrorAction 'silentlycontinue'
                        if (!$DefProtctPop){
                            $Res249 = '2'}
                        Else{
                        $PolRes249 = $DefProtctPop | Select-Object -ExpandProperty Defaults
                        if ($PolRes249-eq '1'){
                            $Res249 = '1'} else {$Res249 = '2'}
                            }
		                $Str249 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag249 + ';' + $Desc249 + ';' + $Res249 + ';' + $Using:CurntDateForm)
		                $Str249
                        }

                        #18.9.22.5 (L1) Ensure 'Default Protections for Recommended Software' is set to 'Enabled' (Scored)
                        $Tag250= '18.9.22.5'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc250 = 'Ensure Default Protections for Recommended Software is set to Enabled (Scored)'
                        $Lvl250 = 'L1'
		                $DefProtct = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET' -Name Defaults -ErrorAction 'silentlycontinue'
                        if (!$DefProtct){
                            $Res250 = '2'}
                        Else{
                        $PolRes250 = $DefProtct | Select-Object -ExpandProperty Defaults
                        if ($PolRes250-eq '1'){
                            $Res250 = '1'} else {$Res250 = '2'}
                            }
		                $Str250 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag250 + ';' + $Desc250 + ';' + $Res250 + ';' + $Using:CurntDateForm)
		                $Str250
                        }

                        #18.9.22.6 (L1) Ensure 'System ASLR' is set to 'Enabled: Application Opt-In' (Scored)
                        $Tag251= '18.9.22.6'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc251 = 'Ensure Default Protections for Recommended Software is set to Enabled (Scored)'
                        $Lvl251 = 'L1'
		                $ASLR = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name ASLR -ErrorAction 'silentlycontinue'
                        if (!$ASLR){
                            $Res251 = '2'}
                        Else{
                        $PolRes251 = $ASLR | Select-Object -ExpandProperty ASLR
                        if ($PolRes251-eq '1'){
                            $Res251 = '1'} else {$Res251 = '2'}
                            }
		                $Str251 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag251 + ';' + $Desc251 + ';' + $Res251 + ';' + $Using:CurntDateForm)
		                $Str251
                        }

                        #18.9.22.7 (L1) Ensure 'System DEP' is set to 'Enabled: Application Opt-Out' (Scored)
                        $Tag252 = '18.9.22.7'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc252 = 'Ensure System DEP is set to Enabled: Application Opt-Out (Scored)'
                        $Lvl252 = 'L1'
		                $DEP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name DEP -ErrorAction 'silentlycontinue'
                        if (!$DEP){
                            $Res252 = '2'}
                        Else{
                        $PolRes252 = $DEP | Select-Object -ExpandProperty DEP
                        if ($PolRes252-eq '1'){
                            $Res252 = '1'} else {$Res252 = '2'}
                            }
		                $Str252 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag252 + ';' + $Desc252 + ';' + $Res252 + ';' + $Using:CurntDateForm)
		                $Str252
                        }

                        #18.9.22.8 (L1) Ensure 'System SEHOP' is set to 'Enabled: Application Opt-Out' (Scored)
                        $Tag253 = '18.9.22.8'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc253 = 'Ensure System SEHOP is set to Enabled: Application Opt-Out (Scored)'
                        $Lvl253 = 'L1'
		                $SEHOP = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\EMET\SysSettings' -Name SEHOP -ErrorAction 'silentlycontinue'
                        if (!$SEHOP){
                            $Res253 = '2'}
                        Else{
                        $PolRes253 = $SEHOP | Select-Object -ExpandProperty SEHOP
                        if ($PolRes253-eq '1'){
                            $Res253 = '1'} else {$Res253 = '2'}
                            }
		                $Str253 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag253 + ';' + $Desc253 + ';' + $Res253 + ';' + $Using:CurntDateForm)
		                $Str253
                        }
                        
                        #========================================================================================================================================================
                        #18.9.23 Event Forwarding
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.23 Edge UI
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EdgeUI.admx/adml that is included with the Microsoft Windows 8.1 &
                        #   Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.24 Event Log Service
                        #   This section contains recommendations for configuring the Event Log Service.
                        #========================================================================================================================================================
                        #18.9.24 EMET
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EMET.admx/adml that is included with Microsoft EMET.
                        #   EMET is free and supported security software developed by Microsoft that allows an enterprise to apply exploit mitigations to applications
                        #   that run on Windows. Many of these mitigations were later coded directly into Windows 10 and Server 2016.
                        #   Note: Although EMET is quite effective at enhancing exploit protection on Windows server OSes prior to Server 2016,
                        #   it is highly recommended that compatibility testing is done on typical server configurations (including all CIS-recommended EMET settings)
                        #   before widespread deployment to your environment.
                        #   Note #2: EMET has been reported to be very problematic on 32-bit OSes - we only recommend using it with 64-bit OSes.
                        #   Note #3: Microsoft has announced that EMET will be End-Of-Life (EOL) on July 31, 2018. This does not mean the software will stop working,
                        #   only that Microsoft will not update it any further past that date, nor troubleshoot new problems with it. They are instead recommending that
                        #   servers be upgraded to Server 2016.
                        #========================================================================================================================================================
                        #18.9.24.1 Application
                        #   This section contains recommendations for configuring the Application Event Log.
                        #========================================================================================================================================================
                        
                        #18.9.24.1.1 (L1) Ensure 'Application: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored)
                        $Tag254 = '18.9.24.1.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc254 = 'Ensure Application: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl254 = 'L1'
		                $AppRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Application' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$AppRetention){
                            $Res254 = '2'}
                        Else{
                        $PolRes254 = $AppRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes254-eq '0'){
                            $Res254 = '1'} else {$Res254 = '2'}
                            }
		                $Str254 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag254 + ';' + $Desc254 + ';' + $Res254 + ';' + $Using:CurntDateForm)
		                $Str254
                        }

                        #18.9.24.1.2 (L1) Ensure 'Application: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored)
                        $Tag255 = '18.9.24.1.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc255 = 'Ensure Application: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl255 = 'L1'
		                $AppMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Application' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$AppMaxSize){
                            $Res255 = '2'}
                        Else{
                        $AppLogMxSz = $AppMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes255 = $AppLogMxSz -as [int]
		                if ($PolRes255 -ge '32768'){
                            $Res255 = '1'} else {$Res255 = '2'}
                            }
		                $Str255 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag255 + ';' + $Desc255 + ';' + $Res255 + ';' + $Using:CurntDateForm)
		                $Str255
                        }

                        #========================================================================================================================================================
                        #18.9.24.2 Security
                        #   This section contains recommendations for configuring the Security Event Log.
                        #========================================================================================================================================================

                        #18.9.24.2.1 (L1) Ensure 'Security: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored)
                        $Tag256 = '18.9.24.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc256 = 'Ensure Security: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl256 = 'L1'
		                $SecRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Security' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$SecRetention){
                            $Res256 = '2'}
                        Else{
                        $PolRes256 = $SecRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes256-eq '0'){
                            $Res256 = '1'} else {$Res256 = '2'}
                            }
		                $Str256 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag256 + ';' + $Desc256 + ';' + $Res256 + ';' + $Using:CurntDateForm)
		                $Str256
                        }

                        #18.9.24.2.2 (L1) Ensure 'Security: Specify the maximum log file size (KB)' is set to 'Enabled: 196,608 or greater' (Scored)
                        $Tag257 = '18.9.24.2.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc257 = 'Ensure Security: Specify the maximum log file size (KB) is set to Enabled: 196608 or greater (Scored)'
                        $Lvl257 = 'L1'
		                $SecMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Security' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$SecMaxSize){
                            $Res257 = '2'}
                        Else{
                        $SecLogMxSz = $SecMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes257 = $SecLogMxSz -as [int]
		                if ($PolRes257 -ge '196608'){
                            $Res257 = '1'} else {$Res257 = '2'}
                            }
		                $Str257 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag257 + ';' + $Desc257 + ';' + $Res257 + ';' + $Using:CurntDateForm)
		                $Str257
                        }
                        
                        #========================================================================================================================================================
                        #18.9.24.3 Setup
                        #   This section contains recommendations for configuring the Setup Event Log.
                        #========================================================================================================================================================

                        #18.9.24.3.1 (L1) Ensure 'Setup: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored)
                        $Tag258 = '18.9.24.3.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc258 = 'Ensure Setup: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl258 = 'L1'
		                $StpRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Setup' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$StpRetention){
                        $Res258 = '2'}
                        Else{
                            $PolRes258 = $StpRetention | Select-Object -ExpandProperty Retention
                            if ($PolRes258 -eq '0'){
                                $Res258 = '1'} else {$Res258 = '2'}
                                }
		                $Str258 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag258 + ';' + $Desc258 + ';' + $Res258 + ';' + $Using:CurntDateForm)
		                $Str258
                        }

                        #18.9.24.3.2 (L1) Ensure 'Setup: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored)
                        $Tag259 = '18.9.24.3.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc259 = 'Ensure Setup: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl259 = 'L1'
		                $StpMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Setup' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$StpMaxSize){
                            $Res259 = '2'}
                        Else{
                        $StupLogMxSz = $StpMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes259 = $StupLogMxSz -as [int]
		                if ($PolRes259 -ge '32768'){
                            $Res259 = '1'} else {$Res259 = '2'}
			                }
		                $Str259 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag259 + ';' + $Desc259 + ';' + $Res259 + ';' + $Using:CurntDateForm)
		                $Str259
                        }
                        
                        #========================================================================================================================================================
                        #18.9.24.4 System
                        #   This section contains recommendations for configuring the System Event Log.
                        #========================================================================================================================================================

                        #18.9.24.4.1 (L1) Ensure 'System: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored)
                        $Tag260 = '18.9.24.4.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc260 = 'Ensure System: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl260 = 'L1'
		                $SysRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\System' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$SysRetention){
                            $Res260 = '2'}
                        Else{
                        $PolRes260 = $SysRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes260 -eq '0'){
                            $Res260 = '1'} else {$Res260 = '2'}
                            }
		                $Str260 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag260 + ';' + $Desc260 + ';' + $Res260 + ';' + $Using:CurntDateForm)
		                $Str260
                        }
                        
                        #18.9.24.4.2 (L1) Ensure 'System: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored)
                        $Tag261 = '18.9.24.4.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc261 = 'Ensure System: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl261 = 'L1'
		                $SysMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\System' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$SysMaxSize){
                            $Res261 = '2'}
                        Else{
                        $SysLogMxSz = $SysMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes261 = $SysLogMxSz -as [int]
		                if ($PolRes261 -ge '32768'){
                            $Res261 = '1'} else {$Res261 = '2'}
                            }
		                $Str261 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag261 + ';' + $Desc261 + ';' + $Res261 + ';' + $Using:CurntDateForm)
		                $Str261
                        }

                        #========================================================================================================================================================
                        #18.9.25 Event Logging
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "eventlogging.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.25 Event Forwarding
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EventForwarding.admx/adml that is included with the
                        #   Microsoft Windows Server 2008 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.26 Event Viewer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.26 Event Log Service
                        #   This section contains recommendations for configuring the Event Log Service.
                        #   This Group Policy section is provided by the Group Policy template EventLog.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.26.1 Application
                        #   This section contains recommendations for configuring the Application Event Log.
                        #   This Group Policy section is provided by the Group Policy template EventLog.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.26.1.1 (L1) Ensure 'Application: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored) W2K16
                        $Tag510 = '18.9.26.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc510 = 'Ensure Application: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl510 = 'L1'
		                $AppRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Application' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$AppRetention){
                            $Res510 = '2'}
                        Else{
                        $PolRes510 = $AppRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes510-eq '0'){
                            $Res510 = '1'} else {$Res510 = '2'}
                            }
		                $Str510 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag510 + ';' + $Desc510 + ';' + $Res510 + ';' + $Using:CurntDateForm)
		                $Str510
						}

                        #18.9.26.1.2 (L1) Ensure 'Application: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored) W2K16
                        $Tag511 = '18.9.26.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc511 = 'Ensure Application: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl511 = 'L1'
		                $AppMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Application' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$AppMaxSize){
                            $Res511 = '2'}
                        Else{
                        $AppLogMxSz = $AppMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes511 = $AppLogMxSz -as [int]
		                if ($PolRes511 -ge '32768'){
                            $Res511 = '1'} else {$Res511 = '2'}
                            }
		                $Str511 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag511 + ';' + $Desc511 + ';' + $Res511 + ';' + $Using:CurntDateForm)
		                $Str511
						}
                        
                        #========================================================================================================================================================
                        #18.9.26.2 Security
                        #   This section contains recommendations for configuring the Security Event Log.
                        #   This Group Policy section is provided by the Group Policy template EventLog.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.26.2.1 (L1) Ensure 'Security: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored) W2K16
                        $Tag512 = '18.9.26.2.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc512 = 'Ensure Security: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl512 = 'L1'
		                $SecRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Security' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$SecRetention){
                            $Res512 = '2'}
                        Else{
                        $PolRes512 = $SecRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes512-eq '0'){
                            $Res512 = '1'} else {$Res512 = '2'}
                            }
		                $Str512 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag512 + ';' + $Desc512 + ';' + $Res512 + ';' + $Using:CurntDateForm)
		                $Str512
						}

                        #18.9.26.2.2 (L1) Ensure 'Security: Specify the maximum log file size (KB)' is set to 'Enabled: 196,608 or greater' (Scored) W2K16
                        $Tag513 = '18.9.26.2.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc513 = 'Ensure Security: Specify the maximum log file size (KB) is set to Enabled: 196608 or greater (Scored)'
                        $Lvl513 = 'L1'
		                $SecMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Security' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$SecMaxSize){
                            $Res513 = '2'}
                        Else{
                        $SecLogMxSz = $SecMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes513 = $SecLogMxSz -as [int]
		                if ($PolRes513 -ge '196608'){
                            $Res513 = '1'} else {$Res513 = '2'}
                            }
		                $Str513 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag513 + ';' + $Desc513 + ';' + $Res513 + ';' + $Using:CurntDateForm)
		                $Str513
						}
                        
                        #========================================================================================================================================================
                        #18.9.26.3 Setup
                        #   This section contains recommendations for configuring the Setup Event Log.
                        #   This Group Policy section is provided by the Group Policy template EventLog.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.26.3.1 (L1) Ensure 'Setup: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored) W2K16
                        $Tag514 = '18.9.26.3.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc514 = 'Ensure Setup: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl514 = 'L1'
		                $StpRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Setup' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$StpRetention){
                        $Res514 = '2'}
                        Else{
                            $PolRes514 = $StpRetention | Select-Object -ExpandProperty Retention
                            if ($PolRes514 -eq '0'){
                                $Res514 = '1'} else {$Res514 = '2'}
                                }
		                $Str514 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag514 + ';' + $Desc514 + ';' + $Res514 + ';' + $Using:CurntDateForm)
		                $Str514
						}

                        #18.9.26.3.2 (L1) Ensure 'Setup: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored) W2K16
                        $Tag259 = '18.9.26.3.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc259 = 'Ensure Setup: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl259 = 'L1'
		                $StpMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\Setup' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$StpMaxSize){
                            $Res259 = '2'}
                        Else{
                        $StupLogMxSz = $StpMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes259 = $StupLogMxSz -as [int]
		                if ($PolRes259 -ge '32768'){
                            $Res259 = '1'} else {$Res259 = '2'}
			                }
		                $Str259 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag259 + ';' + $Desc259 + ';' + $Res259 + ';' + $Using:CurntDateForm)
		                $Str259
						}
                        
                        #========================================================================================================================================================
                        #18.9.26.4 System
                        #   This section contains recommendations for configuring the System Event Log.
                        #   This Group Policy section is provided by the Group Policy template EventLog.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.26.4.1 (L1) Ensure 'System: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled' (Scored)
                        $Tag515 = '18.9.26.4.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc515 = 'Ensure System: Control Event Log behavior when the log file reaches its maximum size is set to Disabled (Scored)'
                        $Lvl515 = 'L1'
		                $SysRetention = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\System' -Name Retention -ErrorAction 'silentlycontinue'
                        if (!$SysRetention){
                            $Res515 = '2'}
                        Else{
                        $PolRes515 = $SysRetention | Select-Object -ExpandProperty Retention
                        if ($PolRes515 -eq '0'){
                            $Res515 = '1'} else {$Res515 = '2'}
                            }
		                $Str515 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag515 + ';' + $Desc515 + ';' + $Res515 + ';' + $Using:CurntDateForm)
		                $Str515
						}

                        #18.9.26.4.2 (L1) Ensure 'System: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater' (Scored) W2K16
                        $Tag261 = '18.9.26.4.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc261 = 'Ensure System: Specify the maximum log file size (KB) is set to Enabled: 32768 or greater (Scored)'
                        $Lvl261 = 'L1'
		                $SysMaxSize = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\EventLog\System' -Name MaxSize -ErrorAction 'silentlycontinue'
                        if (!$SysMaxSize){
                            $Res261 = '2'}
                        Else{
                        $SysLogMxSz = $SysMaxSize | Select-Object -ExpandProperty MaxSize
                        $PolRes261 = $SysLogMxSz -as [int]
		                if ($PolRes261 -ge '32768'){
                            $Res261 = '1'} else {$Res261 = '2'}
                            }
		                $Str261 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag261 + ';' + $Desc261 + ';' + $Res261 + ';' + $Using:CurntDateForm)
		                $Str261
						}

                        #========================================================================================================================================================
                        #18.9.27 Family Safety
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.27 Event Logging
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EventLogging.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.28 File Explorer
                        #   This section contains recommendations to control the availability of options such as menu items and tabs in dialog boxes.
                        #========================================================================================================================================================
                        #18.9.28 Event Viewer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template EventViewer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.28.1 Previous Versions
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        
                        #18.9.28.2 (L1) Ensure 'Configure Windows SmartScreen' is set to 'Enabled: Require approval from an administrator before running downloaded unknown software' (Scored)
                        $Tag262 = '18.9.28.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc262 = 'Ensure Configure Windows SmartScreen is set to Enabled: Require approval from an administrator before running downloaded unknown software (Scored)'
                        $Lvl262 = 'L1'
		                $EnbSmrtScr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\System' -Name EnableSmartScreen -ErrorAction 'silentlycontinue'
                        if (!$EnbSmrtScr){
                            $Res262 = '2'}
                        Else{
                        $PolRes262 = $EnbSmrtScr | Select-Object -ExpandProperty EnableSmartScreen
                        if ($PolRes262 -eq '2'){
                            $Res262 = '1'} else {$Res262 = '2'}
                            }
		                $Str262 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag262 + ';' + $Desc262 + ';' + $Res262 + ';' + $Using:CurntDateForm)
		                $Str262
                        }

                        #18.9.28.3 (L1) Ensure 'Turn off Data Execution Prevention for Explorer' is set to 'Disabled' (Scored)
                        $Tag263 = '18.9.28.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc263 = 'Ensure Turn off Data Execution Prevention for Explorer is set to Disabled (Scored)'
                        $Lvl263 = 'L1'
		                $NoDataExcPrev = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Explorer' -Name NoDataExecutionPrevention -ErrorAction 'silentlycontinue'
                        if (!$NoDataExcPrev){
                            $Res263 = '2'}
                        Else{
                        $PolRes263 = $NoDataExcPrev | Select-Object -ExpandProperty NoDataExecutionPrevention
                        if ($PolRes263 -eq '0'){
                            $Res263 = '1'} else {$Res263 = '2'}
                            }
		                $Str263 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag263 + ';' + $Desc263 + ';' + $Res263 + ';' + $Using:CurntDateForm)
		                $Str263
                        }

                        #18.9.28.4 (L1) Ensure 'Turn off heap termination on corruption' is set to 'Disabled' (Scored)
                        $Tag264 = '18.9.28.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc264 = 'Ensure Turn off heap termination on corruption is set to Disabled (Scored)'
                        $Lvl264 = 'L1'
		                $NoHeapTermOnCrrp = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Explorer' -Name NoHeapTerminationOnCorruption -ErrorAction 'silentlycontinue'
                        if (!$NoHeapTermOnCrrp){
                            $Res264 = '2'}
                        Else{
                        $PolRes264 = $NoHeapTermOnCrrp | Select-Object -ExpandProperty NoHeapTerminationOnCorruption
                        if ($PolRes264 -eq '0'){
                            $Res264 = '1'} else {$Res264 = '2'}
                            }
		                $Str264 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag264 + ';' + $Desc264 + ';' + $Res264 + ';' + $Using:CurntDateForm)
		                $Str264
                        }
                        
                        #18.9.28.5 (L1) Ensure 'Turn off shell protocol protected mode' is set to 'Disabled' (Scored)
                        $Tag265 = '18.9.28.5'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc265 = 'Ensure Turn off heap termination on corruption is set to Disabled (Scored)'
                        $Lvl265 = 'L1'
		                $PreXPSP2Shell = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name PreXPSP2ShellProtocolBehavior -ErrorAction 'silentlycontinue'
                        if (!$PreXPSP2Shell){
                           $Res265 = '2'}
                        Else{
                        $PolRes265 = $PreXPSP2Shell | Select-Object -ExpandProperty PreXPSP2ShellProtocolBehavior
                        if ($PolRes265 -eq '0'){
                            $Res265 = '1'} else {$Res265 = '2'}
                            }
		                $Str265 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag265 + ';' + $Desc265 + ';' + $Res265 + ';' + $Using:CurntDateForm)
		                $Str265
                        }

                        #========================================================================================================================================================
                        #18.9.29 File History
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.29 Family Safety (formerly Parental Controls)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ParentalControls.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 10 RTM (Release 1507) Administrative Templates.
                        #   Note: This section was initially named Parental Controls but was renamed by Microsoft to Family Safety starting with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.30 Game Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.30 File Explorer (formerly Windows Explorer)
                        #   This section contains recommendations to control the availability of options such as menu items and tabs in dialog boxes.
                        #   This Group Policy section is provided by the Group Policy template WindowsExplorer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named Windows Explorer but was renamed by Microsoft to File Explorer starting with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.30.1 Previous Versions
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PreviousVersions.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.30.2 (L1) Ensure 'Turn off Data Execution Prevention for Explorer' is set to 'Disabled' (Scored) W2K16
                        $Tag516 = '18.9.30.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc516 = 'Ensure Turn off Data Execution Prevention for Explorer is set to Disabled (Scored)'
                        $Lvl516 = 'L1'
		                $NoDataExcPrev = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Explorer' -Name NoDataExecutionPrevention -ErrorAction 'silentlycontinue'
                        if (!$NoDataExcPrev){
                            $Res516 = '2'}
                        Else{
                        $PolRes516 = $NoDataExcPrev | Select-Object -ExpandProperty NoDataExecutionPrevention
                        if ($PolRes516 -eq '0'){
                            $Res516 = '1'} else {$Res516 = '2'}
                            }
		                $Str516 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag516 + ';' + $Desc516 + ';' + $Res516 + ';' + $Using:CurntDateForm)
		                $Str516
						}

                        #18.9.30.3 (L1) Ensure 'Turn off heap termination on corruption' is set to 'Disabled' (Scored) W2K16
                        $Tag517 = '18.9.30.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc517 = 'Ensure Turn off heap termination on corruption is set to Disabled (Scored)'
                        $Lvl517 = 'L1'
		                $NoHeapTermOnCrrp = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Explorer' -Name NoHeapTerminationOnCorruption -ErrorAction 'silentlycontinue'
                        if (!$NoHeapTermOnCrrp){
                            $Res517 = '2'}
                        Else{
                        $PolRes517 = $NoHeapTermOnCrrp | Select-Object -ExpandProperty NoHeapTerminationOnCorruption
                        if ($PolRes517 -eq '0'){
                            $Res517 = '1'} else {$Res517 = '2'}
                            }
		                $Str517 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag517 + ';' + $Desc517 + ';' + $Res517 + ';' + $Using:CurntDateForm)
		                $Str517
						}

                        #18.9.30.4 (L1) Ensure 'Turn off shell protocol protected mode' is set to 'Disabled' (Scored) W2K16
                        $Tag265 = '18.9.30.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc265 = 'Ensure Turn off shell protocol protected mode is set to Disabled (Scored)'
                        $Lvl265 = 'L1'
		                $PreXPSP2Shell = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\Explorer' -Name PreXPSP2ShellProtocolBehavior -ErrorAction 'silentlycontinue'
                        if (!$PreXPSP2Shell){
                           $Res265 = '2'}
                        Else{
                        $PolRes265 = $PreXPSP2Shell | Select-Object -ExpandProperty PreXPSP2ShellProtocolBehavior
                        if ($PolRes265 -eq '0'){
                            $Res265 = '1'} else {$Res265 = '2'}
                            }
		                $Str265 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag265 + ';' + $Desc265 + ';' + $Res265 + ';' + $Using:CurntDateForm)
		                $Str265
						}

                        #========================================================================================================================================================
                        #18.9.31 HomeGroup
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.31 File History
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FileHistory.admx/adml that is included with the Microsoft Windows 8.0 &
                        #   Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.32 Import Video
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "CaptureWizard.admx/adml" that is included with the 
                        #   Microsoft Windows Vista & 2008 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.32 Find My Device
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FindMy.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.33 Internet Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.33 Game Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template GameExplorer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.34 Internet Information Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.34 Handwriting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Handwriting.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.35 HomeGroup
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Sharing.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.35 Location and Sensors
                        #   This section contains settings for Locations and Sensors.
                        #========================================================================================================================================================
                        
                        #18.9.35.1 (L2) Ensure 'Turn off location' is set to 'Enabled' (Scored)
                        $Tag266 = '18.9.35.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc266 = 'Ensure Turn off location is set to Enabled (Scored)'
                        $Lvl266 = 'L2'
		                $TurnOffLoc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors' -Name DisableLocation -ErrorAction 'silentlycontinue'
                        if (!$TurnOffLoc){
                            $Res266 = '2'}
                        Else{
                        $PolRes266 = $TurnOffLoc | Select-Object -ExpandProperty DisableLocation
                        if ($PolRes266 -eq '1'){
                            $Res266 = '1'} else {$Res266 = '2'}
                            }
		                $Str266 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag266 + ';' + $Desc266 + ';' + $Res266 + ';' + $Using:CurntDateForm)
		                $Str266
                        }
                        
                        #========================================================================================================================================================
                        #18.9.36 Maintenance Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.36 Import Video
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template CaptureWizard.admx/adml that is only included with the
                        #   Microsoft Windows Vista and Windows Server 2008 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.37 Maps
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WinMaps.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Release 1511 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.37 Internet Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template InetRes.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.38 Microsoft Edge
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.38 Internet Information Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template IIS.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.39 Microsoft Passport for Work
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "passport.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.39 Location and Sensors
                        #   This section contains settings for Locations and Sensors.
                        #   This Group Policy section is provided by the Group Policy template Sensors.admx/adml that is included with the Microsoft Windows 7 &
                        #   Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.39.1 Windows Location Provider
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template LocationProviderAdm.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.39.2 (L2) Ensure 'Turn off location' is set to 'Enabled' (Scored) W2K16
                        $Tag476 = '18.9.39.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc476 = 'Ensure Support device authentication using certificate is set to Enabled: Automatic (Scored)'
                        $Lvl476 = 'L2'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\kerberos\parameters' -Name DevicePKInitBehavior -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\kerberos\parameters' -Name DevicePKInitEnabled -ErrorAction 'silentlycontinue'
                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res476 = '2'}
                        Else{
                        $PolRes476a = $RegistrarsKey1 | Select-Object -ExpandProperty DevicePKInitBehavior
                        $PolRes476b = $RegistrarsKey2 | Select-Object -ExpandProperty DevicePKInitEnabled       
                        if (($PolRes476a -eq '1') -and ($PolRes476b -eq '1')){
                            $Res476 = '1'} else {$Res476 = '2'}
                            }
		                $Str476 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag476 + ';' + $Desc476 + ';' + $Res476 + ';' + $Using:CurntDateForm)
                        $Str476
						}

                        #========================================================================================================================================================
                        #18.9.40 NetMeeting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.40 Maintenance Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template msched.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.41 Maps
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WinMaps.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1511 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.41 Network Access Protection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "NAPXPQec.admx/adml" that is included with the 
                        #   Microsoft Windows 2008, 7/2008R2, 8/2012 & 8.1/2012R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.42 Network Projector
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.42 MDM
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MDM.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.43 OneDrive
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.43 Messaging
                        #   This section contains messaging settings.
                        #   This Group Policy section is provided by the Group Policy template Messaging.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.43.1 (L2) Ensure 'Allow Message Service Cloud Sync' is set to 'Disabled' (Scored) W2K16
                        $Tag519 = '18.9.43.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc519 = 'Ensure Allow Message Service Cloud Sync is set to Disabled (Scored)'
                        $Lvl519 = 'L2'
		                $TurnOffLoc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Messaging' -Name AllowMessageSync -ErrorAction 'silentlycontinue'
                        if (!$TurnOffLoc){
                            $Res519 = '2'}
                        Else{
                        $PolRes519 = $TurnOffLoc | Select-Object -ExpandProperty AllowMessageSync
                        if ($PolRes519 -eq '0'){
                            $Res519 = '1'} else {$Res519 = '2'}
                            }
		                $Str519 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag519 + ';' + $Desc519 + ';' + $Res519 + ';' + $Using:CurntDateForm)
		                $Str519
						}

                        #========================================================================================================================================================
                        #18.9.44 Online Assistance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.44 Microsoft account
                        #   This section contains recommendations related to Microsoft Accounts.
                        #   This Group Policy section is provided by the Group Policy template MSAPolicy.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.44.1 (L1) Ensure 'Block all consumer Microsoft account user authentication' is set to 'Enabled' (Scored) W2K16
                        $Tag520 = '18.9.44.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc520 = 'Ensure Block all consumer Microsoft account user authentication is set to Enabled (Scored)'
                        $Lvl520 = 'L1'
		                $TurnOffLoc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\MicrosoftAccount' -Name DisableUserAuth -ErrorAction 'silentlycontinue'
                        if (!$TurnOffLoc){
                            $Res520 = '2'}
                        Else{
                        $PolRes520 = $TurnOffLoc | Select-Object -ExpandProperty DisableUserAuth
                        if ($PolRes520 -eq '1'){
                            $Res520 = '1'} else {$Res520 = '2'}
                            }
		                $Str520 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag520 + ';' + $Desc520 + ';' + $Res520 + ';' + $Using:CurntDateForm)
		                $Str520
						}

                        #========================================================================================================================================================
                        #18.9.45 Password Synchronization
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "PswdSync.admx/adml" that is included with the 
                        #   Microsoft Windows Vista, 2008, 7/2008R2, 8/2012 & 8.1/2012R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.45 Microsoft Edge
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MicrosoftEdge.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.46 Portable Operating System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.46 Microsoft FIDO Authentication
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template FidoAuth.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.47 Presentation Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.47 Microsoft Secondary Authentication Factor
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template DeviceCredential.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.48 Remote Desktop Services (formerly Terminal Services)
                        #   This section contains recommendations related to Remote Desktop Services (formerly Terminal Services).
                        #========================================================================================================================================================
                        #18.9.48 Microsoft User Experience Virtualization
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template UserExperienceVirtualization.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.48.1 RD Licensing
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.2 Remote Desktop Connection Client
                        #   This section contains recommendations for the Remote Desktop Connection Client.
                        #========================================================================================================================================================
                        #18.9.48.2.1 RemoteFX USB Device Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        
                        #18.9.48.2.2 (L1) Ensure 'Do not allow passwords to be saved' is set to 'Enabled' (Scored)
                        $Tag267 = '18.9.48.2.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc267 = 'Ensure Do not allow passwords to be saved is set to Enabled (Scored)'
                        $Lvl267 = 'L1'
		                $DsbPassSave = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name DisablePasswordSaving -ErrorAction 'silentlycontinue'
                        if (!$DsbPassSave){
                            $Res267 = '2'}
                        Else{
                        $PolRes267 = $DsbPassSave | Select-Object -ExpandProperty DisablePasswordSaving
                        if ($PolRes267 -eq '1'){
                            $Res267 = '1'} else {$Res267 = '2'}
                            }
		                $Str267 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag267 + ';' + $Desc267 + ';' + $Res267 + ';' + $Using:CurntDateForm)
		                $Str267
                        }

                        #========================================================================================================================================================
                        #18.9.48.3 Remote Desktop Session Host
                        #   This section contains recommendations for the Remote Desktop Session Host.
                        #========================================================================================================================================================
                        #18.9.48.3.1 Application Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.2 Connections
                        #   This section contains recommendations for Connections to the Remote Desktop Session Host.
                        #========================================================================================================================================================
                        
                        #18.9.48.3.2.1 (L2) Ensure 'Restrict Remote Desktop Services users to a single Remote Desktop Services session' is set to 'Enabled' (Scored)
                        $Tag268 = '18.9.48.3.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc268 = 'Ensure Restrict Remote Desktop Services users to a single Remote Desktop Services session is set to Enabled (Scored)'
                        $Lvl268 = 'L2'
		                $SngSessxUsr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name fSingleSessionPerUser -ErrorAction 'silentlycontinue'
                        if (!$SngSessxUsr){
                            $Res268 = '2'}
                        Else{
                        $PolRes268 = $SngSessxUsr | Select-Object -ExpandProperty fSingleSessionPerUser
                        if ($PolRes268 -eq '1'){
                            $Res268 = '1'} else {$Res268 = '2'}
                            }
		                $Str268 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag268 + ';' + $Desc268 + ';' + $Res268 + ';' + $Using:CurntDateForm)
		                $Str268
                        }

                        #========================================================================================================================================================
                        #18.9.48.3.3 Device and Resource Redirection
                        #   This section contains recommendations related to Remote Desktop Session Host Device and Resource Redirection.
                        #========================================================================================================================================================
                        
                        #18.9.48.3.3.1 (L2) Ensure 'Do not allow COM port redirection' is set to 'Enabled' (Scored)
                        $Tag269 = '18.9.48.3.3.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc269 = 'Ensure Do not allow COM port redirection is set to Enabled (Scored)'
                        $Lvl269 = 'L2'
		                $fDsbCcm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableCcm -ErrorAction 'silentlycontinue'
                        if (!$fDsbCcm){
                            $Res269 = '2'}
                        Else{
                        $PolRes269 = $fDsbCcm | Select-Object -ExpandProperty fDisableCcm
                        if ($PolRes269 -eq '1'){
                            $Res269 = '1'} else {$Res269 = '2'}
                            }
		                $Str269 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag269 + ';' + $Desc269 + ';' + $Res269 + ';' + $Using:CurntDateForm)
		                $Str269
                        }

                        #18.9.48.3.3.2 (L1) Ensure 'Do not allow drive redirection' is set to 'Enabled' (Scored)
                        $Tag270 = '18.9.48.3.3.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc270 = 'Ensure Do not allow drive redirection is set to Enabled (Scored)'
                        $Lvl270 = 'L1'
		                $fDsbCdm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableCdm -ErrorAction 'silentlycontinue'
                        if (!$fDsbCdm){
                            $Res270 = '2'}
                        Else{
                        $PolRes270 = $fDsbCdm | Select-Object -ExpandProperty fDisableCdm
                        if ($PolRes270 -eq '1'){
                            $Res270 = '1'} else {$Res270 = '2'}
                            }
		                $Str270 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag270 + ';' + $Desc270 + ';' + $Res270 + ';' + $Using:CurntDateForm)
		                $Str270
                        }

                        #18.9.48.3.3.3 (L2) Ensure 'Do not allow LPT port redirection' is set to 'Enabled' (Scored)
                        $Tag271 = '18.9.48.3.3.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc271 = 'Ensure Do not allow LPT port redirection is set to Enabled (Scored)'
                        $Lvl271 = 'L2'
		                $fDsbPT = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableLPT -ErrorAction 'silentlycontinue'
                        if (!$fDsbPT){
                            $Res271 = '2'}
                        Else{
                        $PolRes271 = $fDsbPT | Select-Object -ExpandProperty fDisableLPT
                        if ($PolRes271 -eq '1'){
                            $Res271 = '1'} else {$Res271 = '2'}
                            }
		                $Str271 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag271 + ';' + $Desc271 + ';' + $Res271 + ';' + $Using:CurntDateForm)
		                $Str271
                        }

                        #18.9.48.3.3.4 (L2) Ensure 'Do not allow supported Plug and Play device redirection' is set to 'Enabled' (Scored)
                        $Tag272 = '18.9.48.3.3.4'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc272 = 'Ensure Do not allow supported Plug and Play device redirection is set to Enabled (Scored)'
                        $Lvl272 = 'L2'
		                $fDsbPNPRedir = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisablePNPRedir -ErrorAction 'silentlycontinue'
                        if (!$fDsbPNPRedir){
                            $Res272 = '2'}
                        Else{
                        $PolRes272 = $fDsbPNPRedir | Select-Object -ExpandProperty fDisablePNPRedir
                        if ($PolRes272 -eq '1'){
                            $Res272 = '1'} else {$Res272 = '2'}
                            }
		                $Str272 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag272 + ';' + $Desc272 + ';' + $Res272 + ';' + $Using:CurntDateForm)
		                $Str272
                        }
                        
                        #========================================================================================================================================================
                        #18.9.48.3.4 Licensing
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.5 Printer Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.6 Profiles
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.7 RD Connection Broker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.8 Remote Session Environment
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.48.3.9 Security
                        #   This section contains recommendations related to Remote Desktop Session Host Security.
                        #========================================================================================================================================================
                        
                        #18.9.48.3.9.1 (L1) Ensure 'Always prompt for password upon connection' is set to 'Enabled' (Scored)
                        $Tag273 = '18.9.48.3.9.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc273 = 'Ensure Always prompt for password upon connection is set to Enabled (Scored)'
                        $Lvl273 = 'L1'
		                $fPrompt4Pass = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fPromptForPassword -ErrorAction 'silentlycontinue'
                        if (!$fPrompt4Pass){
                            $Res273 = '2'}
                        Else{
                        $PolRes273 = $fPrompt4Pass | Select-Object -ExpandProperty fPromptForPassword
                        if ($PolRes273 -eq '1'){
                            $Res273 = '1'} else {$Res273 = '2'}
                            }
		                $Str273 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag273 + ';' + $Desc273 + ';' + $Res273 + ';' + $Using:CurntDateForm)
		                $Str273
                        }

                        #18.9.48.3.9.2 (L1) Ensure 'Require secure RPC communication' is set to 'Enabled' (Scored)
                        $Tag274 = '18.9.48.3.9.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc274 = 'Ensure Require secure RPC communication is set to Enabled (Scored)'
                        $Lvl274 = 'L1'
		                $fEncRPCTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name fEncryptRPCTraffic -ErrorAction 'silentlycontinue'
                        if (!$fEncRPCTx){
                            $Res274 = '2'}
                        Else{
                        $PolRes274 = $fEncRPCTx | Select-Object -ExpandProperty fEncryptRPCTraffic
                        if ($PolRes274 -eq '1'){
                            $Res274 = '1'} else {$Res274 = '2'}
                            }
		                $Str274 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag274 + ';' + $Desc274 + ';' + $Res274 + ';' + $Using:CurntDateForm)
		                $Str274
                        }

                        #18.9.48.3.9.3 (L1) Ensure 'Set client connection encryption level' is set to 'Enabled: High Level' (Scored)
                        $Tag275 = '18.9.48.3.9.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc275 = 'Ensure Set client connection encryption level is set to Enabled: High Level (Scored)'
                        $Lvl275 = 'L1'
		                $MinEncLvl = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MinEncryptionLevel -ErrorAction 'silentlycontinue'
                        if (!$MinEncLvl){
                            $Res275 = '2'}
                        Else{
                        $PolRes275 = $MinEncLvl | Select-Object -ExpandProperty MinEncryptionLevel
                        if ($PolRes275 -eq '3'){
                            $Res275 = '1'} else {$Res275 = '2'}
                            }
		                $Str275 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag275 + ';' + $Desc275 + ';' + $Res275 + ';' + $Using:CurntDateForm)
		                $Str275
                        }
                        
                        #========================================================================================================================================================
                        #18.9.48.3.10 Session Time Limits
                        #   This section contains recommendations related to Remote Desktop Session Host Session Time Limits.
                        #========================================================================================================================================================

                        #18.9.48.3.10.1 (L2) Ensure 'Set time limit for active but idle Remote Desktop Services sessions' is set to 'Enabled: 15 minutes or less' (Scored)
                        $Tag276 = '18.9.48.3.10.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc276 = 'Ensure Set time limit for active but idle Remote Desktop Services sessions is set to Enabled: 15 minutes or less (Scored)'
                        $Lvl276 = 'L2'
		                $RDPMaxIdleTime = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MaxIdleTime -ErrorAction 'silentlycontinue'
                        if (!$RDPMaxIdleTime){
                            $Res276 = '2'}
                        Else{
                        $RDPActIdleSs = $RDPMaxIdleTime | Select-Object -ExpandProperty MaxIdleTime
                        $PolRes276 = $RDPActIdleSs -as [int]
		                if ($PolRes276 -le '900000'){
                            $Res276 = '1'} else {$Res276 = '2'}
                            }
		                $Str276 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag276 + ';' + $Desc276 + ';' + $Res276 + ';' + $Using:CurntDateForm)
		                $Str276
                        }
                        
                        #18.9.48.3.10.2 (L2) Ensure 'Set time limit for disconnected sessions' is set to 'Enabled: 1 minute' (Scored)
                        $Tag277 = '18.9.48.3.10.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc277 = 'Ensure Set time limit for disconnected sessions is set to Enabled: 1 minute (Scored)'
                        $Lvl277 = 'L2'
		                $RDPMaxDscnTime = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MaxDisconnectionTime -ErrorAction 'silentlycontinue'
                        if (!$RDPMaxDscnTime){
                            $Res277 = '2'}
                        Else{
                        $RDPTimeDiscnSs = $RDPMaxDscnTime | Select-Object -ExpandProperty MaxDisconnectionTime
                        $PolRes277 = $RDPTimeDiscnSs -as [int]
		                if ($PolRes277 -eq '60000'){
                            $Res277 = '1'} else {$Res277 = '2'}
                            }
		                $Str277 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag277 + ';' + $Desc277 + ';' + $Res277 + ';' + $Using:CurntDateForm)
		                $Str277
                        }

                        #========================================================================================================================================================
                        #18.9.48.3.11 Temporary folders
                        #   This section contains recommendations related to Remote Desktop Session Host Session Temporary folders.
                        #========================================================================================================================================================

                        #18.9.48.3.11.1 (L1) Ensure 'Do not delete temp folders upon exit' is set to 'Disabled' (Scored)
                        $Tag278 = '18.9.48.3.11.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc278 = 'Ensure Do not delete temp folders upon exit is set to Disabled (Scored)'
                        $Lvl278 = 'L1'
		                $DelTmpDironExt = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name DeleteTempDirsOnExit -ErrorAction 'silentlycontinue'
                        if (!$DelTmpDironExt){
                            $Res278 = '2'}
                        Else{
                        $PolRes278 = $DelTmpDironExt | Select-Object -ExpandProperty DeleteTempDirsOnExit
                        if ($PolRes278 -eq '0'){
                            $Res278 = '1'} else {$Res278 = '2'}
                            }
		                $Str278 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag278 + ';' + $Desc278 + ';' + $Res278 + ';' + $Using:CurntDateForm)
		                $Str278
                        }

                        #18.9.48.3.11.2 (L1) Ensure 'Do not use temporary folders per session' is set to 'Disabled' (Scored)
                        $Tag279 = '18.9.48.3.11.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc279 = 'Ensure Do not use temporary folders per session is set to Disabled (Scored)'
                        $Lvl279 = 'L1'
		                $PerSesTmpDir = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name PerSessionTempDir -ErrorAction 'silentlycontinue'
                        if (!$PerSesTmpDir){
                            $Res279 = '2'}
                        Else{
                        $PolRes279 = $PerSesTmpDir | Select-Object -ExpandProperty PerSessionTempDir
                        if ($PolRes279 -eq '0'){
                            $Res279 = '1'} else {$Res279 = '2'}
                            }
		                $Str279 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag279 + ';' + $Desc279 + ';' + $Res279 + ';' + $Using:CurntDateForm)
		                $Str279
                        }

                        #========================================================================================================================================================
                        #18.9.49 RSS Feeds
                        #   This section contains recommendations related to RSS feeds.
                        #========================================================================================================================================================

                        #18.9.49.1 (L1) Ensure 'Prevent downloading of enclosures' is set to 'Enabled' (Scored)
                        $Tag280 = '18.9.49.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc280 = 'Ensure Prevent downloading of enclosures is set to Enabled (Scored)'
                        $Lvl280 = 'L1'
		                $DsbEnclsDwnld = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Internet Explorer\Feeds' -Name DisableEnclosureDownload -ErrorAction 'silentlycontinue'
                        if (!$DsbEnclsDwnld){
                            $Res280 = '2'}
                        Else{
                        $PolRes280 = $DsbEnclsDwnld | Select-Object -ExpandProperty DisableEnclosureDownload
                        if ($PolRes280 -eq '1'){
                            $Res280 = '1'} else {$Res280 = '2'}
                            }
		                $Str280 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag280 + ';' + $Desc280 + ';' + $Res280 + ';' + $Using:CurntDateForm)
		                $Str280
                        }

                        #========================================================================================================================================================
                        #18.9.49 NetMeeting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Conf.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.50 Search
                        #   This section contains recommendations for Search settings.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "Search.admx/adml" that is included with the 
                        #   Microsoft Windows Vista, 2008, 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.50 Network Access Protection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template NAPXPQec.admx/adml that is only included with the
                        #   Microsoft Windows Server 2008 (non-R2) through the Windows 8.1 Update & Server 2012 R2 Update Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.50.1 OCR
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "SearchOCR.admx/adml" that is included with the 
                        #   Microsoft Windows 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.50.2 (L1) Ensure 'Allow indexing of encrypted files' is set to 'Disabled' (Scored)
                        $Tag281 = '18.9.50.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc281 = 'Ensure Prevent downloading of enclosures is set to Enabled (Scored)'
                        $Lvl281 = 'L1'
		                $AllwIndxEncStreItm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Search' -Name AllowIndexingEncryptedStoresOrItems -ErrorAction 'silentlycontinue'
                        if (!$AllwIndxEncStreItm){
                            $Res281 = '2'}
                        Else{
                        $PolRes281 = $AllwIndxEncStreItm | Select-Object -ExpandProperty AllowIndexingEncryptedStoresOrItems
                        if ($PolRes281 -eq '0'){
                            $Res281 = '1'} else {$Res281 = '2'}
                            }
		                $Str281 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag281 + ';' + $Desc281 + ';' + $Res281 + ';' + $Using:CurntDateForm)
		                $Str281
                        }

                        #18.9.50.3 (L2) Ensure 'Set what information is shared in Search' is set to 'Enabled: Anonymous info' (Scored)
                        $Tag282 = '18.9.50.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc282 = 'Ensure Set what information is shared in Search is set to Enabled: Anonymous info (Scored)'
                        $Lvl282 = 'L1'
		                $CnntSrchPriv = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Search' -Name ConnectedSearchPrivacy -ErrorAction 'silentlycontinue'
                        if (!$CnntSrchPriv){
                            $Res282 = '2'}
                        Else{
                        $PolRes282 = $CnntSrchPriv | Select-Object -ExpandProperty ConnectedSearchPrivacy
                        if ($PolRes282 -eq '3'){
                            $Res282 = '1'} else {$Res282 = '2'}
                            }
		                $Str282 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag282 + ';' + $Desc282 + ';' + $Res282 + ';' + $Using:CurntDateForm)
		                $Str282
                        }

                        #========================================================================================================================================================
                        #18.9.51 Security Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.51 Network Projector
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template NetworkProjection.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 8.1 Update & Server 2012 R2 Update Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.52 Server for NIS
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "Snis.admx/adml" that is included with the Microsoft
                        #   Windows Vista, 2008, 7/2008R2, 8/2012 & 8.1/2012R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.52 OneDrive (formerly SkyDrive)
                        #   This section contains recommendations related to OneDrive.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template SkyDrive.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #   Note: This section was initially named SkyDrive but was renamed by Microsoft to OneDrive starting with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.52.1 (L1) Ensure 'Prevent the usage of OneDrive for file storage' is set to 'Enabled' (Scored) W2K16
                        $Tag521 = '18.9.52.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc521 = 'Ensure Prevent the usage of OneDrive for file storage is set to Enabled (Scored)'
                        $Lvl521 = 'L1'
		                $TurnOffLoc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\OneDrive' -Name DisableFileSyncNGSC -ErrorAction 'silentlycontinue'
                        if (!$TurnOffLoc){
                            $Res521 = '2'}
                        Else{
                        $PolRes521 = $TurnOffLoc | Select-Object -ExpandProperty DisableFileSyncNGSC
                        if ($PolRes521 -eq '1'){
                            $Res521 = '1'} else {$Res521 = '2'}
                            }
		                $Str521 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag521 + ';' + $Desc521 + ';' + $Res521 + ';' + $Using:CurntDateForm)
		                $Str521
						}

                        #========================================================================================================================================================
                        #18.9.53 Shutdown Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.53 Online Assistance
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template HelpAndSupport.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.54 Password Synchronization
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PswdSync.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 8.1 Update & Server 2012 R2 Update Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.54 SkyDrive
                        #   This section contains recommendations related to SkyDrive.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "SkyDrive.admx/adml" that is included with the 
                        #   Microsoft Windows 8.1/2012R2 Administrative Templates. Since this template contains different settings than the newer Windows 10 version, we recommend
                        #   renaming the Windows 10 version to "OneDrive.admx/adml" before adding it to your ADMX repository or Central Store, so both versions can coexist. 
                        #   Likewise, ensure that any Windows 8.1/2012 R2 versioned template is named "SkyDrive.admx/adml" before placing it in your ADMX repository or Central 
                        #   Store.
                        #========================================================================================================================================================

                        #18.9.54.1 (L1) Ensure 'Prevent the usage of SkyDrive for file storage' is set to 'Enabled' (Scored)
                        $Tag283 = '18.9.54.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc283 = 'Ensure Prevent the usage of SkyDrive for file storage is set to Enabled (Scored)'
                        $Lvl283 = 'L1'
		                $DsbFileSync = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Skydrive' -Name DisableFileSync -ErrorAction 'silentlycontinue'
                        if (!$DsbFileSync){
                            $Res283 = '2'}
                        Else{
                        $PolRes283 = $DsbFileSync | Select-Object -ExpandProperty DisableFileSync
                        if ($PolRes283 -eq '1'){
                            $Res283 = '1'} else {$Res283 = '2'}
                            }
		                $Str283 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag283 + ';' + $Desc283 + ';' + $Res283 + ';' + $Using:CurntDateForm)
		                $Str283
                        }

                        #========================================================================================================================================================
                        #18.9.55 Smart Card
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.55 Portable Operating System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ExternalBoot.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.56 Presentation Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MobilePCPresentationSettings.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.56 Software Protection Platform
                        #   This section contains recommendations related to the Software Protection Platform.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "avsvalidationgp.admx/adml" that is included with 
                        #   the Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.9.56.1 (L2) Ensure 'Turn off KMS Client Online AVS Validation' is set to 'Enabled' (Scored)
                        $Tag284 = '18.9.56.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc284 = 'Ensure Turn off KMS Client Online AVS Validation is set to Enabled (Scored)'
                        $Lvl284 = 'L2'
		                $NoGenTicket = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\CurrentVersion\Software Protection Platform' -Name NoGenTicket -ErrorAction 'silentlycontinue'
                        if (!$NoGenTicket){
                            $Res284 = '2'}
                        Else{
                        $PolRes284 = $NoGenTicket | Select-Object -ExpandProperty NoGenTicket
                        if ($PolRes284 -eq '1'){
                            $Res284 = '1'} else {$Res284 = '2'}
                            }
		                $Str284 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag284 + ';' + $Desc284 + ';' + $Res284 + ';' + $Using:CurntDateForm)
		                $Str284
                        }

                        #========================================================================================================================================================
                        #18.9.57 Sound Recorder
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.57 Push To Install
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template PushToInstall.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.58 Remote Desktop Services (formerly Terminal Services)
                        #   This section contains recommendations related to Remote Desktop Services.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named Terminal Services but was renamed by Microsoft to
                        #   Remote Desktop Services starting with the Microsoft Windows 7 & Server 2008 R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.1 RD Licensing (formerly TS Licensing)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named TS Licensing but was renamed by Microsoft to RD Licensing starting with the
                        #   Microsoft Windows 7 & Server 2008 R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.2 Remote Desktop Connection Client
                        #   This section contains recommendations for the Remote Desktop Connection Client.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.2.1 RemoteFX USB Device Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.58.2.2 (L1) Ensure 'Do not allow passwords to be saved' is set to 'Enabled' (Scored) W2K16
                        $Tag522 = '18.9.58.2.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc522 = 'Ensure Do not allow passwords to be saved is set to Enabled (Scored)'
                        $Lvl522 = 'L1'
		                $DsbPassSave = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name DisablePasswordSaving -ErrorAction 'silentlycontinue'
                        if (!$DsbPassSave){
                            $Res522 = '2'}
                        Else{
                        $PolRes522 = $DsbPassSave | Select-Object -ExpandProperty DisablePasswordSaving
                        if ($PolRes522 -eq '1'){
                            $Res522 = '1'} else {$Res522 = '2'}
                            }
		                $Str522 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag522 + ';' + $Desc522 + ';' + $Res522 + ';' + $Using:CurntDateForm)
		                $Str522
						}

                        #========================================================================================================================================================
                        #18.9.58.3 Remote Desktop Session Host (formerly Terminal Server)
                        #   This section contains recommendations for the Remote Desktop Session Host.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all
                        #   versions of the Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.1 Application Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer-Server.admx/adml that is included with the
                        #   Microsoft Windows 7 & Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.58.3.2 Connections
                        #   This section contains recommendations for Connections to the Remote Desktop Session Host.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.58.3.2.1 (L2) Ensure 'Restrict Remote Desktop Services users to a single Remote Desktop Services session' is set to 'Enabled' (Scored) W2K16
                        $Tag523 = '18.9.58.3.2.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc523 = 'Ensure Restrict Remote Desktop Services users to a single Remote Desktop Services session is set to Enabled (Scored)'
                        $Lvl523 = 'L2'
		                $SngSessxUsr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name fSingleSessionPerUser -ErrorAction 'silentlycontinue'
                        if (!$SngSessxUsr){
                            $Res523 = '2'}
                        Else{
                        $PolRes523 = $SngSessxUsr | Select-Object -ExpandProperty fSingleSessionPerUser
                        if ($PolRes523 -eq '1'){
                            $Res523 = '1'} else {$Res523 = '2'}
                            }
		                $Str523 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag523 + ';' + $Desc523 + ';' + $Res523 + ';' + $Using:CurntDateForm)
		                $Str523
						}

                        #========================================================================================================================================================
                        #18.9.58.3.3 Device and Resource Redirection
                        #   This section contains recommendations related to Remote Desktop Session Host Device and Resource Redirection.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.58.3.3.1 (L2) Ensure 'Do not allow COM port redirection' is set to 'Enabled' (Scored) W2K16
                        $Tag524 = '18.9.58.3.3.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc524 = 'Ensure Do not allow COM port redirection is set to Enabled (Scored)'
                        $Lvl524 = 'L2'
		                $fDsbCcm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableCcm -ErrorAction 'silentlycontinue'
                        if (!$fDsbCcm){
                            $Res524 = '2'}
                        Else{
                        $PolRes524 = $fDsbCcm | Select-Object -ExpandProperty fDisableCcm
                        if ($PolRes524 -eq '1'){
                            $Res524 = '1'} else {$Res524 = '2'}
                            }
		                $Str524 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag524 + ';' + $Desc524 + ';' + $Res524 + ';' + $Using:CurntDateForm)
		                $Str524
						}

                        #18.9.58.3.3.2 (L1) Ensure 'Do not allow drive redirection' is set to 'Enabled' (Scored) W2K16
                        $Tag525 = '18.9.58.3.3.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc525 = 'Ensure Do not allow drive redirection is set to Enabled (Scored)'
                        $Lvl525 = 'L1'
		                $fDsbCdm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableCdm -ErrorAction 'silentlycontinue'
                        if (!$fDsbCdm){
                            $Res525 = '2'}
                        Else{
                        $PolRes525 = $fDsbCdm | Select-Object -ExpandProperty fDisableCdm
                        if ($PolRes525 -eq '1'){
                            $Res525 = '1'} else {$Res525 = '2'}
                            }
		                $Str525 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag525 + ';' + $Desc525 + ';' + $Res525 + ';' + $Using:CurntDateForm)
		                $Str525
						}

                        #18.9.58.3.3.3 (L2) Ensure 'Do not allow LPT port redirection' is set to 'Enabled' (Scored) W2K16
                        $Tag526 = '18.9.58.3.3.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc526 = 'Ensure Do not allow LPT port redirection is set to Enabled (Scored)'
                        $Lvl526 = 'L2'
		                $fDsbPT = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisableLPT -ErrorAction 'silentlycontinue'
                        if (!$fDsbPT){
                            $Res526 = '2'}
                        Else{
                        $PolRes526 = $fDsbPT | Select-Object -ExpandProperty fDisableLPT
                        if ($PolRes526 -eq '1'){
                            $Res526 = '1'} else {$Res526 = '2'}
                            }
		                $Str526 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag526 + ';' + $Desc526 + ';' + $Res526 + ';' + $Using:CurntDateForm)
		                $Str526
						}

                        #18.9.58.3.3.4 (L2) Ensure 'Do not allow supported Plug and Play device redirection' is set to 'Enabled' (Scored) W2K16
                        $Tag527 = '18.9.58.3.3.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc527 = 'Ensure Do not allow supported Plug and Play device redirection is set to Enabled (Scored)'
                        $Lvl527 = 'L2'
		                $fDsbPNPRedir = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fDisablePNPRedir -ErrorAction 'silentlycontinue'
                        if (!$fDsbPNPRedir){
                            $Res527 = '2'}
                        Else{
                        $PolRes527 = $fDsbPNPRedir | Select-Object -ExpandProperty fDisablePNPRedir
                        if ($PolRes527 -eq '1'){
                            $Res527 = '1'} else {$Res527 = '2'}
                            }
		                $Str527 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag527 + ';' + $Desc527 + ';' + $Res527 + ';' + $Using:CurntDateForm)
		                $Str527
						}
                        
                        #========================================================================================================================================================
                        #18.9.58.3.4 Licensing
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.5 Printer Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.6 Profiles
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.7 RD Connection Broker (formerly TS Connection Broker)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the 
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was initially named TS Connection Broker but was renamed by Microsoft to RD Connection Broker starting with the
                        #   Microsoft Windows 7 & Server 2008 R2 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.8 Remote Session Environment
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.58.3.9 Security
                        #   This section contains recommendations related to Remote Desktop Session Host Security.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.58.3.9.1 (L1) Ensure 'Always prompt for password upon connection' is set to 'Enabled' (Scored) W2K16
                        $Tag528 = '18.9.58.3.9.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc528 = 'Ensure Always prompt for password upon connection is set to Enabled (Scored)'
                        $Lvl528 = 'L1'
		                $fPrompt4Pass = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name fPromptForPassword -ErrorAction 'silentlycontinue'
                        if (!$fPrompt4Pass){
                            $Res528 = '2'}
                        Else{
                        $PolRes528 = $fPrompt4Pass | Select-Object -ExpandProperty fPromptForPassword
                        if ($PolRes528 -eq '1'){
                            $Res528 = '1'} else {$Res528 = '2'}
                            }
		                $Str528 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag528 + ';' + $Desc528 + ';' + $Res528 + ';' + $Using:CurntDateForm)
		                $Str528
						}

                        #18.9.58.3.9.2 (L1) Ensure 'Require secure RPC communication' is set to 'Enabled' (Scored) W2K16
                        $Tag529 = '18.9.48.3.9.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc529 = 'Ensure Require secure RPC communication is set to Enabled (Scored)'
                        $Lvl529 = 'L1'
		                $fEncRPCTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name fEncryptRPCTraffic -ErrorAction 'silentlycontinue'
                        if (!$fEncRPCTx){
                            $Res529 = '2'}
                        Else{
                        $PolRes529 = $fEncRPCTx | Select-Object -ExpandProperty fEncryptRPCTraffic
                        if ($PolRes529 -eq '1'){
                            $Res529 = '1'} else {$Res529 = '2'}
                            }
		                $Str529 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag529 + ';' + $Desc529 + ';' + $Res529 + ';' + $Using:CurntDateForm)
		                $Str529
						}

                        #18.9.58.3.9.3 (L1) Ensure 'Set client connection encryption level' is set to 'Enabled: High Level' (Scored) W2K16
                        $Tag530 = '18.9.58.3.9.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc530 = 'Ensure Set client connection encryption level is set to Enabled: High Level (Scored)'
                        $Lvl530 = 'L1'
		                $MinEncLvl = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MinEncryptionLevel -ErrorAction 'silentlycontinue'
                        if (!$MinEncLvl){
                            $Res530 = '2'}
                        Else{
                        $PolRes530 = $MinEncLvl | Select-Object -ExpandProperty MinEncryptionLevel
                        if ($PolRes530 -eq '3'){
                            $Res530 = '1'} else {$Res530 = '2'}
                            }
		                $Str530 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag530 + ';' + $Desc530 + ';' + $Res530 + ';' + $Using:CurntDateForm)
		                $Str530
						}

                        #========================================================================================================================================================
                        #18.9.58.3.10 Session Time Limits
                        #   This section contains recommendations related to Remote Desktop Session Host Session Time Limits.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.9.58.3.10.1 (L2) Ensure 'Set time limit for active but idle Remote Desktop Services sessions' is set to 'Enabled: 15 minutes or less' (Scored) W2K16
                        $Tag531 = '18.9.58.3.10.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc531 = 'Ensure Set time limit for active but idle Remote Desktop Services sessions is set to Enabled: 15 minutes or less (Scored)'
                        $Lvl531 = 'L2'
		                $RDPMaxIdleTime = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MaxIdleTime -ErrorAction 'silentlycontinue'
                        if (!$RDPMaxIdleTime){
                            $Res531 = '2'}
                        Else{
                        $RDPActIdleSs = $RDPMaxIdleTime | Select-Object -ExpandProperty MaxIdleTime
                        $PolRes531 = $RDPActIdleSs -as [int]
		                if ($PolRes531 -le '900000'){
                            $Res531 = '1'} else {$Res531 = '2'}
                            }
		                $Str531 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag531 + ';' + $Desc531 + ';' + $Res531 + ';' + $Using:CurntDateForm)
		                $Str531
						}

                        #18.9.58.3.10.2 (L2) Ensure 'Set time limit for disconnected sessions' is set to 'Enabled: 1 minute' (Scored) W2K16
                        $Tag532 = '18.9.58.3.10.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc532 = 'Ensure Set time limit for disconnected sessions is set to Enabled: 1 minute (Scored)'
                        $Lvl532 = 'L2'
		                $RDPMaxDscnTime = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name MaxDisconnectionTime -ErrorAction 'silentlycontinue'
                        if (!$RDPMaxDscnTime){
                            $Res532 = '2'}
                        Else{
                        $RDPTimeDiscnSs = $RDPMaxDscnTime | Select-Object -ExpandProperty MaxDisconnectionTime
                        $PolRes532 = $RDPTimeDiscnSs -as [int]
		                if ($PolRes532 -eq '60000'){
                            $Res532 = '1'} else {$Res532 = '2'}
                            }
		                $Str532 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag532 + ';' + $Desc532 + ';' + $Res532 + ';' + $Using:CurntDateForm)
		                $Str532
						}

                        #========================================================================================================================================================
                        #18.9.58.3.11 Temporary folders
                        #   This section contains recommendations related to Remote Desktop Session Host Session Temporary folders.
                        #   This Group Policy section is provided by the Group Policy template TerminalServer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.58.3.11.1 (L1) Ensure 'Do not delete temp folders upon exit' is set to 'Disabled' (Scored) W2K16
                        $Tag533 = '18.9.58.3.11.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc533 = 'Ensure Do not delete temp folders upon exit is set to Disabled (Scored)'
                        $Lvl533 = 'L1'
		                $DelTmpDironExt = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name DeleteTempDirsOnExit -ErrorAction 'silentlycontinue'
                        if (!$DelTmpDironExt){
                            $Res533 = '2'}
                        Else{
                        $PolRes533 = $DelTmpDironExt | Select-Object -ExpandProperty DeleteTempDirsOnExit
                        if ($PolRes533 -eq '0'){
                            $Res533 = '1'} else {$Res533 = '2'}
                            }
		                $Str533 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag533 + ';' + $Desc533 + ';' + $Res533 + ';' + $Using:CurntDateForm)
		                $Str533
						}

                        #18.9.58.3.11.2 (L1) Ensure 'Do not use temporary folders per session' is set to 'Disabled' (Scored) W2K16
                        $Tag534 = '18.9.58.3.11.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc534 = 'Ensure Do not use temporary folders per session is set to Disabled (Scored)'
                        $Lvl534 = 'L1'
		                $PerSesTmpDir = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows NT\Terminal Services' -Name PerSessionTempDir -ErrorAction 'silentlycontinue'
                        if (!$PerSesTmpDir){
                            $Res534 = '2'}
                        Else{
                        $PolRes534 = $PerSesTmpDir | Select-Object -ExpandProperty PerSessionTempDir
                        if ($PolRes534 -eq '0'){
                            $Res534 = '1'} else {$Res534 = '2'}
                            }
		                $Str534 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag534 + ';' + $Desc534 + ';' + $Res534 + ';' + $Using:CurntDateForm)
		                $Str534
						}

                        #========================================================================================================================================================
                        #18.9.58 Store
                        #   This section contains recommendations related to the Windows Store.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WinStoreUI.admx/adml" that is included with the 
                        #   Microsoft Windows 8/2012 & 8.1/2012R2 Administrative Templates and the Group Policy template "WindowsStore.admx/adml" that is included with Windows 
                        #   10 Release 1511 Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.58.1 (L1) Ensure 'Turn off Automatic Download and Install of updates' is set to 'Disabled' (Scored)
                        $Tag285 = '18.9.58.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc285 = 'Ensure Turn off KMS Client Online AVS Validation is set to Enabled (Scored)'
                        $Lvl285 = 'L1'
		                $AutoDownload = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\WindowsStore' -Name AutoDownload -ErrorAction 'silentlycontinue'
                        if (!$AutoDownload){
                            $Res285 = '2'}
                        Else{
                        $PolRes285 = $AutoDownload | Select-Object -ExpandProperty AutoDownload
                        if ($PolRes285 -eq '0'){
                            $Res285 = '1'} else {$Res285 = '2'}
                            }
		                $Str285 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag285 + ';' + $Desc285 + ';' + $Res285 + ';' + $Using:CurntDateForm)
		                $Str285
                        }

                        #18.9.58.2 (L1) Ensure 'Turn off the offer to update to the latest version of Windows' is set to 'Enabled' (Scored)
                        $Tag286 = '18.9.58.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc286 = 'Ensure Turn off the offer to update to the latest version of Windows is set to Enabled (Scored)'
                        $Lvl286 = 'L1'
		                $DsbOSUpgrd = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\WindowsStore' -Name DisableOSUpgrade -ErrorAction 'silentlycontinue'
                        if (!$DsbOSUpgrd){
                            $Res286 = '2'}
                        Else{
                        $PolRes286 = $DsbOSUpgrd | Select-Object -ExpandProperty DisableOSUpgrade
                        if ($PolRes286 -eq '1'){
                            $Res286 = '1'} else {$Res286 = '2'}
                            }
		                $Str286 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag286 + ';' + $Desc286 + ';' + $Res286 + ';' + $Using:CurntDateForm)
		                $Str286
                        }

                        #18.9.58.3 (L2) Ensure 'Turn off the Store application' is set to 'Enabled' (Scored)
                        $Tag287 = '18.9.58.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc287 = 'Ensure Turn off the Store application is set to Enabled (Scored)'
                        $Lvl287 = 'L2'
		                $DsbOSUpgrd = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\WindowsStore' -Name DisableOSUpgrade -ErrorAction 'silentlycontinue'
                        if (!$DsbOSUpgrd){
                            $Res287 = '2'}
                        Else{
                        $PolRes287 = $DsbOSUpgrd | Select-Object -ExpandProperty DisableOSUpgrade
                        if ($PolRes287 -eq '1'){
                            $Res287 = '1'} else {$Res287 = '2'}
                            }
		                $Str287 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag287 + ';' + $Desc287 + ';' + $Res287 + ';' + $Using:CurntDateForm)
		                $Str287
                        }

                        #========================================================================================================================================================
                        #18.9.59 Sync your settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.59 RSS Feeds
                        #   This section contains recommendations related to RSS feeds.
                        #   This Group Policy section is provided by the Group Policy template InetRes.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.59.1 (L1) Ensure 'Prevent downloading of enclosures' is set to 'Enabled' (Scored) W2K16
                        $Tag535 = '18.9.59.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc535 = 'Ensure Prevent downloading of enclosures is set to Enabled (Scored)'
                        $Lvl535 = 'L1'
		                $DsbEnclsDwnld = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Internet Explorer\Feeds' -Name DisableEnclosureDownload -ErrorAction 'silentlycontinue'
                        if (!$DsbEnclsDwnld){
                            $Res535 = '2'}
                        Else{
                        $PolRes535 = $DsbEnclsDwnld | Select-Object -ExpandProperty DisableEnclosureDownload
                        if ($PolRes535 -eq '1'){
                            $Res535 = '1'} else {$Res535 = '2'}
                            }
		                $Str535 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag535 + ';' + $Desc535 + ';' + $Res535 + ';' + $Using:CurntDateForm)
		                $Str535
						}

                        #========================================================================================================================================================
                        #18.9.60 Tablet PC
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.60 Search
                        #   This section contains recommendations for Search settings.
                        #   This Group Policy section is provided by the Group Policy template Search.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.60.1 OCR
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SearchOCR.admx/adml that is only included with the Microsoft Windows 7 &
                        #   Server 2008 R2 through the Windows 10 Release 1511 Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.60.2 (L2) Ensure 'Allow Cloud Search' is set to 'Enabled: Disable Cloud Search' (Scored) W2K16
                        $Tag536 = '18.9.60.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc536 = 'Ensure Allow Cloud Search is set to Enabled: Disable Cloud Search (Scored)'
                        $Lvl536 = 'L1'
		                $DsbEnclsDwnld = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Search' -Name AllowCloudSearch -ErrorAction 'silentlycontinue'
                        if (!$DsbEnclsDwnld){
                            $Res536 = '2'}
                        Else{
                        $PolRes536 = $DsbEnclsDwnld | Select-Object -ExpandProperty AllowCloudSearch
                        if ($PolRes536 -eq '0'){
                            $Res536 = '1'} else {$Res536 = '2'}
                            }
		                $Str536 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag536 + ';' + $Desc536 + ';' + $Res536 + ';' + $Using:CurntDateForm)
		                $Str536
						}

                        #18.9.60.3 (L1) Ensure 'Allow indexing of encrypted files' is set to 'Disabled' (Scored) W2K16
                        $Tag537 = '18.9.60.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc537 = 'Ensure Prevent downloading of enclosures is set to Enabled (Scored)'
                        $Lvl537 = 'L1'
		                $AllwIndxEncStreItm = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Search' -Name AllowIndexingEncryptedStoresOrItems -ErrorAction 'silentlycontinue'
                        if (!$AllwIndxEncStreItm){
                            $Res537 = '2'}
                        Else{
                        $PolRes537 = $AllwIndxEncStreItm | Select-Object -ExpandProperty AllowIndexingEncryptedStoresOrItems
                        if ($PolRes537 -eq '0'){
                            $Res537 = '1'} else {$Res537 = '2'}
                            }
		                $Str537 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag537 + ';' + $Desc537 + ';' + $Res537 + ';' + $Using:CurntDateForm)
		                $Str537
						}

                        #========================================================================================================================================================
                        #18.9.61 Task Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.61 Security Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SecurityCenter.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.62 Text Input
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "textinput.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.62 Server for NIS
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Snis.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 8.1 Update & Server 2012 R2 Update Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.63 Windows Calendar
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.63 Shutdown Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WinInit.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.64 Windows Color System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.64 Smart Card
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SmartCard.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.65 Windows Customer Experience Improvement Program
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.65 Software Protection Platform
                        #   This section contains recommendations related to the Software Protection Platform.
                        #   This Group Policy section is provided by the Group Policy template AVSValidationGP.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.65.1 (L2) Ensure 'Turn off KMS Client Online AVS Validation' is set to 'Enabled' (Scored) W2K16
                        $Tag538 = '18.9.65.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc538 = 'Ensure Turn off KMS Client Online AVS Validation is set to Enabled (Scored)'
                        $Lvl538 = 'L2'
		                $NoGenTicket = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows NT\CurrentVersion\Software Protection Platform' -Name NoGenTicket -ErrorAction 'silentlycontinue'
                        if (!$NoGenTicket){
                            $Res538 = '2'}
                        Else{
                        $PolRes538 = $NoGenTicket | Select-Object -ExpandProperty NoGenTicket
                        if ($PolRes538 -eq '1'){
                            $Res538 = '1'} else {$Res538 = '2'}
                            }
		                $Str538 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag538 + ';' + $Desc538 + ';' + $Res538 + ';' + $Using:CurntDateForm)
		                $Str538
						}

                        #========================================================================================================================================================
                        #18.9.66 Windows Defender
                        #   This section contains recommendations related to Windows Defender.
                        #========================================================================================================================================================
                        #18.9.66 Sound Recorder
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SoundRec.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.66.1 Client Interface
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.66.2 Exclusions
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.66.3 MAPS
                        #   This section contains recommendations related to Microsoft MAPS.
                        #========================================================================================================================================================

                        #18.9.66.3.1 (L2) Ensure 'Join Microsoft MAPS' is set to 'Disabled' (Scored)
                        $Tag288 = '18.9.66.3.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc288 = 'Ensure Join Microsoft MAPS is set to Disabled (Scored)'
                        $Lvl288 = 'L2'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name SpynetReporting -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res288 = '2'}
                        Else{
                        $PolRes288 = $SpynetRepo | Select-Object -ExpandProperty SpynetReporting
                        if ($PolRes288 -eq '0'){
                            $Res288 = '1'} else {$Res288 = '2'}
                            }
		                $Str288 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag288 + ';' + $Desc288 + ';' + $Res288 + ';' + $Using:CurntDateForm)
		                $Str288
                        }

                        #========================================================================================================================================================
                        #18.9.67 Windows Error Reporting
                        #   This section contains recommendations related to Windows Error Reporting.
                        #========================================================================================================================================================
                        #18.9.67 Speech
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Speech.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.67.1 Advanced Error Reporting Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.67.2 Consent
                        #   This section contains recommendations related to Windows Error Reporting consent.
                        #========================================================================================================================================================

                        #18.9.67.2.1 (L1) Ensure 'Configure Default consent' is set to 'Enabled: Always ask before sending data' (Scored)
                        $Tag289 = '18.9.67.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc289 = 'Ensure Configure Default consent is set to Enabled: Always ask before sending data (Scored)'
                        $Lvl289 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting\Consent' -Name DefaultConsent -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res289 = '2'}
                        Else{
                        $PolRes289 = $SpynetRepo | Select-Object -ExpandProperty DefaultConsent
                        if ($PolRes289 -eq '1'){
                            $Res289 = '1'} else {$Res289 = '2'}
                            }
		                $Str289 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag289 + ';' + $Desc289 + ';' + $Res289 + ';' + $Using:CurntDateForm)
		                $Str289
                        }

                        #18.9.67.3 (L1) Ensure 'Automatically send memory dumps for OS-generated error reports' is set to 'Disabled' (Scored)
                        $Tag290 = '18.9.67.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc290 = 'Ensure Automatically send memory dumps for OS-generated error reports is set to Disabled (Scored)'
                        $Lvl290 = 'L1'
		                $AutoAppOSDmp = Get-ItemProperty -Path 'HKLM:SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\Windows Error Reporting' -Name AutoApproveOSDumps -ErrorAction 'silentlycontinue'
                        if (!$AutoAppOSDmp){
                            $Res290 = '2'}
                        Else{
                        $PolRes290 = $AutoAppOSDmp | Select-Object -ExpandProperty AutoApproveOSDumps
                        if ($PolRes290 -eq '0'){
                            $Res290 = '1'} else {$Res290 = '2'}
                            }
		                $Str290 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag290 + ';' + $Desc290 + ';' + $Res290 + ';' + $Using:CurntDateForm)
		                $Str290
                        }

                        #========================================================================================================================================================
                        #18.9.68 Windows Game Recording and Broadcasting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "gamedvr.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.68 Store
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WinStoreUI.admx/adml that is included with the Microsoft Windows 8.1 &
                        #   Server 2012 R2 Administrative Templates, or by the Group Policy template WindowsStore.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1511 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.69 Sync your settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SettingSync.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.69 Windows Installer
                        #   This section contains recommendations related to Windows Installer.
                        #========================================================================================================================================================

                        #18.9.69.1 (L1) Ensure 'Allow user control over installs' is set to 'Disabled' (Scored)
                        $Tag291 = '18.9.69.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc291 = 'Ensure Allow user control over installs is set to Disabled (Scored)'
                        $Lvl291 = 'L1'
		                $EnbUsrControl = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name EnableUserControl -ErrorAction 'silentlycontinue'
                        if (!$EnbUsrControl){
                            $Res291 = '2'}
                        Else{
                        $PolRes291 = $EnbUsrControl | Select-Object -ExpandProperty EnableUserControl
                        if ($PolRes291 -eq '0'){
                            $Res291 = '1'} else {$Res291 = '2'}
                            }
		                $Str291 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag291 + ';' + $Desc291 + ';' + $Res291 + ';' + $Using:CurntDateForm)
		                $Str291
                        }

                        #18.9.69.2 (L1) Ensure 'Always install with elevated privileges' is set to 'Disabled' (Scored)
                        $Tag292 = '18.9.69.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc292 = 'Ensure Always install with elevated privileges is set to Disabled (Scored)'
                        $Lvl292 = 'L1'
		                $AllwInstElev = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name AlwaysInstallElevated -ErrorAction 'silentlycontinue'
                        if (!$AllwInstElev){
                            $Res292 = '2'}
                        Else{
                        $PolRes292 = $AllwInstElev | Select-Object -ExpandProperty AlwaysInstallElevated
                        if ($PolRes292 -eq '0'){
                            $Res292 = '1'} else {$Res292 = '2'}
                            }
		                $Str292 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag292 + ';' + $Desc292 + ';' + $Res292 + ';' + $Using:CurntDateForm)
		                $Str292
                        }

                        #18.9.69.3 (L2) Ensure 'Prevent Internet Explorer security prompt for Windows Installer scripts' is set to 'Disabled' (Scored)
                        $Tag293 = '18.9.69.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc293 = 'Ensure Prevent Internet Explorer security prompt for Windows Installer scripts is set to Disabled (Scored)'
                        $Lvl293 = 'L2'
		                $Sf4Script = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name SafeForScripting -ErrorAction 'silentlycontinue'
                        if (!$Sf4Script){
                            $Res293 = '2'}
                        Else{
                        $PolRes293 = $Sf4Script | Select-Object -ExpandProperty SafeForScripting
                        if ($PolRes293 -eq '0'){
                            $Res293 = '1'} else {$Res293 = '2'}
                            }
		                $Str293 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag293 + ';' + $Desc293 + ';' + $Res293 + ';' + $Using:CurntDateForm)
		                $Str293
                        }

                        #========================================================================================================================================================
                        #18.9.70 Tablet PC
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Windows.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.70 Windows Logon Options
                        #   This section contains recommendations related to Windows Logon Options.
                        #========================================================================================================================================================

                        #18.9.70.1 (L1) Ensure 'Sign-in last interactive user automatically after a system-initiated restart' is set to 'Disabled' (Scored)
                        $Tag294 = '18.9.70.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc294 = 'Ensure Sign-in last interactive user automatically after a system-initiated restart is set to Disabled (Scored)'
                        $Lvl294 = 'L1'
		                $DsbAutoRstrSgnon = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DisableAutomaticRestartSignOn -ErrorAction 'silentlycontinue'
                        if (!$DsbAutoRstrSgnon){
                            $Res294 = '2'}
                        Else{
                        $PolRes294 = $DsbAutoRstrSgnon | Select-Object -ExpandProperty DisableAutomaticRestartSignOn
                        if ($PolRes294 -eq '0'){
                            $Res294 = '1'} else {$Res294 = '2'}
                            }
		                $Str294 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag294 + ';' + $Desc294 + ';' + $Res294 + ';' + $Using:CurntDateForm)
		                $Str294
                        }

                        #========================================================================================================================================================
                        #18.9.71 Windows Mail
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.71 Task Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TaskScheduler.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.72 Windows Media Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.72 Text Input
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template TextInput.admx/adml that is only included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates and Microsoft Windows 10 Release 1511 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.73 Windows Media Digital Rights Management
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.73 Windows Calendar
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WinCal.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.74 Windows Media Player
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.74 Windows Color System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsColorSystem.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.75 Windows Meeting Space
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WindowsCollaboration.admx/adml" that is included 
                        #   with the Microsoft Windows Vista & 2008 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.75 Windows Customer Experience Improvement Program
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template CEIPEnable.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.76 Windows Messenger
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.76 Windows Defender Antivirus (formerly Windows Defender)
                        #   This section contains recommendations related to Windows Defender Antivirus.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #   Note: This section was originally named Windows Defender but was renamed by Microsoft to Windows Defender Antivirus starting with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.76.1 Client Interface
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.2 Exclusions
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.3 MAPS
                        #   This section contains recommendations related to Microsoft Active Protection Service (MAPS).
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.76.3.1 (L1) Ensure 'Configure local setting override for reporting to Microsoft MAPS' is set to 'Disabled' (Scored) W2K16
                        $Tag539 = '18.9.76.3.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc539 = 'Ensure Configure local setting override for reporting to Microsoft MAPS is set to Disabled (Scored)'
                        $Lvl539 = 'L1'
		                $NoGenTicket = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name LocalSettingOverrideSpynetReporting -ErrorAction 'silentlycontinue'
                        if (!$NoGenTicket){
                            $Res539 = '2'}
                        Else{
                        $PolRes539 = $NoGenTicket | Select-Object -ExpandProperty LocalSettingOverrideSpynetReporting
                        if ($PolRes539 -eq '0'){
                            $Res539 = '1'} else {$Res539 = '2'}
                            }
		                $Str539 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag539 + ';' + $Desc539 + ';' + $Res539 + ';' + $Using:CurntDateForm)
		                $Str539
						}

                        #18.9.76.3.2 (L2) Ensure 'Join Microsoft MAPS' is set to 'Disabled' (Scored) W2K16
                        $Tag540 = '18.9.76.3.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc540 = 'Ensure Join Microsoft MAPS is set to Disabled (Scored)'
                        $Lvl540 = 'L2'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name SpynetReporting -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res540 = '2'}
                        Else{
                        $PolRes540 = $SpynetRepo | Select-Object -ExpandProperty SpynetReporting
                        if ($PolRes540 -eq '0'){
                            $Res540 = '1'} else {$Res540 = '2'}
                            }
		                $Str540 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag540 + ';' + $Desc540 + ';' + $Res540 + ';' + $Using:CurntDateForm)
		                $Str540
						}

                        #========================================================================================================================================================
                        #18.9.76.4 MpEngine
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.5 Network Inspection System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.6 Quarantine
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.7 Real-time Protection
                        #   This section contains settings related to Real-time Protection.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.76.7.1 (L1) Ensure 'Turn on behavior monitoring' is set to 'Enabled' (Scored) W2K16
                        $Tag541 = '18.9.76.7.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc541 = 'Ensure Turn on behavior monitoring is set to Enabled (Scored)'
                        $Lvl541 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection' -Name DisableBehaviorMonitoring -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res541 = '2'}
                        Else{
                        $PolRes541 = $SpynetRepo | Select-Object -ExpandProperty DisableBehaviorMonitoring
                        if ($PolRes541 -eq '1'){
                            $Res541 = '1'} else {$Res541 = '2'}
                            }
		                $Str541 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag541 + ';' + $Desc541 + ';' + $Res541 + ';' + $Using:CurntDateForm)
		                $Str541
						}

                        #========================================================================================================================================================
                        #18.9.76.8 Remediation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.9 Reporting
                        #   This section contains settings related to Windows Defender Reporting.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.76.9.1 (L2) Ensure 'Configure Watson events' is set to 'Disabled' (Scored) W2K16
                        $Tag542 = '18.9.76.9.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc542 = 'Ensure Configure Watson events is set to Disabled (Scored)'
                        $Lvl542 = 'L2'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Reporting' -Name DisableGenericRePorts -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res542 = '2'}
                        Else{
                        $PolRes542 = $SpynetRepo | Select-Object -ExpandProperty DisableGenericRePorts
                        if ($PolRes542 -eq '0'){
                            $Res542 = '1'} else {$Res542 = '2'}
                            }
		                $Str542 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag542 + ';' + $Desc542 + ';' + $Res542 + ';' + $Using:CurntDateForm)
		                $Str542
						}

                        #========================================================================================================================================================
                        #18.9.76.10 Scan
                        #   This section contains settings related to Windows Defender scanning.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.76.10.1 (L1) Ensure 'Scan removable drives' is set to 'Enabled' (Scored) W2K16
                        $Tag543 = '18.9.76.10.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc543 = 'Ensure Scan removable drives is set to Enabled (Scored)'
                        $Lvl543 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Scan' -Name DisableRemovableDriveScanning -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res543 = '2'}
                        Else{
                        $PolRes543 = $SpynetRepo | Select-Object -ExpandProperty DisableRemovableDriveScanning
                        if ($PolRes543 -eq '1'){
                            $Res543 = '1'} else {$Res543 = '2'}
                            }
		                $Str543 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag543 + ';' + $Desc543 + ';' + $Res543 + ';' + $Using:CurntDateForm)
		                $Str543
						}

                        #18.9.76.10.2 (L1) Ensure 'Turn on e-mail scanning' is set to 'Enabled' (Scored) W2K16
                        $Tag544 = '18.9.76.10.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc544 = 'Ensure Turn on e-mail scanning is set to Enabled (Scored)'
                        $Lvl544 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Scan' -Name DisableEmailScanning -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res544 = '2'}
                        Else{
                        $PolRes544 = $SpynetRepo | Select-Object -ExpandProperty DisableEmailScanning
                        if ($PolRes544 -eq '1'){
                            $Res544 = '1'} else {$Res544 = '2'}
                            }
		                $Str544 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag544 + ';' + $Desc544 + ';' + $Res544 + ';' + $Using:CurntDateForm)
		                $Str544
						}

                        #========================================================================================================================================================
                        #18.9.76.11 Signature Updates
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.12 Threats
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.13 Windows Defender Exploit Guard
                        #   This section contains Windows Defender Exploit Guard settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.13.1 Attack Surface Reduction
                        #   This section contains Attack Surface Reduction settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        
                        #18.9.76.13.1.1 (L1) Ensure 'Configure Attack Surface Reduction rules' is set to 'Enabled' (Scored) W2K16
                        $Tag545 = '18.9.76.13.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc545 = 'Ensure Configure Attack Surface Reduction rules is set to Enabled (Scored)'
                        $Lvl545 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR' -Name ExploitGuard_ASR_Rules -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res545 = '2'}
                        Else{
                        $PolRes545 = $SpynetRepo | Select-Object -ExpandProperty ExploitGuard_ASR_Rules
                        if ($PolRes545 -eq '1'){
                            $Res545 = '1'} else {$Res545 = '2'}
                            }
		                $Str545 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag545 + ';' + $Desc545 + ';' + $Res545 + ';' + $Using:CurntDateForm)
		                $Str545
						}

                        #18.9.76.13.1.2 (L1) Ensure 'Configure Attack Surface Reduction rules: Set the state for each ASR rule' is 'configured' (Scored) W2K16
                        $Tag546 = '18.9.76.13.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc546 = 'Ensure Configure Attack Surface Reduction rules: Set the state for each ASR rule is configured (Scored)'
                        $Lvl546 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name 75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84 -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name 3b576869-a4ec-4529-8536-b80a7769e899 -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name d4f940ab-401b-4efc-aadc-ad5f3c50688a -ErrorAction 'silentlycontinue'
                        $RegistrarsKey4 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name 92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b -ErrorAction 'silentlycontinue'
                        $RegistrarsKey5 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name 5beb7efe-fd9a-4556-801d-275e5ffc04cc -ErrorAction 'silentlycontinue'
						$RegistrarsKey6 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name d3e037e1-3eb8-44c8-a917-57927947596d -ErrorAction 'silentlycontinue'
						$RegistrarsKey7 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\ASR\Rules' -Name be9ba2d9-53ea-4cdc-84e5-9b1eeee46550 -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3) -or (!$RegistrarsKey4) -or (!$RegistrarsKey5) -or (!$RegistrarsKey6) -or (!$RegistrarsKey7)) {
                            $Res546 = '2'}
                        Else{
                        $PolRes546a = $RegistrarsKey1 | Select-Object -ExpandProperty 75668c1f-73b5-4cf0-bb93-3ecf5cb7cc84
                        $PolRes546b = $RegistrarsKey2 | Select-Object -ExpandProperty 3b576869-a4ec-4529-8536-b80a7769e899
                        $PolRes546c = $RegistrarsKey3 | Select-Object -ExpandProperty d4f940ab-401b-4efc-aadc-ad5f3c50688a
                        $PolRes546d = $RegistrarsKey4 | Select-Object -ExpandProperty 92e97fa1-2edf-4476-bdd6-9dd0b4dddc7b
                        $PolRes546e = $RegistrarsKey5 | Select-Object -ExpandProperty 5beb7efe-fd9a-4556-801d-275e5ffc04cc
						$PolRes546f = $RegistrarsKey5 | Select-Object -ExpandProperty d3e037e1-3eb8-44c8-a917-57927947596d
						$PolRes546g = $RegistrarsKey5 | Select-Object -ExpandProperty be9ba2d9-53ea-4cdc-84e5-9b1eeee46550
        
                        if (($PolRes546a -eq '1') -and ($PolRes546b -eq '1') -and ($PolRes546c -eq '1') -and ($PolRes546d -eq '1') -and ($PolRes546e -eq '1') -and ($PolRes546f -eq '1') -and ($PolRes546g -eq '1')){
                            $Res546 = '1'} else {$Res546 = '2'}
                            }
		                $Str546 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag546 + ';' + $Desc546 + ';' + $Res546 + ';' + $Using:CurntDateForm)
                        $Str546
						}

                        #========================================================================================================================================================
                        #18.9.76.13.2 Controlled Folder Access
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 8.1 & Server 2012 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.76.13.3 Network Protection
                        #   This section contains Windows Network Protection settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefender.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.76.13.3.1 (L1) Ensure 'Prevent users and apps from accessing dangerous websites' is set to 'Enabled: Block' (Scored) W2K16
                        $Tag547 = '18.9.76.13.3.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc547 = 'Ensure Prevent users and apps from accessing dangerous websites is set to Enabled: Block (Scored)'
                        $Lvl547 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender\Windows Defender Exploit Guard\Network Protection' -Name EnableNetworkProtection -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res547 = '2'}
                        Else{
                        $PolRes547 = $SpynetRepo | Select-Object -ExpandProperty EnableNetworkProtection
                        if ($PolRes547 -eq '1'){
                            $Res547 = '1'} else {$Res547 = '2'}
                            }
		                $Str547 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag547 + ';' + $Desc547 + ';' + $Res547 + ';' + $Using:CurntDateForm)
		                $Str547
						}

                        #18.9.76.14 (L1) Ensure 'Turn off Windows Defender AntiVirus' is set to 'Disabled' (Scored) W2K16
                        $Tag548 = '18.9.76.14'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc548 = 'Ensure Turn off Windows Defender AntiVirus is set to Disabled (Scored)'
                        $Lvl548 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender' -Name DisableAntiSpyware -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res548 = '2'}
                        Else{
                        $PolRes548 = $SpynetRepo | Select-Object -ExpandProperty DisableAntiSpyware
                        if ($PolRes548 -eq '0'){
                            $Res548 = '1'} else {$Res548 = '2'}
                            }
		                $Str548 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag548 + ';' + $Desc548 + ';' + $Res548 + ';' + $Using:CurntDateForm)
		                $Str548
						}

                        #========================================================================================================================================================
                        #18.9.77 Windows Mobility Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #18.9.77 Windows Defender Application Guard
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template AppHVSI.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.78 Windows Movie Maker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "MovieMaker.admx/adml" that is included with the 
                        #   Microsoft Windows Vista & 2008 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.78 Windows Defender Exploit Guard
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ExploitGuard.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.79 Windows PowerShell
                        #   This section contains recommendations related to Windows PowerShell.
                        #========================================================================================================================================================

                        #18.9.79.1 (L1) Ensure 'Turn on PowerShell Script Block Logging' is set to 'Disabled' (Scored)
                        $Tag295 = '18.9.79.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc295 = 'Ensure Turn on PowerShell Script Block Logging is set to Disabled (Scored)'
                        $Lvl295 = 'L1'
		                $EnbScrptBlckLog = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging' -Name EnableScriptBlockLogging -ErrorAction 'silentlycontinue'
                        if (!$EnbScrptBlckLog){
                            $Res295 = '2'}
                        Else{
                        $PolRes295 = $EnbScrptBlckLog | Select-Object -ExpandProperty EnableScriptBlockLogging
                        if ($PolRes295 -eq '0'){
                            $Res295 = '1'} else {$Res295 = '2'}
                            }
		                $Str295 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag295 + ';' + $Desc295 + ';' + $Res295 + ';' + $Using:CurntDateForm)
		                $Str295
                        }

                        #18.9.79.2 (L1) Ensure 'Turn on PowerShell Transcription' is set to 'Disabled' (Scored)
                        $Tag296 = '18.9.79.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc296 = 'Ensure Turn on PowerShell Transcription is set to Disabled (Scored)'
                        $Lvl296 = 'L1'
		                $EnbTrnsc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PowerShell\Transcription' -Name EnableTranscripting -ErrorAction 'silentlycontinue'
                        if (!$EnbTrnsc){
                            $Res296 = '2'}
                        Else{
                        $PolRes296 = $EnbTrnsc | Select-Object -ExpandProperty EnableTranscripting
                        if ($PolRes296 -eq '0'){
                            $Res296 = '1'} else {$Res296 = '2'}
                            }
		                $Str296 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag296 + ';' + $Desc296 + ';' + $Res296 + ';' + $Using:CurntDateForm)
		                $Str296
                        }

                        #========================================================================================================================================================
                        #18.9.79 Windows Defender Security Center
                        #   This section contains Windows Defender Security Center settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefenderSecurityCenter.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.79.1 App and browser protection
                        #   This section contains App and browser protection settings.
                        #   This Group Policy section is provided by the Group Policy template WindowsDefenderSecurityCenter.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.79.1.1 (L1) Ensure 'Prevent users from modifying settings' is set to 'Enabled' (Scored) W2K16
                        $Tag549 = '18.9.79.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc549 = 'Ensure Prevent users from modifying settings is set to Enabled (Scored)'
                        $Lvl549 = 'L1'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows Defender Security Center\App and Browser protection' -Name DisallowExploitProtectionOverride -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res549 = '2'}
                        Else{
                        $PolRes549 = $SpynetRepo | Select-Object -ExpandProperty DisallowExploitProtectionOverride
                        if ($PolRes549 -eq '1'){
                            $Res549 = '1'} else {$Res549 = '2'}
                            }
		                $Str549 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag549 + ';' + $Desc549 + ';' + $Res549 + ';' + $Using:CurntDateForm)
		                $Str549
						}

                        #========================================================================================================================================================
                        #18.9.80 Windows Reliability Analysis
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #=======================================================================================================================================================
                        #18.9.80 Windows Defender SmartScreen
                        #   This section contains Windows Defender SmartScreen settings.
                        #   This Group Policy section is provided by the Group Policy template SmartScreen.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #=======================================================================================================================================================
                        #18.9.80.1 Explorer
                        #   This section contains recommendations for Explorer-related Windows Defender SmartScreen settings.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template WindowsExplorer.admx/adml
                        #   that is included with the Microsoft Windows 10 Release 1703 Administrative Templates (or newer).
                        #=======================================================================================================================================================

                        #18.9.80.1.1 (L1) Ensure 'Configure Windows Defender SmartScreen' is set to 'Enabled: Warn and prevent bypass' (Scored) W2K16
                        $Tag550 = '18.9.80.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc550 = 'Ensure Configure Windows Defender SmartScreen is set to Enabled: Warn and prevent bypass (Scored)'
                        $Lvl550 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name EnableSmartScreen -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\System' -Name ShellSmartScreenLevel -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res550 = '2'}
                        Else{
                        $PolRes550a = $RegistrarsKey1 | Select-Object -ExpandProperty EnableSmartScreen
                        $PolRes550b = $RegistrarsKey2 | Select-Object -ExpandProperty ShellSmartScreenLevel
        
                        if (($PolRes550a -eq '1') -and ($PolRes550b -eq '1')){
                            $Res550 = '1'} else {$Res550 = '2'}
                            }
		                $Str550 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag550 + ';' + $Desc550 + ';' + $Res550 + ';' + $Using:CurntDateForm)
                        $Str550
						}

                        #=======================================================================================================================================================
                        #18.9.81 Windows Remote Management (WinRM)
                        #   This section contains recommendations related to Windows Remote Management (WinRM).
                        #========================================================================================================================================================
                        #18.9.81 Windows Error Reporting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template ErrorReporting.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.81.1 WinRM Client
                        #   This section contains recommendations related to the WinRM client.
                        #========================================================================================================================================================

                        #18.9.81.1.1 (L1) Ensure 'Allow Basic authentication' is set to 'Disabled' (Scored)
                        $Tag297 = '18.9.81.1.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc297 = 'Ensure Turn on PowerShell Transcription is set to Disabled (Scored)'
                        $Lvl297 = 'L1'
		                $CliAllowBasic = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowBasic -ErrorAction 'silentlycontinue'
                        if (!$CliAllowBasic){
                            $Res297 = '2'}
                        Else{
                        $PolRes297 = $CliAllowBasic | Select-Object -ExpandProperty AllowBasic
                        if ($PolRes297 -eq '0'){
                            $Res297 = '1'} else {$Res297 = '2'}
                            }
		                $Str297 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag297 + ';' + $Desc297 + ';' + $Res297 + ';' + $Using:CurntDateForm)
		                $Str297
                        }

                        #18.9.81.1.2 (L1) Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Scored)
                        $Tag298 = '18.9.81.1.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc298 = 'Ensure Allow unencrypted traffic is set to Disabled (Scored)'
                        $Lvl298 = 'L1'
		                $CliAllowUnecTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowUnencryptedTraffic -ErrorAction 'silentlycontinue'
                        if (!$CliAllowUnecTx){
                            $Res298 = '2'}
                        Else{
                        $PolRes298 = $CliAllowUnecTx | Select-Object -ExpandProperty AllowUnencryptedTraffic
                        if ($PolRes298 -eq '0'){
                            $Res298 = '1'} else {$Res298 = '2'}
                            }
		                $Str298 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag298 + ';' + $Desc298 + ';' + $Res298 + ';' + $Using:CurntDateForm)
		                $Str298
                        }

                        #18.9.81.1.3 (L1) Ensure 'Disallow Digest authentication' is set to 'Enabled' (Scored)
                        $Tag299 = '18.9.81.1.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc299 = 'Ensure Disallow Digest authentication is set to Enabled (Scored)'
                        $Lvl299 = 'L1'
		                $CliAllowDigest = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowDigest -ErrorAction 'silentlycontinue'
                        if (!$CliAllowDigest){
                            $Res299 = '2'}
                        Else{
                        $PolRes299 = $CliAllowDigest | Select-Object -ExpandProperty AllowDigest
                        if ($PolRes299 -eq '1'){
                            $Res299 = '1'} else {$Res299 = '2'}
                            }
		                $Str299 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag299 + ';' + $Desc299 + ';' + $Res299 + ';' + $Using:CurntDateForm)
		                $Str299
                        }

                        #========================================================================================================================================================
                        #18.9.81.2 WinRM Service
                        #   This section contains recommendations related to the WinRM service.
                        #========================================================================================================================================================
                        
                        #18.9.81.2.1 (L1) Ensure 'Allow Basic authentication' is set to 'Disabled' (Scored)
                        $Tag300 = '18.9.81.2.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc300 = 'Ensure Allow Basic authentication is set to Disabled (Scored)'
                        $Lvl300 = 'L1'
		                $SrvAllowBasic = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name AllowBasic -ErrorAction 'silentlycontinue'
                        if (!$SrvAllowBasic){
                            $Res300 = '2'}
                        Else{
                        $PolRes300 = $SrvAllowBasic | Select-Object -ExpandProperty AllowBasic
                        if ($PolRes300 -eq '0'){
                            $Res300 = '1'} else {$Res300 = '2'}
                            }
		                $Str300 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag300 + ';' + $Desc300 + ';' + $Res300 + ';' + $Using:CurntDateForm)
		                $Str300
                        }

                        #18.9.81.2.2 (L1) Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Scored)
                        $Tag301 = '18.9.81.2.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc301 = 'Ensure Allow unencrypted traffic is set to Disabled (Scored)'
                        $Lvl301 = 'L1'
		                $SrvAllowUnecTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name AllowUnencryptedTraffic -ErrorAction 'silentlycontinue'
                        if (!$SrvAllowUnecTx){
                            $Res301 = '2'}
                        Else{
                        $PolRes301 = $SrvAllowUnecTx | Select-Object -ExpandProperty AllowUnencryptedTraffic
                        if ($PolRes301 -eq '0'){
                            $Res301 = '1'} else {$Res301 = '2'}
                            }
		                $Str301 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag301 + ';' + $Desc301 + ';' + $Res301 + ';' + $Using:CurntDateForm)
		                $Str301
                        }

                        #18.9.81.2.3 (L1) Ensure 'Disallow WinRM from storing RunAs credentials' is set to 'Enabled' (Scored)
                        $Tag302 = '18.9.81.2.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc302 = 'Ensure Disallow WinRM from storing RunAs credentials is set to Enabled (Scored)'
                        $Lvl302 = 'L1'
		                $DsbRunAs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name DisableRunAs -ErrorAction 'silentlycontinue'
                        if (!$DsbRunAs){
                            $Res302 = '2'}
                        Else{
                        $PolRes282 = $DsbRunAs | Select-Object -ExpandProperty DisableRunAs
                        if ($PolRes282 -eq '1'){
                            $Res302 = '1'} else {$Res302 = '2'}
                            }
		                $Str302 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag302 + ';' + $Desc302 + ';' + $Res302 + ';' + $Using:CurntDateForm)
		                $Str302
                        }

                        #========================================================================================================================================================
                        #18.9.82 Windows Game Recording and Broadcasting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template GameDVR.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.82 Windows Remote Shell
                        #   This section contains settings related to Windows Remote Shell.
                        #========================================================================================================================================================
                        
                        #18.9.82.1 (L2) Ensure 'Allow Remote Shell Access' is set to 'Disabled' (Scored)
                        $Tag303 = '18.9.81.2.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc303 = 'Ensure Allow Remote Shell Access is set to Disabled (Scored)'
                        $Lvl303 = 'L2'
		                $AllwRemShellAcc = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service\WinRS' -Name AllowRemoteShellAccess -ErrorAction 'silentlycontinue'
                        if (!$AllwRemShellAcc){
                            $Res303 = '2'}
                        Else{
                        $PolRes303 = $AllwRemShellAcc | Select-Object -ExpandProperty AllowRemoteShellAccess
                        if ($PolRes303 -eq '0'){
                            $Res303 = '1'} else {$Res303 = '2'}
                            }
		                $Str303 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag303 + ';' + $Desc303 + ';' + $Res303 + ';' + $Using:CurntDateForm)
		                $Str303
                        }
                        
                        #========================================================================================================================================================
                        #18.9.83 Windows SideShow
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "Sideshow.admx/adml" that is included with the 
                        #   Microsoft Windows Vista, 2008, 7/2008R2 & 8/2012 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.83 Windows Hello for Business (formerly Microsoft Passport for Work)
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template Passport.admx/adml that is included with the
                        #   Microsoft Windows 10 RTM (Release 1507) Administrative Templates (or newer).
                        #   Note: This section was initially named Microsoft Passport for Work but was renamed by Microsoft to Windows Hello for Business starting with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.84 Windows System Resource Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "SystemResourceManager.admx/adml" that is included
                        #   with the Microsoft Windows Vista, 2008, 7/2008R2 & 8/2012 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.84 Windows Ink Workspace
                        #   This section contains recommendations related to the Windows Ink Workspace.
                        #   This Group Policy section is provided by the Group Policy template WindowsInkWorkspace.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.84.1 (L2) Ensure 'Allow suggested apps in Windows Ink Workspace' is set to 'Disabled' (Scored) W2K16
                        $Tag551 = '18.9.84.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc551 = 'Ensure Allow suggested apps in Windows Ink Workspace is set to Disabled (Scored)'
                        $Lvl551 = 'L2'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\WindowsInkWorkspace' -Name AllowSuggestedAppsInWindowsInkWorkspace -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res551 = '2'}
                        Else{
                        $PolRes551 = $SpynetRepo | Select-Object -ExpandProperty AllowSuggestedAppsInWindowsInkWorkspace
                        if ($PolRes551 -eq '0'){
                            $Res551 = '1'} else {$Res551 = '2'}
                            }
		                $Str551 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag551 + ';' + $Desc551 + ';' + $Res551 + ';' + $Using:CurntDateForm)
		                $Str551
						}

                        #18.9.84.2 (L1) Ensure 'Allow Windows Ink Workspace' is set to 'Enabled: On, but disallow access above lock' OR 'Disabled' but not 'Enabled: On' (Scored) W2K16
                        $Tag552 = '18.9.84.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc552 = 'Ensure Allow Windows Ink Workspace is set to Enabled: On, but disallow access above lock OR Disabled but not Enabled: On (Scored)'
                        $Lvl552 = 'L2'
		                $SpynetRepo = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\WindowsInkWorkspace' -Name AllowWindowsInkWorkspace -ErrorAction 'silentlycontinue'
                        if (!$SpynetRepo){
                            $Res552 = '2'}
                        Else{
                        $PolRes552 = $SpynetRepo | Select-Object -ExpandProperty AllowWindowsInkWorkspace
                        if ($PolRes552 -eq '1'){
                            $Res552 = '1'} else {$Res552 = '2'}
                            }
		                $Str552 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag552 + ';' + $Desc552 + ';' + $Res552 + ';' + $Using:CurntDateForm)
		                $Str552
						}

                        #========================================================================================================================================================
                        #18.9.85 Windows Update
                        #   This section contains recommendations related to Windows Update.
                        #========================================================================================================================================================

                        #18.9.85.1 (L1) Ensure 'Configure Automatic Updates' is set to 'Enabled' (Scored)
                        $Tag304 = '18.9.85.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc304 = 'Ensure Configure Automatic Updates is set to Enabled (Scored)'
                        $Lvl304 = 'L1'
		                $NoAuUpdt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name NoAutoUpdate -ErrorAction 'silentlycontinue'
                        if (!$NoAuUpdt){
                            $Res304 = '2'}
                        Else{
                        $PolRes304 = $NoAuUpdt | Select-Object -ExpandProperty NoAutoUpdate
                        if ($PolRes304 -eq '1'){
                            $Res304 = '1'} else {$Res304 = '2'}
                            }
		                $Str304 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag304 + ';' + $Desc304 + ';' + $Res304 + ';' + $Using:CurntDateForm)
		                $Str304
                        }

                        #18.9.85.2 (L1) Ensure 'Configure Automatic Updates: Scheduled install day' is set to '0 - Every day' (Scored)
                        $Tag305 = '18.9.85.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc305 = 'Ensure Configure Automatic Updates: Scheduled install day is set to 0 - Every day (Scored)'
                        $Lvl305 = 'L1'
		                $SchInstllDay = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name ScheduledInstallDay -ErrorAction 'silentlycontinue'
                        if (!$SchInstllDay){
                            $Res305 = '2'}
                        Else{
                        $PolRes305 = $SchInstllDay | Select-Object -ExpandProperty ScheduledInstallDay
                        if ($PolRes305 -eq '0'){
                            $Res305 = '1'} else {$Res305 = '2'}
                            }
		                $Str305 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag305 + ';' + $Desc305 + ';' + $Res305 + ';' + $Using:CurntDateForm)
		                $Str305
                        }

                        #18.9.85.3 (L1) Ensure 'No auto-restart with logged on users for scheduled automatic updates installations' is set to 'Disabled' (Scored)
                        $Tag306 = '18.9.85.3'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count18++
		                $Desc306 = 'Ensure No auto-restart with logged on users for scheduled automatic updates installations is set to Disabled (Scored)'
                        $Lvl306 = 'L1'
		                $NoAubootwLogUsr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name NoAutoRebootWithLoggedOnUsers -ErrorAction 'silentlycontinue'
                        if (!$NoAubootwLogUsr){
                            $Res306 = '2'}
                        Else{
                        $PolRes306 = $NoAubootwLogUsr | Select-Object -ExpandProperty NoAutoRebootWithLoggedOnUsers
                        if ($PolRes306 -eq '0'){
                            $Res306 = '1'} else {$Res306 = '2'}
                            }
		                $Str306 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag306 + ';' + $Desc306 + ';' + $Res306 + ';' + $Using:CurntDateForm)
		                $Str306
                        }

                        #========================================================================================================================================================
                        #18.9.85 Windows Installer
                        #   This section contains recommendations related to Windows Installer.
                        #   This Group Policy section is provided by the Group Policy template MSI.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.85.1 (L1) Ensure 'Allow user control over installs' is set to 'Disabled' (Scored) W2K16
                        $Tag553 = '18.9.85.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc553 = 'Ensure Allow user control over installs is set to Disabled (Scored)'
                        $Lvl553 = 'L1'
		                $EnbUsrControl = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name EnableUserControl -ErrorAction 'silentlycontinue'
                        if (!$EnbUsrControl){
                            $Res553 = '2'}
                        Else{
                        $PolRes553 = $EnbUsrControl | Select-Object -ExpandProperty EnableUserControl
                        if ($PolRes553 -eq '0'){
                            $Res553 = '1'} else {$Res553 = '2'}
                            }
		                $Str553 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag553 + ';' + $Desc553 + ';' + $Res553 + ';' + $Using:CurntDateForm)
		                $Str553
						}

                        #18.9.85.2 (L1) Ensure 'Always install with elevated privileges' is set to 'Disabled' (Scored) W2K16
                        $Tag554 = '18.9.85.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc554 = 'Ensure Always install with elevated privileges is set to Disabled (Scored)'
                        $Lvl554 = 'L1'
		                $AllwInstElev = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name AlwaysInstallElevated -ErrorAction 'silentlycontinue'
                        if (!$AllwInstElev){
                            $Res554 = '2'}
                        Else{
                        $PolRes554 = $AllwInstElev | Select-Object -ExpandProperty AlwaysInstallElevated
                        if ($PolRes554 -eq '0'){
                            $Res554 = '1'} else {$Res554 = '2'}
                            }
		                $Str554 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag554 + ';' + $Desc554 + ';' + $Res554 + ';' + $Using:CurntDateForm)
		                $Str554
						}

                        #18.9.85.3 (L2) Ensure 'Prevent Internet Explorer security prompt for Windows Installer scripts' is set to 'Disabled' (Scored) W2K16
                        $Tag555 = '18.9.85.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc555 = 'Ensure Prevent Internet Explorer security prompt for Windows Installer scripts is set to Disabled (Scored)'
                        $Lvl555 = 'L2'
		                $Sf4Script = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\Installer' -Name SafeForScripting -ErrorAction 'silentlycontinue'
                        if (!$Sf4Script){
                            $Res555 = '2'}
                        Else{
                        $PolRes555 = $Sf4Script | Select-Object -ExpandProperty SafeForScripting
                        if ($PolRes555 -eq '0'){
                            $Res555 = '1'} else {$Res555 = '2'}
                            }
		                $Str555 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag555 + ';' + $Desc555 + ';' + $Res555 + ';' + $Using:CurntDateForm)
		                $Str555
						}

                        #========================================================================================================================================================
                        #18.9.86 Windows Logon Options
                        #   This section contains recommendations related to Windows Logon Options.
                        #   This Group Policy section is provided by the Group Policy template WinLogon.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.86.1 (L1) Ensure 'Sign-in last interactive user automatically after a system-initiated restart' is set to 'Disabled' (Scored) W2K16
                        $Tag556 = '18.9.86.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc556 = 'Ensure Sign-in last interactive user automatically after a system-initiated restart is set to Disabled (Scored)'
                        $Lvl556 = 'L1'
		                $DsbAutoRstrSgnon = Get-ItemProperty -Path 'HKLM:Software\Microsoft\Windows\CurrentVersion\Policies\System' -Name DisableAutomaticRestartSignOn -ErrorAction 'silentlycontinue'
                        if (!$DsbAutoRstrSgnon){
                            $Res556 = '2'}
                        Else{
                        $PolRes556 = $DsbAutoRstrSgnon | Select-Object -ExpandProperty DisableAutomaticRestartSignOn
                        if ($PolRes556 -eq '0'){
                            $Res556 = '1'} else {$Res556 = '2'}
                            }
		                $Str556 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag556 + ';' + $Desc556 + ';' + $Res556 + ';' + $Using:CurntDateForm)
		                $Str556
						}

                        #========================================================================================================================================================
                        #18.9.87 Windows Mail
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsMail.admx/adml that is only included with the
                        #   Microsoft Windows Vista through the Windows 10 Release 1703 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.88 Windows Media Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MediaCenter.admx/adml that is only included with the
                        #   Microsoft Windows Vista through Windows 10 Release 1511 Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.89 Windows Media Digital Rights Management
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsMediaDRM.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.90 Windows Media Player
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsMediaPlayer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.91 Windows Meeting Space
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsCollaboration.admx/adml that is only included with the
                        #   Microsoft Windows Vista and Server 2008 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.92 Windows Messenger
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template WindowsMessenger.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.93 Windows Mobility Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MobilePCMobilityCenter.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.94 Windows Movie Maker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template MovieMaker.admx/adml that is only included with the
                        #   Microsoft Windows Vista and Server 2008 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.95 Windows PowerShell
                        #   This section contains recommendations related to Windows PowerShell.
                        #   This Group Policy section is provided by the Group Policy template PowerShellExecutionPolicy.admx/adml that is included with the
                        #   Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #18.9.95.1 (L1) Ensure 'Turn on PowerShell Script Block Logging' is set to 'Disabled' (Scored) W2K16
                        $Tag557 = '18.9.95.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc557 = 'Ensure Turn on PowerShell Script Block Logging is set to Disabled (Scored)'
                        $Lvl557 = 'L1'
		                $EnbScrptBlckLog = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging' -Name EnableScriptBlockLogging -ErrorAction 'silentlycontinue'
                        if (!$EnbScrptBlckLog){
                            $Res557 = '2'}
                        Else{
                        $PolRes557 = $EnbScrptBlckLog | Select-Object -ExpandProperty EnableScriptBlockLogging
                        if ($PolRes557 -eq '0'){
                            $Res557 = '1'} else {$Res557 = '2'}
                            }
		                $Str557 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag557 + ';' + $Desc557 + ';' + $Res557 + ';' + $Using:CurntDateForm)
		                $Str557
						}

                        #18.9.95.2 (L1) Ensure 'Turn on PowerShell Transcription' is set to 'Disabled' (Scored) W2K16
                        $Tag558 = '18.9.95.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc558 = 'Ensure Turn on PowerShell Transcription is set to Disabled (Scored)'
                        $Lvl558 = 'L1'
		                $EnbTrnsc = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\PowerShell\Transcription' -Name EnableTranscripting -ErrorAction 'silentlycontinue'
                        if (!$EnbTrnsc){
                            $Res558 = '2'}
                        Else{
                        $PolRes558 = $EnbTrnsc | Select-Object -ExpandProperty EnableTranscripting
                        if ($PolRes558 -eq '0'){
                            $Res558 = '1'} else {$Res558 = '2'}
                            }
		                $Str558 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag558 + ';' + $Desc558 + ';' + $Res558 + ';' + $Using:CurntDateForm)
		                $Str558
						}

                        #========================================================================================================================================================
                        #18.9.96 Windows Reliability Analysis
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template RacWmiProv.admx/adml that is included with the
                        #   Microsoft Windows 7 & Server 2008 R2 Administrative Templates (or newer).
                        #========================================================================================================================================================
                        #18.9.97 Windows Remote Management (WinRM)
                        #   This section contains recommendations related to Windows Remote Management (WinRM).
                        #   This Group Policy section is provided by the Group Policy template WindowsRemoteManagement.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.97.1 WinRM Client
                        #   This section contains recommendations related to the Windows Remote Management (WinRM) client.
                        #   This Group Policy section is provided by the Group Policy template WindowsRemoteManagement.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.9.97.1.1 (L1) Ensure 'Allow Basic authentication' is set to 'Disabled' (Scored) W2K16
                        $Tag559 = '18.9.97.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc559 = 'Ensure Allow Basic authentication is set to Disabled (Scored)'
                        $Lvl559 = 'L1'
		                $CliAllowBasic = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowBasic -ErrorAction 'silentlycontinue'
                        if (!$CliAllowBasic){
                            $Res559 = '2'}
                        Else{
                        $PolRes559 = $CliAllowBasic | Select-Object -ExpandProperty AllowBasic
                        if ($PolRes559 -eq '0'){
                            $Res559 = '1'} else {$Res559 = '2'}
                            }
		                $Str559 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag559 + ';' + $Desc559 + ';' + $Res559 + ';' + $Using:CurntDateForm)
		                $Str559
						}

                        #18.9.97.1.2 (L1) Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Scored) W2K16
                        $Tag560 = '18.9.97.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc560 = 'Ensure Allow unencrypted traffic is set to Disabled (Scored)'
                        $Lvl560 = 'L1'
		                $CliAllowUnecTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowUnencryptedTraffic -ErrorAction 'silentlycontinue'
                        if (!$CliAllowUnecTx){
                            $Res560 = '2'}
                        Else{
                        $PolRes560 = $CliAllowUnecTx | Select-Object -ExpandProperty AllowUnencryptedTraffic
                        if ($PolRes560 -eq '0'){
                            $Res560 = '1'} else {$Res560 = '2'}
                            }
		                $Str560 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag560 + ';' + $Desc560 + ';' + $Res560 + ';' + $Using:CurntDateForm)
		                $Str560
						}

                        #18.9.97.1.3 (L1) Ensure 'Disallow Digest authentication' is set to 'Enabled' (Scored) W2K16
                        $Tag561 = '18.9.97.1.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc561 = 'Ensure Disallow Digest authentication is set to Enabled (Scored)'
                        $Lvl561 = 'L1'
		                $CliAllowDigest = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Client' -Name AllowDigest -ErrorAction 'silentlycontinue'
                        if (!$CliAllowDigest){
                            $Res561 = '2'}
                        Else{
                        $PolRes561 = $CliAllowDigest | Select-Object -ExpandProperty AllowDigest
                        if ($PolRes561 -eq '1'){
                            $Res561 = '1'} else {$Res561 = '2'}
                            }
		                $Str561 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag561 + ';' + $Desc561 + ';' + $Res561 + ';' + $Using:CurntDateForm)
		                $Str561
						}

                        #========================================================================================================================================================
                        #18.9.97.2 WinRM Service
                        #   This section contains recommendations related to the Windows Remote Management (WinRM) service.
                        #   This Group Policy section is provided by the Group Policy template WindowsRemoteManagement.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.9.97.2.1 (L1) Ensure 'Allow Basic authentication' is set to 'Disabled' (Scored) W2K16
                        $Tag562 = '18.9.97.2.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc562 = 'Ensure Allow Basic authentication is set to Disabled (Scored)'
                        $Lvl562 = 'L1'
		                $SrvAllowBasic = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name AllowBasic -ErrorAction 'silentlycontinue'
                        if (!$SrvAllowBasic){
                            $Res562 = '2'}
                        Else{
                        $PolRes562 = $SrvAllowBasic | Select-Object -ExpandProperty AllowBasic
                        if ($PolRes562 -eq '0'){
                            $Res562 = '1'} else {$Res562 = '2'}
                            }
		                $Str562 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag562 + ';' + $Desc562 + ';' + $Res562 + ';' + $Using:CurntDateForm)
		                $Str562
						}

                        #18.9.97.2.2 (L2) Ensure 'Allow remote server management through WinRM' is set to 'Disabled' (Scored) W2K16
                        $Tag563 = '18.9.97.2.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc563 = 'Ensure Allow remote server management through WinRM is set to Disabled (Scored)'
                        $Lvl563 = 'L1'
		                $SrvAllowBasic = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WinRM\Service' -Name AllowAutoConfig -ErrorAction 'silentlycontinue'
                        if (!$SrvAllowBasic){
                            $Res563 = '2'}
                        Else{
                        $PolRes563 = $SrvAllowBasic | Select-Object -ExpandProperty AllowAutoConfig
                        if ($PolRes563 -eq '0'){
                            $Res563 = '1'} else {$Res563 = '2'}
                            }
		                $Str563 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag563 + ';' + $Desc563 + ';' + $Res563 + ';' + $Using:CurntDateForm)
		                $Str563
						}

                        #18.9.97.2.3 (L1) Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Scored) W2K16
                        $Tag564 = '18.9.97.2.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc564 = 'Ensure Allow unencrypted traffic is set to Disabled (Scored)'
                        $Lvl564 = 'L1'
		                $SrvAllowUnecTx = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name AllowUnencryptedTraffic -ErrorAction 'silentlycontinue'
                        if (!$SrvAllowUnecTx){
                            $Res564 = '2'}
                        Else{
                        $PolRes564 = $SrvAllowUnecTx | Select-Object -ExpandProperty AllowUnencryptedTraffic
                        if ($PolRes564 -eq '0'){
                            $Res564 = '1'} else {$Res564 = '2'}
                            }
		                $Str564 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag564 + ';' + $Desc564 + ';' + $Res564 + ';' + $Using:CurntDateForm)
		                $Str564
						}

                        #18.9.97.2.4 (L1) Ensure 'Disallow WinRM from storing RunAs credentials' is set to 'Enabled' (Scored) W2K16
                        $Tag565 = '18.9.97.2.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc565 = 'Ensure Disallow WinRM from storing RunAs credentials is set to Enabled (Scored)'
                        $Lvl565 = 'L1'
		                $DsbRunAs = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service' -Name DisableRunAs -ErrorAction 'silentlycontinue'
                        if (!$DsbRunAs){
                            $Res565 = '2'}
                        Else{
                        $PolRes282 = $DsbRunAs | Select-Object -ExpandProperty DisableRunAs
                        if ($PolRes282 -eq '1'){
                            $Res565 = '1'} else {$Res565 = '2'}
                            }
		                $Str565 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag565 + ';' + $Desc565 + ';' + $Res565 + ';' + $Using:CurntDateForm)
		                $Str565
						}

                        #========================================================================================================================================================
                        #18.9.98 Windows Remote Shell
                        #   This section contains settings related to Windows Remote Shell (WinRS).
                        #   This Group Policy section is provided by the Group Policy template WindowsRemoteShell.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #18.9.98.1 (L2) Ensure 'Allow Remote Shell Access' is set to 'Disabled' (Scored) W2K16
                        $Tag566 = '18.9.98.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc566 = 'Ensure Allow Remote Shell Access is set to Disabled (Scored)'
                        $Lvl566 = 'L2'
		                $AllwRemShellAcc = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WinRM\Service\WinRS' -Name AllowRemoteShellAccess -ErrorAction 'silentlycontinue'
                        if (!$AllwRemShellAcc){
                            $Res566 = '2'}
                        Else{
                        $PolRes566 = $AllwRemShellAcc | Select-Object -ExpandProperty AllowRemoteShellAccess
                        if ($PolRes566 -eq '0'){
                            $Res566 = '1'} else {$Res566 = '2'}
                            }
		                $Str566 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag566 + ';' + $Desc566 + ';' + $Res566 + ';' + $Using:CurntDateForm)
		                $Str566
						}

                        #========================================================================================================================================================
                        #18.9.99 Windows SideShow
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SideShow.admx/adml that is only included with the
                        #   Microsoft Windows Vista Administrative Templates through Microsoft Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.100 Windows System Resource Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   This Group Policy section is provided by the Group Policy template SystemResourceManager.admx/adml that is only included with the
                        #   Microsoft Windows Vista through Windows 8.0 & Server 2012 (non-R2) Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.101 Windows Update
                        #   This section contains recommendations related to Windows Update.
                        #   This Group Policy section is provided by the Group Policy template WindowsUpdate.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        #18.9.101.1 Windows Update for Business (formerly Defer Windows Updates)
                        #   This section contains recommendations related to Windows Update for Business.
                        #   This Group Policy section is provided by the Group Policy template WindowsUpdate.admx/adml that is included with the
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #   Note: This section was initially named Defer Windows Updates but was renamed by Microsoft to Windows Update for Business starting with the
                        #   Microsoft Windows 10 Release 1709 Administrative Templates.
                        #========================================================================================================================================================

                        #18.9.101.1.1 (L1) Ensure 'Manage preview builds' is set to 'Enabled: Disable preview builds' (Scored) W2K16
                        $Tag567 = '18.9.101.1.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc567 = 'Ensure Manage preview builds is set to Enabled: Disable preview builds (Scored)'
                        $Lvl567 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name ManagePreviewBuilds -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name ManagePreviewBuildsPolicyValue -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res567 = '2'}
                        Else{
                        $PolRes567a = $RegistrarsKey1 | Select-Object -ExpandProperty ManagePreviewBuilds
                        $PolRes567b = $RegistrarsKey2 | Select-Object -ExpandProperty ManagePreviewBuildsPolicyValue
        
                        if (($PolRes567a -eq '1') -and ($PolRes567b -eq '1')){
                            $Res567 = '1'} else {$Res567 = '2'}
                            }
		                $Str567 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag567 + ';' + $Desc567 + ';' + $Res567 + ';' + $Using:CurntDateForm)
                        $Str567
						}

                        #18.9.101.1.2 (L1) Ensure 'Select when Preview Builds and Feature Updates are received' is set to 'Enabled: Semi-Annual Channel, 180 or more days' (Scored) W2K16
                        $Tag568 = '18.9.101.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc568 = 'Ensure Select when Preview Builds and Feature Updates are received is set to Enabled: Semi-Annual Channel, 180 or more days (Scored)'
                        $Lvl568 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name DeferFeatureUpdates -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name DeferFeatureUpdatesPeriodInDays -ErrorAction 'silentlycontinue'
                        $RegistrarsKey3 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name BranchReadinessLevel -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2) -or (!$RegistrarsKey3)) {
                            $Res568 = '2'}
                        Else{
                        $PolRes568a = $RegistrarsKey1 | Select-Object -ExpandProperty DeferFeatureUpdates
                        $PolRes568b = $RegistrarsKey2 | Select-Object -ExpandProperty DeferFeatureUpdatesPeriodInDays
                        $PolRes568c = $RegistrarsKey3 | Select-Object -ExpandProperty BranchReadinessLevel
						
						$PolRes568a = $RegistrarsKey1 -as [int]
						$PolRes568b = $RegistrarsKey2 -as [int]
						$PolRes568c = $RegistrarsKey3 -as [int]
						
                        if (($PolRes568a -eq '180') -and ($PolRes568b -eq '180') -and ($PolRes568c -eq '180')){
                            $Res568 = '1'} else {$Res568 = '2'}
                            }
		                $Str568 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag568 + ';' + $Desc568 + ';' + $Res568 + ';' + $Using:CurntDateForm)
                        $Str568
						}

                        #18.9.101.1.3 (L1) Ensure 'Select when Quality Updates are received' is set to 'Enabled: 0 days' (Scored) W2K16
                        $Tag569 = '18.9.101.1.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc569 = 'Ensure Select when Preview Builds and Feature Updates are received is set to Enabled: Semi-Annual Channel, 180 or more days (Scored)'
                        $Lvl569 = 'L1'
		                $RegistrarsKey1 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name DeferQualityUpdates -ErrorAction 'silentlycontinue'
                        $RegistrarsKey2 = Get-ItemProperty -Path 'HKLM:SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name DeferQualityUpdatesPeriodInDays -ErrorAction 'silentlycontinue'

                        if ((!$RegistrarsKey1) -or (!$RegistrarsKey2)) {
                            $Res569 = '2'}
                        Else{
                        $PolRes569a = $RegistrarsKey1 | Select-Object -ExpandProperty DeferQualityUpdates
                        $PolRes569b = $RegistrarsKey2 | Select-Object -ExpandProperty DeferQualityUpdatesPeriodInDays
						
                        if (($PolRes569a -eq '1') -and ($PolRes569b -eq '1')){
                            $Res569 = '1'} else {$Res569 = '2'}
                            }
		                $Str569 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag569 + ';' + $Desc569 + ';' + $Res569 + ';' + $Using:CurntDateForm)
                        $Str569
						}

                        #18.9.101.2 (L1) Ensure 'Configure Automatic Updates' is set to 'Enabled' (Scored) W2K16
                        $Tag570 = '18.9.101.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc570 = 'Ensure Configure Automatic Updates is set to Enabled (Scored)'
                        $Lvl570 = 'L1'
		                $NoAuUpdt = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name NoAutoUpdate -ErrorAction 'silentlycontinue'
                        if (!$NoAuUpdt){
                            $Res570 = '2'}
                        Else{
                        $PolRes570 = $NoAuUpdt | Select-Object -ExpandProperty NoAutoUpdate
                        if ($PolRes570 -eq '1'){
                            $Res570 = '1'} else {$Res570 = '2'}
                            }
		                $Str570 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag570 + ';' + $Desc570 + ';' + $Res570 + ';' + $Using:CurntDateForm)
		                $Str570
						}

                        #18.9.101.3 (L1) Ensure 'Configure Automatic Updates: Scheduled install day' is set to '0 - Every day' (Scored) W2K16
                        $Tag571 = '18.9.101.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc571 = 'Ensure Configure Automatic Updates: Scheduled install day is set to 0 - Every day (Scored)'
                        $Lvl571 = 'L1'
		                $SchInstllDay = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name ScheduledInstallDay -ErrorAction 'silentlycontinue'
                        if (!$SchInstllDay){
                            $Res571 = '2'}
                        Else{
                        $PolRes571 = $SchInstllDay | Select-Object -ExpandProperty ScheduledInstallDay
                        if ($PolRes571 -eq '0'){
                            $Res571 = '1'} else {$Res571 = '2'}
                            }
		                $Str571 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag571 + ';' + $Desc571 + ';' + $Res571 + ';' + $Using:CurntDateForm)
		                $Str571
						}

                        #18.9.101.4 (L1) Ensure 'No auto-restart with logged on users for scheduled automatic updates installations' is set to 'Disabled' (Scored) W2K16
                        $Tag572 = '18.9.101.4'
						if ($OSVersion -eq 'W2K16') {
                        $Count18++
		                $Desc572 = 'Ensure No auto-restart with logged on users for scheduled automatic updates installations is set to Disabled (Scored)'
                        $Lvl572 = 'L1'
		                $NoAubootwLogUsr = Get-ItemProperty -Path 'HKLM:Software\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name NoAutoRebootWithLoggedOnUsers -ErrorAction 'silentlycontinue'
                        if (!$NoAubootwLogUsr){
                            $Res572 = '2'}
                        Else{
                        $PolRes572 = $NoAubootwLogUsr | Select-Object -ExpandProperty NoAutoRebootWithLoggedOnUsers
                        if ($PolRes572 -eq '0'){
                            $Res572 = '1'} else {$Res572 = '2'}
                            }
		                $Str572 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag572 + ';' + $Desc572 + ';' + $Res572 + ';' + $Using:CurntDateForm)
		                $Str572
						}

                        #========================================================================================================================================================
                        #19 Administrative Templates (User)
                        #   This section contains user-based recommendations from Group Policy Administrative Templates (ADMX). 
                        #========================================================================================================================================================
                        #19 Administrative Templates (User)
                        #   This section contains recommendations for user-based administrative templates.
                        #========================================================================================================================================================
                        
                        $CapNum19 = '19.'
                        $Cap19 = 'Administrative Templates (User)'
                        $Count19 = 0

                        #========================================================================================================================================================
                        #19.1 Control Panel
                        #   This section contains recommendations for Control Panel settings.
                        #========================================================================================================================================================
                        #19.1.1 Add or Remove Programs
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.1.2 Display
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.1.3 Personalization
                        #   This section contains recommendations for personalization settings.
                        #========================================================================================================================================================
                        
                        #19.1.3.1 (L1) Ensure 'Enable screen saver' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag307 = '19.1.3.1'
                        $Count19++
		                $Desc307 = 'Ensure Enable screen saver is set to Enabled (Scored)'
                        $Lvl307 = 'L1'
		                $AllUsrSID307 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID307 = $AllUsrSID307.substring(11)
                        $CurrUsr307 = $UsrID307 | where{$_ -like "S-1-5-21-*"}
                        $SID307 = $CurrUsr307[0]
                        $RegPathKey307 = $('HKEY_USERS\' + $SID307 + '\Software\Policies\Microsoft\Windows\Control Panel\Desktop')
                        $ScrnSvrAct = Get-ItemProperty -Path $RegPathKey307 -Name ScreenSaveActive -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrAct){
                            $Res307 = '2'}
                        Else{
                        $PolRes307 = $ScrnSvrAct | Select-Object -ExpandProperty ScreenSaveActive
                        if ($PolRes307 -eq '1'){
                            $Res307 = '1'} else {$Res307 = '2'}
                            }
		                $Str307 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag307 + ';' + $Desc307 + ';' + $Res307 + ';' + $Using:CurntDateForm)
		                $Str307

                        #19.1.3.2 (L1) Ensure 'Force specific screen saver: Screen saver executable name' is set to 'Enabled: scrnsave.scr' (Scored) W2K12 W2K16
                        $Tag308 = '19.1.3.2'
                        $Count19++
		                $Desc308 = 'Ensure Force specific screen saver: Screen saver executable name is set to Enabled: scrnsave.scr (Scored)'
                        $Lvl308 = 'L1'
		                $AllUsrSID308 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID308 = $AllUsrSID308.substring(11)
                        $CurrUsr308 = $UsrID308 | where{$_ -like "S-1-5-21-*"}
                        $SID308 = $CurrUsr308[0]
                        $RegPathKey308 = $('HKEY_USERS\' + $SID308 + '\Software\Policies\Microsoft\Windows\Control Panel\Desktop')
                        $ScrnSvrExc = Get-ItemProperty -Path $RegPathKey308 -Name SCRNSAVE.EXE -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrExc){
                            $Res308 = '2'}
                        Else{
                        $PolRes308 = $ScrnSvrExc | Select-Object -ExpandProperty SCRNSAVE.EXE
                        if ($PolRes308 -eq '1'){
                            $Res308 = '1'} else {$Res308 = '2'}
                            }
		                $Str308 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag308 + ';' + $Desc308 + ';' + $Res308 + ';' + $Using:CurntDateForm)
		                $Str308

                        #19.1.3.3 (L1) Ensure 'Password protect the screen saver' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag309 = '19.1.3.3'
                        $Count19++
		                $Desc309 = 'Ensure Password protect the screen saver is set to Enabled (Scored)'
                        $Lvl309 = 'L1'
		                $AllUsrSID309 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID309 = $AllUsrSID309.substring(11)
                        $CurrUsr309 = $UsrID309 | where{$_ -like "S-1-5-21-*"}
                        $SID309 = $CurrUsr309[0]
                        $RegPathKey309 = $('HKEY_USERS\' + $SID309 + '\Software\Policies\Microsoft\Windows\Control Panel\Desktop')
                        $ScrnSvrSec = Get-ItemProperty -Path $RegPathKey309 -Name ScreenSaverIsSecure -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrSec){
                            $Res309 = '2'}
                        Else{
                        $PolRes309 = $ScrnSvrSec | Select-Object -ExpandProperty ScreenSaverIsSecure
                        if ($PolRes309 -eq '1'){
                            $Res309 = '1'} else {$Res309 = '2'}
                            }
		                $Str309 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag309 + ';' + $Desc309 + ';' + $Res309 + ';' + $Using:CurntDateForm)
		                $Str309

                        #19.1.3.4 (L1) Ensure 'Screen saver timeout' is set to 'Enabled: 900 seconds or fewer, but not 0' (Scored) W2K12 W2K16
                        $Tag310 = '19.1.3.4'
                        $Count19++
		                $Desc310 = 'Ensure Screen saver timeout is set to Enabled: 900 seconds or fewer but not 0 (Scored)'
                        $Lvl310 = 'L1'
		                $AllUsrSID310 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID310 = $AllUsrSID310.substring(11)
                        $CurrUsr310 = $UsrID310 | where{$_ -like "S-1-5-21-*"}
                        $SID310 = $CurrUsr310[0]
                        $RegPathKey310 = $('HKEY_USERS\' + $SID310 + '\Software\Policies\Microsoft\Windows\Control Panel\Desktop')
                        $ScrnSvrTmOut = Get-ItemProperty -Path $RegPathKey310 -Name ScreenSaveTimeOut -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrTmOut){
                            $Res310 = '2'}
                        Else{
                        $ScrnSverTmOut = $ScrnSvrTmOut | Select-Object -ExpandProperty ScreenSaveTimeOut
                        $PolRes310 = $ScrnSverTmOut -as [int]
		                if (($PolRes310 -le '900') -and ($PolRes310 -ne '0')){
                            $Res310 = '1'} else {$Res310 = '2'}
                            }
		                $Str310 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag310 + ';' + $Desc310 + ';' + $Res310 + ';' + $Using:CurntDateForm)
		                $Str310

                        #========================================================================================================================================================
                        #19.2 Desktop
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.3 Network
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.4 Shared Folders
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.5 Start Menu and Taskbar
                        #   This section contains recommendations for Start Menu and Taskbar settings.
                        #========================================================================================================================================================
                        #19.5.1 Notifications
                        #   This section contains recommendations for Notification settings.
                        #========================================================================================================================================================

                        #19.5.1.1 (L1) Ensure 'Turn off toast notifications on the lock screen' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag311 = '19.5.1.1'
                        $Count19++
		                $Desc311 = 'Ensure Screen saver timeout is set to Enabled: 900 seconds or fewer but not 0 (Scored)'
                        $Lvl311 = 'L1'
		                $AllUsrSID311 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID311 = $AllUsrSID311.substring(11)
                        $CurrUsr311 = $UsrID311 | where{$_ -like "S-1-5-21-*"}
                        $SID311 = $CurrUsr311[0]
                        $RegPathKey311 = $('HKEY_USERS\' + $SID311 + '\Software\Policies\Microsoft\Windows\Control Panel\Desktop')
                        $NotTstappNtf = Get-ItemProperty -Path $RegPathKey311 -Name NoToastApplicationNotificationOnLockScreen -ErrorAction 'silentlycontinue'
                        if (!$NotTstappNtf){
                            $Res311 = '2'}
                        Else{
                        $PolRes311 = $NotTstappNtf | Select-Object -ExpandProperty NoToastApplicationNotificationOnLockScreen
                        if ($PolRes311 -eq '1'){
                            $Res311 = '1'} else {$Res311 = '2'}
                            }
		                $Str311 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag311 + ';' + $Desc311 + ';' + $Res311 + ';' + $Using:CurntDateForm)
		                $Str311

                        #========================================================================================================================================================
                        #19.6 System
                        #   This section contains recommendations for System settings.
                        #========================================================================================================================================================
                        #19.6.1 Ctrl+Alt+Del Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.6.2 Driver Installation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.6.3 Folder Redirection
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.6.4 Group Policy
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.6.5 Internet Communication Management
                        #   This section contains recommendations related to Internet Communication Management.
                        #========================================================================================================================================================
                        #19.6.5.1 Internet Communication settings
                        #   This section contains recommendations related to Internet Communication settings.
                        #========================================================================================================================================================

                        #19.6.5.1.1 (L2) Ensure 'Turn off Help Experience Improvement Program' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag312 = '19.6.5.1.1'
                        $Count19++
		                $Desc312 = 'Ensure Turn off Help Experience Improvement Program is set to Enabled (Scored)'
                        $Lvl312 = 'L2'
		                $AllUsrSID312 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID312 = $AllUsrSID312.substring(11)
                        $CurrUsr312 = $UsrID312 | where{$_ -like "S-1-5-21-*"}
                        $SID312 = $CurrUsr312[0]
                        $RegPathKey312 = $('HKEY_USERS\' + $SID312 + '\Software\Policies\Microsoft\Assistance\Client\1.0')
                        $NoImplcFBck = Get-ItemProperty -Path $RegPathKey312 -Name NoImplicitFeedback -ErrorAction 'silentlycontinue'
                        if (!$NoImplcFBck){
                            $Res312 = '2'}
                        Else{
                        $PolRes312 = $NoImplcFBck | Select-Object -ExpandProperty NoImplicitFeedback
                        if ($PolRes312 -eq '1'){
                            $Res312 = '1'} else {$Res312 = '2'}
                            }
		                $Str312 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag312 + ';' + $Desc312 + ';' + $Res312 + ';' + $Using:CurntDateForm)
		                $Str312

                        #========================================================================================================================================================
                        #19.7 Windows Components
                        #   This section contains recommendations for Windows Component settings.
                        #========================================================================================================================================================
                        #19.7.1 Add features to Windows 8 / 8.1 / 10
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WindowsAnytimeUpgrade.admx/adml" that is included 
                        #   with the Microsoft Windows 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.2 App runtime
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.3 Application Compatibility
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.4 Attachment Manager
                        #   This section contains recommendations related to Attachment Manager.
                        #========================================================================================================================================================
                        
                        #19.7.4.1 (L1) Ensure 'Do not preserve zone information in file attachments' is set to 'Disabled' (Scored) W2K12 W2K16
                        $Tag313 = '19.7.4.1'
                        $Count19++
		                $Desc313 = 'Ensure Do not preserve zone information in file attachments is set to Disabled (Scored)'
                        $Lvl313 = 'L1'
		                $AllUsrSID313 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID313 = $AllUsrSID313.substring(11)
                        $CurrUsr313 = $UsrID313 | where{$_ -like "S-1-5-21-*"}
                        $SID313 = $CurrUsr313[0]
                        $RegPathKey313 = $('HKEY_USERS\' + $SID313 + '\Software\Microsoft\Windows\CurrentVersion\Policies\Attachments')
                        $SvZoneInfo = Get-ItemProperty -Path $RegPathKey313 -Name SaveZoneInformation -ErrorAction 'silentlycontinue'
                        if (!$SvZoneInfo){
                            $Res313 = '2'}
                        Else{
                        $PolRes313 = $SvZoneInfo | Select-Object -ExpandProperty SaveZoneInformation
                        if ($PolRes313 -eq '0'){
                            $Res313 = '1'} else {$Res313 = '2'}
                            }
		                $Str313 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag313 + ';' + $Desc313 + ';' + $Res313 + ';' + $Using:CurntDateForm)
		                $Str313

                        #19.7.4.2 (L1) Ensure 'Notify antivirus programs when opening attachments' is set to 'Enabled' (Scored) W2K12 W2K16
                        $Tag314 = '19.7.4.2'
                        $Count19++
		                $Desc314 = 'Ensure Notify antivirus programs when opening attachments is set to Enabled (Scored)'
                        $Lvl314 = 'L1'
		                $AllUsrSID314 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID314 = $AllUsrSID314.substring(11)
                        $CurrUsr314 = $UsrID314 | where{$_ -like "S-1-5-21-*"}
                        $SID314 = $CurrUsr314[0]
                        $RegPathKey314 = $('HKEY_USERS\' + $SID314 + '\Software\Microsoft\Windows\CurrentVersion\Policies\Attachments')
                        $ScnwthAV = Get-ItemProperty -Path $RegPathKey314 -Name ScanWithAntiVirus -ErrorAction 'silentlycontinue'
                        if (!$ScnwthAV){
                            $Res314 = '2'}
                        Else{
                        $PolRes314 = $ScnwthAV | Select-Object -ExpandProperty ScanWithAntiVirus
                        if ($PolRes314 -eq '1'){
                            $Res314 = '1'} else {$Res314 = '2'}
                            }
		                $Str314 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag314 + ';' + $Desc314 + ';' + $Res314 + ';' + $Using:CurntDateForm)
		                $Str314

                        #========================================================================================================================================================
                        #19.7.5 AutoPlay Policies
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.6 Backup
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WindowsBackup.admx/adml" that is included with the 
                        #   Microsoft Windows Vista, 2008, 7/2008R2, 8/2012 and 8.1/2012R2 Administrative Templates, or the Group Policy template "UserDataBackup.admx/adml" 
                        #   included with the Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.7 Credential User Interface
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.7 Cloud Content
                        #   This section contains recommendations for Cloud Content.
                        #   This Group Policy section is provided by the Group Policy template CloudContent.admx/adml that is included with the 
                        #   Microsoft Windows 10 Release 1607 & Server 2016 Administrative Templates (or newer).
                        #========================================================================================================================================================

                        #19.7.7.1 (L1) Ensure 'Configure Windows spotlight on lock screen' is set to Disabled' (Scored) W2K16
                        $Tag573 = '19.7.7.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc573 = 'Ensure Configure Windows spotlight on lock screen is set to Disabled (Scored)'
                        $Lvl573 = 'L1'
		                $AllUsrSID573 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID573 = $AllUsrSID573.substring(11)
                        $CurrUsr573 = $UsrID573 | where{$_ -like "S-1-5-21-*"}
                        $SID573 = $CurrUsr573[0]
                        $RegPathKey573 = $('HKEY_USERS\' + $SID573 + '\Software\Policies\Microsoft\Windows\CloudContent')
                        $ScrnSvrAct = Get-ItemProperty -Path $RegPathKey573 -Name ConfigureWindowsSpotlight -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrAct){
                            $Res573 = '2'}
                        Else{
                        $PolRes573 = $ScrnSvrAct | Select-Object -ExpandProperty ConfigureWindowsSpotlight
                        if ($PolRes573 -eq '0'){
                            $Res573 = '1'} else {$Res573 = '2'}
                            }
		                $Str573 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag573 + ';' + $Desc573 + ';' + $Res573 + ';' + $Using:CurntDateForm)
		                $Str573
						}

                        #19.7.7.2 (L1) Ensure 'Do not suggest third-party content in Windows spotlight' is set to 'Enabled' (Scored) W2K16
                        $Tag574 = '19.7.7.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc574 = 'Enssure Do not suggest third-party content in Windows spotlight is set to Enabled (Scored)'
                        $Lvl574 = 'L1'
		                $AllUsrSID574 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID574 = $AllUsrSID574.substring(11)
                        $CurrUsr574 = $UsrID574 | where{$_ -like "S-1-5-21-*"}
                        $SID574 = $CurrUsr574[0]
                        $RegPathKey574 = $('HKEY_USERS\' + $SID574 + '\Software\Policies\Microsoft\Windows\CloudContent')
                        $ScrnSvrAct = Get-ItemProperty -Path $RegPathKey574 -Name DisableThirdPartySuggestions -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrAct){
                            $Res574 = '2'}
                        Else{
                        $PolRes574 = $ScrnSvrAct | Select-Object -ExpandProperty DisableThirdPartySuggestions
                        if ($PolRes574 -eq '1'){
                            $Res574 = '1'} else {$Res574 = '2'}
                            }
		                $Str574 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag574 + ';' + $Desc574 + ';' + $Res574 + ';' + $Using:CurntDateForm)
		                $Str574
						}

                        #19.7.7.3 (L2) Ensure 'Do not use diagnostic data for tailored experiences' is set to 'Enabled' (Scored) W2K16
                        $Tag575 = '19.7.7.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc575 = 'Ensure Do not use diagnostic data for tailored experiences is set to Enabled (Scored)'
                        $Lvl575 = 'L1'
		                $AllUsrSID575 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID575 = $AllUsrSID575.substring(11)
                        $CurrUsr575 = $UsrID575 | where{$_ -like "S-1-5-21-*"}
                        $SID575 = $CurrUsr575[0]
                        $RegPathKey575 = $('HKEY_USERS\' + $SID575 + '\Software\Policies\Microsoft\Windows\CloudContent')
                        $ScrnSvrAct = Get-ItemProperty -Path $RegPathKey575 -Name DisableTailoredExperiencesWithDiagnosticData -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrAct){
                            $Res575 = '2'}
                        Else{
                        $PolRes575 = $ScrnSvrAct | Select-Object -ExpandProperty DisableTailoredExperiencesWithDiagnosticData
                        if ($PolRes575 -eq '1'){
                            $Res575 = '1'} else {$Res575 = '2'}
                            }
		                $Str575 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag575 + ';' + $Desc575 + ';' + $Res575 + ';' + $Using:CurntDateForm)
		                $Str575
						}

                        #19.7.7.4 (L2) Ensure 'Turn off all Windows spotlight features' is set to 'Enabled' (Scored) W2K16
                        $Tag576 = '19.7.7.3'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc576 = 'Ensure Turn off all Windows spotlight features is set to Enabled (Scored)'
                        $Lvl576 = 'L1'
		                $AllUsrSID576 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID576 = $AllUsrSID576.substring(11)
                        $CurrUsr576 = $UsrID576 | where{$_ -like "S-1-5-21-*"}
                        $SID576 = $CurrUsr576[0]
                        $RegPathKey576 = $('HKEY_USERS\' + $SID576 + '\Software\Policies\Microsoft\Windows\CloudContent')
                        $ScrnSvrAct = Get-ItemProperty -Path $RegPathKey576 -Name DisableWindowsSpotlightFeatures -ErrorAction 'silentlycontinue'
                        if (!$ScrnSvrAct){
                            $Res576 = '2'}
                        Else{
                        $PolRes576 = $ScrnSvrAct | Select-Object -ExpandProperty DisableWindowsSpotlightFeatures
                        if ($PolRes576 -eq '1'){
                            $Res576 = '1'} else {$Res576 = '2'}
                            }
		                $Str576 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag576 + ';' + $Desc576 + ';' + $Res576 + ';' + $Using:CurntDateForm)
		                $Str576
						}

                        #========================================================================================================================================================
                        #19.7.8 Desktop Gadgets
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.9 Desktop Windows Manager
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.10 Digital Locker
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.11 Edge UI
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.12 EMET
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "EMET.admx/adml" that is included with Microsoft 
                        #   Enhanced Mitigation Experience Toolkit (EMET).
                        #========================================================================================================================================================
                        #19.7.13 File Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.14 File Revocation
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.15 IME
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.16 Import Video
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "CaptureWizard.admx/adml" that is included with the
                        #   Microsoft Windows Vista & 2008 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.17 Instant Search
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.18 Internet Explorer
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.19 Location and Sensors
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.20 Microsoft Edge
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "microsoftedge.admx/adml" that is included with the
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.21 Microsoft Management Console
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.22 Microsoft Passport for Work
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "passport.admx/adml" that is included with the 
                        #   Microsoft Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.23 NetMeeting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.24 Network Projector
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.25 Network Sharing
                        #   This section contains recommendations related to Network Sharing.
                        #========================================================================================================================================================
                        
                        #19.7.25.1 (L1) Ensure 'Prevent users from sharing files within their profile.' is set to 'Enabled' (Scored)
                        $Tag315 = '19.7.25.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count19++
		                $Desc315 = 'Ensure Prevent users from sharing files within their profile is set to Enabled (Scored)'
                        $Lvl315 = 'L1'
		                $AllUsrSID315 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID315 = $AllUsrSID315.substring(11)
                        $CurrUsr315 = $UsrID315 | where{$_ -like "S-1-5-21-*"}
                        $SID315 = $CurrUsr315[0]
                        $RegPathKey315 = $('HKEY_USERS\' + $SID315 + '\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer')
                        $NoInplcShre = Get-ItemProperty -Path $RegPathKey315 -Name NoInplaceSharing -ErrorAction 'silentlycontinue'
                        if (!$NoInplcShre){
                            $Res315 = '2'}
                        Else{
                        $PolRes315 = $NoInplcShre | Select-Object -ExpandProperty NoInplaceSharing
                        if ($PolRes315 -eq '1'){
                            $Res315 = '1'} else {$Res315 = '2'}
                            }
		                $Str315 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag315 + ';' + $Desc315 + ';' + $Res315 + ';' + $Using:CurntDateForm)
		                $Str315
                        }

                        #========================================================================================================================================================
                        #19.7.26 Presentation Settings
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.26 Network Sharing
                        #   This section contains recommendations related to Network Sharing.
                        #   This Group Policy section is provided by the Group Policy template Sharing.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #19.7.26.1 (L1) Ensure 'Prevent users from sharing files within their profile.' is set to 'Enabled' (Scored) W2K16
                        $Tag577 = '19.7.26.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc577 = 'Ensure Prevent users from sharing files within their profile is set to Enabled (Scored)'
                        $Lvl577 = 'L1'
		                $AllUsrSID577 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID577 = $AllUsrSID577.substring(11)
                        $CurrUsr577 = $UsrID577 | where{$_ -like "S-1-5-21-*"}
                        $SID577 = $CurrUsr577[0]
                        $RegPathKey577 = $('HKEY_USERS\' + $SID577 + '\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer')
                        $NoInplcShre = Get-ItemProperty -Path $RegPathKey577 -Name NoInplaceSharing -ErrorAction 'silentlycontinue'
                        if (!$NoInplcShre){
                            $Res577 = '2'}
                        Else{
                        $PolRes577 = $NoInplcShre | Select-Object -ExpandProperty NoInplaceSharing
                        if ($PolRes577 -eq '1'){
                            $Res577 = '1'} else {$Res577 = '2'}
                            }
		                $Str577 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag577 + ';' + $Desc577 + ';' + $Res577 + ';' + $Using:CurntDateForm)
		                $Str577
						}

                        #========================================================================================================================================================
                        #19.7.27 Remote Desktop Services
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.28 RSS Feeds
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.29 Search
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "Search.admx/adml" that is included with the 
                        #   Microsoft Windows Vista, 2008, 7/2008R2, 8/2012, 8.1/2012R2 and Windows 10 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.30 Sound Recorder
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.31 Store
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #   The Group Policy settings contained within this section are provided by the Group Policy template "WinStoreUI.admx/adml" that is included with the 
                        #   Microsoft Windows 8/2012 & 8.1/2012R2 Administrative Templates.
                        #========================================================================================================================================================
                        #19.7.32 Tablet PC
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.33 Task Scheduler
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.34 Windows Calendar
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.35 Windows Color System
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.36 Windows Error Reporting
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.37 Windows Installer
                        #   This section contains recommendations related to Windows Installer.
                        #========================================================================================================================================================
                        
                        #19.7.37.1 (L1) Ensure 'Always install with elevated privileges' is set to 'Disabled' (Scored)
                        $Tag316 = '19.7.37.1'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count19++
		                $Desc316 = 'Ensure Prevent users from sharing files within their profile is set to Enabled (Scored)'
                        $Lvl316 = 'L1'
		                $AllUsrSID316 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID316 = $AllUsrSID316.substring(11)
                        $CurrUsr316 = $UsrID316 | where{$_ -like "S-1-5-21-*"}
                        $SID316 = $CurrUsr316[0]
                        $RegPathKey316 = $('HKEY_USERS\' + $SID316 + '\Software\Policies\Microsoft\Windows\Installer')
                        $AllwInstElev = Get-ItemProperty -Path $RegPathKey316 -Name AlwaysInstallElevated -ErrorAction 'silentlycontinue'
                        if (!$AllwInstElev){
                            $Res316 = '2'}
                        Else{
                        $PolRes316 = $AllwInstElev | Select-Object -ExpandProperty AlwaysInstallElevated
                        if ($PolRes316 -eq '0'){
                            $Res316 = '1'} else {$Res316 = '2'}
                            }
		                $Str316 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag316 + ';' + $Desc316 + ';' + $Res316 + ';' + $Using:CurntDateForm)
		                $Str316
                        }

                        #========================================================================================================================================================
                        #19.7.38 Windows Logon Options
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.39 Windows Mail
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.40 Windows Media Center
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.40 Windows Installer
                        #   This section contains recommendations related to Windows Installer.
                        #   This Group Policy section is provided by the Group Policy template MSI.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================
                        
                        #19.7.40.1 (L1) Ensure 'Always install with elevated privileges' is set to 'Disabled' (Scored) W2K16
                        $Tag578 = '19.7.40.1'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc578 = 'Ensure Prevent users from sharing files within their profile is set to Enabled (Scored)'
                        $Lvl578 = 'L1'
		                $AllUsrSID578 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID578 = $AllUsrSID578.substring(11)
                        $CurrUsr578 = $UsrID578 | where{$_ -like "S-1-5-21-*"}
                        $SID578 = $CurrUsr578[0]
                        $RegPathKey578 = $('HKEY_USERS\' + $SID578 + '\Software\Policies\Microsoft\Windows\Installer')
                        $AllwInstElev = Get-ItemProperty -Path $RegPathKey578 -Name AlwaysInstallElevated -ErrorAction 'silentlycontinue'
                        if (!$AllwInstElev){
                            $Res578 = '2'}
                        Else{
                        $PolRes578 = $AllwInstElev | Select-Object -ExpandProperty AlwaysInstallElevated
                        if ($PolRes578 -eq '0'){
                            $Res578 = '1'} else {$Res578 = '2'}
                            }
		                $Str578 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag578 + ';' + $Desc578 + ';' + $Res578 + ';' + $Using:CurntDateForm)
		                $Str578
						}

                        #========================================================================================================================================================
                        #19.7.41 Windows Media Player
                        #   This section contains recommendations related to Windows Media Player.
                        #========================================================================================================================================================
                        #19.7.41.1 Networking
                        #   This section is intentionally blank and exists to ensure the structure of Windows benchmarks is consistent.
                        #========================================================================================================================================================
                        #19.7.41.2 Playback
                        #   This section contains recommendations related to Windows Media Player Playback.
                        #========================================================================================================================================================
                        
                        #19.7.41.2.1 (L2) Ensure 'Prevent Codec Download' is set to 'Enabled' (Scored)
                        $Tag317 = '19.7.41.2'
                        if ($OSVersion -eq 'W2K12R2') {
                        $Count19++
		                $Desc317 = 'Ensure Prevent Codec Download is set to Enabled (Scored)'
                        $Lvl317 = 'L1'
		                $AllUsrSID317 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID317 = $AllUsrSID317.substring(11)
                        $CurrUsr317 = $UsrID317 | where{$_ -like "S-1-5-21-*"}
                        $SID317 = $CurrUsr317[0]
                        $RegPathKey317 = $('HKEY_USERS\' + $SID317 + '\Software\Policies\Microsoft\WindowsMediaPlayer')
                        $PrvntCdecDwnl = Get-ItemProperty -Path $RegPathKey317 -Name PreventCodecDownload -ErrorAction 'silentlycontinue'
                        if (!$PrvntCdecDwnl){
                            $Res317 = '2'}
                        Else{
                        $PolRes317 = $PrvntCdecDwnl | Select-Object -ExpandProperty PreventCodecDownload
                        if ($PolRes317 -eq '1'){
                            $Res317 = '1'} else {$Res317 = '2'}
                            }
		                $Str317 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag317 + ';' + $Desc317 + ';' + $Res317 + ';' + $Using:CurntDateForm)
		                $Str317
                        }

                        #========================================================================================================================================================
                        #19.7.44.2 Playback
                        #   This section contains recommendations related to Windows Media Player playback.
                        #   This Group Policy section is provided by the Group Policy template WindowsMediaPlayer.admx/adml that is included with all versions of the
                        #   Microsoft Windows Administrative Templates.
                        #========================================================================================================================================================

                        #19.7.44.2.1 (L2) Ensure 'Prevent Codec Download' is set to 'Enabled' (Scored) W2K16
                        $Tag579 = '19.7.41.2'
						if ($OSVersion -eq 'W2K16') {
                        $Count19++
		                $Desc579 = 'Ensure Prevent Codec Download is set to Enabled (Scored)'
                        $Lvl579 = 'L2'
		                $AllUsrSID579 = dir Registry::HKEY_USERS | Select-Object -ExpandProperty Name
                        $UsrID579 = $AllUsrSID579.substring(11)
                        $CurrUsr579 = $UsrID579 | where{$_ -like "S-1-5-21-*"}
                        $SID579 = $CurrUsr579[0]
                        $RegPathKey579 = $('HKEY_USERS\' + $SID579 + '\Software\Policies\Microsoft\WindowsMediaPlayer')
                        $PrvntCdecDwnl = Get-ItemProperty -Path $RegPathKey579 -Name PreventCodecDownload -ErrorAction 'silentlycontinue'
                        if (!$PrvntCdecDwnl){
                            $Res579 = '2'}
                        Else{
                        $PolRes579 = $PrvntCdecDwnl | Select-Object -ExpandProperty PreventCodecDownload
                        if ($PolRes579 -eq '1'){
                            $Res579 = '1'} else {$Res579 = '2'}
                            }
		                $Str579 = @($Using:Customer + ';' + $Using:Product + ';' + $OSVer + ';' + $Using:SrvName + ';' + $Tag579 + ';' + $Desc579 + ';' + $Res579 + ';' + $Using:CurntDateForm)
		                $Str579
						}

                        $Peso = 'WINDOWS'
                        $Chapt1 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum1 + ';' + $Cap1 + ';' + $Count1 + ';' + $OSVer + ';' + $Peso)
                        $Chapt2 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum2 + ';' + $Cap2 + ';' + $Count2 + ';' + $OSVer + ';' + $Peso)
                        $Chapt9 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum9 + ';' + $Cap9 + ';' + $Count9 + ';' + $OSVer + ';' + $Peso)
                        $Chapt17 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum17 + ';' + $Cap17 + ';' + $Count17 + ';' + $OSVer + ';' + $Peso)
                        $Chapt18 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum18 + ';' + $Cap18 + ';' + $Count18 + ';' + $OSVer + ';' + $Peso)
                        $Chapt19 = @($Using:Customer + ';' + $Using:Product + ';' + $CapNum19 + ';' + $Cap19 + ';' + $Count19 + ';' + $OSVer + ';' + $Peso)
                        $Chapters = @($Chapt1, $Chapt2, $Chapt9, $Chapt17, $Chapt18, $Chapt19)
                        $CISSrvFileName = $('C:\SETI\Chapters_' + $SrvType + '_' + $OSVersion + '.txt')
                        $Chapters | Out-File -FilePath $CISSrvFileName
                                                                                      
        }
        $SrvRoleType = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                  $WinProductType = Get-ItemProperty -Path 'HKLM:SYSTEM\CurrentControlSet\Control\ProductOptions' -Name ProductType | Select-Object -ExpandProperty ProductType
                    if ($WinProductType -eq 'LanmanNT'){
                            $SrvType = 'DC'}
                        Else{
                            if ($WinProductType -eq 'ServerNT'){
                                $SrvType = 'MS'}
                                 Else{
                                      $SrvType = 'WindowsClient'}                      
                            }
                            $SrvType
                        }
                        $SrvRoleType
            $OSClearVer = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{(Get-WmiObject Win32_OperatingSystem).Caption}
            if($OSClearVer.StartsWith('Microsoft Windows Server 2012 R2')){$OSVersion = 'W2K12R2'} Else{if($OSClearVer.StartsWith('Microsoft Windows Server 2016')){$OSVersion = 'W2K16'}}
            if ($SrvRoleType -eq 'DC'){
                if ($OSVersion -eq 'W2K12R2'){
                    $ChaptersDC2012 = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                        $CISChapFileName = $('C:\SETI\Chapters_DC_W2K12R2.txt')
                        $ChapContent = Get-Content -Path $CISChapFileName
                        $ChapContent
                        }
                    }
                if ($OSVersion -eq 'W2K16'){
                    $ChaptersDC2016 = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                        $CISChapFileName = $('C:\SETI\Chapters_DC_W2K16.txt')
                        $ChapContent = Get-Content -Path $CISChapFileName
                        $ChapContent
                        }
                    }
            }
                Else{
                    if ($SrvRoleType -eq 'MS'){
                        if ($OSVersion -eq 'W2K12R2'){
                            $ChaptersMS2012 = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                            $CISChapFileName = $('C:\SETI\Chapters_MS_W2K12R2.txt')
                            $ChapContent = Get-Content -Path $CISChapFileName
                            $ChapContent
                            }
                        }
                    if ($SrvRoleType -eq 'MS'){
                        if ($OSVersion -eq 'W2K16'){
                            $ChaptersMS2016 = Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
                            $CISChapFileName = $('C:\SETI\Chapters_MS_W2K16.txt')
                            $ChapContent = Get-Content -Path $CISChapFileName
                            $ChapContent
                            }
                        }
                    }
                }
            }
    Invoke-Command -ComputerName $ServerName -Credential $Cred -ScriptBlock{
    Remove-Item -Path C:\SETI -Recurse
    }
    Exit-PSSession
    $CISSrvFileName = $($FolderFiles + 'CIS_'+ $ServerName +'.txt')
    $ChaptersDC2012 | Out-File -FilePath $($FolderFiles + '\CAPITULOS_DC_2012.txt')  
    $ChaptersMS2012 | Out-File -FilePath $($FolderFiles + '\CAPITULOS_MS_2012.txt')
    $ChaptersDC2016 | Out-File -FilePath $($FolderFiles + '\CAPITULOS_DC_2016.txt')  
    $ChaptersMS2016 | Out-File -FilePath $($FolderFiles + '\CAPITULOS_MS_2016.txt')
    Add-Content $($FolderFiles + '\CIS.txt') $Result
    }
    $ChapDC2012 = Get-Content -Path $($FolderFiles + '\CAPITULOS_DC_2012.txt')
    $ChapMS2012 = Get-Content -Path $($FolderFiles + '\CAPITULOS_MS_2012.txt')
    $ChapDC2016 = Get-Content -Path $($FolderFiles + '\CAPITULOS_DC_2016.txt')
    $ChapMS2016 = Get-Content -Path $($FolderFiles + '\CAPITULOS_MS_2016.txt')